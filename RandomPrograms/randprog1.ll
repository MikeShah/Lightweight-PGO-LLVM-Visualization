; ModuleID = './RandomPrograms/randprog1.cpp'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"1\00", align 1
@_ZL3g_2 = internal global i32 -1, align 4
@.str1 = private unnamed_addr constant [4 x i8] c"g_2\00", align 1
@_ZL4g_33 = internal global i32 -2, align 4
@.str2 = private unnamed_addr constant [5 x i8] c"g_33\00", align 1
@_ZL4g_36 = internal global i32 4, align 4
@.str3 = private unnamed_addr constant [5 x i8] c"g_36\00", align 1
@_ZL4g_46 = internal global i16 28057, align 2
@.str4 = private unnamed_addr constant [5 x i8] c"g_46\00", align 1
@_ZL4g_48 = internal global i32 -1924627005, align 4
@.str5 = private unnamed_addr constant [5 x i8] c"g_48\00", align 1
@_ZL4g_49 = internal global [10 x [5 x i32]] [[5 x i32] [i32 -10, i32 1836696054, i32 -4, i32 -4, i32 -4], [5 x i32] [i32 -1249632573, i32 -1249632573, i32 1836696054, i32 1, i32 1], [5 x i32] [i32 -10, i32 1, i32 1, i32 1, i32 1], [5 x i32] [i32 1, i32 0, i32 1, i32 -4, i32 -792330888], [5 x i32] [i32 1, i32 1, i32 -10, i32 -1134614992, i32 -792330888], [5 x i32] [i32 1836696054, i32 -1249632573, i32 -1249632573, i32 1836696054, i32 1], [5 x i32] [i32 -4, i32 1836696054, i32 -10, i32 -792330888, i32 1], [5 x i32] [i32 -4, i32 -10, i32 1, i32 -10, i32 -4], [5 x i32] [i32 1836696054, i32 -1134614992, i32 1, i32 -792330888, i32 -1249632573], [5 x i32] [i32 1, i32 1836696054, i32 -1249632573, i32 -1249632573, i32 1836696054]], align 16
@.str6 = private unnamed_addr constant [11 x i8] c"g_49[i][j]\00", align 1
@.str7 = private unnamed_addr constant [18 x i8] c"index = [%d][%d]\0A\00", align 1
@_ZL4g_55 = internal global i32 1, align 4
@.str8 = private unnamed_addr constant [5 x i8] c"g_55\00", align 1
@_ZL4g_56 = internal global i16 1, align 2
@.str9 = private unnamed_addr constant [5 x i8] c"g_56\00", align 1
@_ZL4g_60 = internal global i16 12040, align 2
@.str10 = private unnamed_addr constant [5 x i8] c"g_60\00", align 1
@_ZL5g_166 = internal global i32 1881287054, align 4
@.str11 = private unnamed_addr constant [6 x i8] c"g_166\00", align 1
@_ZL5g_168 = internal global i32 -5, align 4
@.str12 = private unnamed_addr constant [6 x i8] c"g_168\00", align 1
@_ZL5g_277 = internal global i16 -25909, align 2
@.str13 = private unnamed_addr constant [6 x i8] c"g_277\00", align 1
@_ZL5g_394 = internal global i16 -3, align 2
@.str14 = private unnamed_addr constant [6 x i8] c"g_394\00", align 1
@_ZL5g_396 = internal global i32 -4, align 4
@.str15 = private unnamed_addr constant [6 x i8] c"g_396\00", align 1
@_ZL5g_398 = internal global i32 -1698197235, align 4
@.str16 = private unnamed_addr constant [6 x i8] c"g_398\00", align 1
@_ZL5g_489 = internal global i32 1693289766, align 4
@.str17 = private unnamed_addr constant [6 x i8] c"g_489\00", align 1
@_ZL5g_577 = internal global [5 x [1 x [2 x i32]]] [[1 x [2 x i32]] [[2 x i32] [i32 1, i32 8]], [1 x [2 x i32]] [[2 x i32] [i32 -9, i32 1]], [1 x [2 x i32]] zeroinitializer, [1 x [2 x i32]] [[2 x i32] [i32 0, i32 1]], [1 x [2 x i32]] [[2 x i32] [i32 -9, i32 8]]], align 16
@.str18 = private unnamed_addr constant [15 x i8] c"g_577[i][j][k]\00", align 1
@.str19 = private unnamed_addr constant [22 x i8] c"index = [%d][%d][%d]\0A\00", align 1
@_ZL5g_615 = internal global i32 1266665079, align 4
@.str20 = private unnamed_addr constant [6 x i8] c"g_615\00", align 1
@_ZL5g_622 = internal global i32 0, align 4
@.str21 = private unnamed_addr constant [6 x i8] c"g_622\00", align 1
@_ZL5g_778 = internal global i32 -8, align 4
@.str22 = private unnamed_addr constant [6 x i8] c"g_778\00", align 1
@_ZL5g_796 = internal global i32 -283799641, align 4
@.str23 = private unnamed_addr constant [6 x i8] c"g_796\00", align 1
@_ZL5g_859 = internal global i32 0, align 4
@.str24 = private unnamed_addr constant [6 x i8] c"g_859\00", align 1
@_ZL5g_860 = internal global [1 x [6 x i32]] [[6 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1]], align 16
@.str25 = private unnamed_addr constant [12 x i8] c"g_860[i][j]\00", align 1
@_ZL5g_930 = internal global i32 1, align 4
@.str26 = private unnamed_addr constant [6 x i8] c"g_930\00", align 1
@_ZL6g_1020 = internal global i32 174147155, align 4
@.str27 = private unnamed_addr constant [7 x i8] c"g_1020\00", align 1
@_ZL6g_1021 = internal global i32 0, align 4
@.str28 = private unnamed_addr constant [7 x i8] c"g_1021\00", align 1
@_ZL6g_1066 = internal global i16 -7964, align 2
@.str29 = private unnamed_addr constant [7 x i8] c"g_1066\00", align 1
@_ZL6g_1295 = internal global i32 6, align 4
@.str30 = private unnamed_addr constant [7 x i8] c"g_1295\00", align 1
@_ZL6g_1311 = internal global [6 x i32] [i32 1110868233, i32 1110868233, i32 1110868233, i32 1110868233, i32 1110868233, i32 1110868233], align 16
@.str31 = private unnamed_addr constant [10 x i8] c"g_1311[i]\00", align 1
@.str32 = private unnamed_addr constant [14 x i8] c"index = [%d]\0A\00", align 1
@_ZL6g_1430 = internal global i16 2, align 2
@.str33 = private unnamed_addr constant [7 x i8] c"g_1430\00", align 1
@_ZL6g_1442 = internal global i16 12071, align 2
@.str34 = private unnamed_addr constant [7 x i8] c"g_1442\00", align 1
@_ZL6g_1477 = internal global i16 -22218, align 2
@.str35 = private unnamed_addr constant [7 x i8] c"g_1477\00", align 1
@_ZL6g_1580 = internal global i16 -3, align 2
@.str36 = private unnamed_addr constant [7 x i8] c"g_1580\00", align 1
@_ZL6g_1666 = internal global i32 -5, align 4
@.str37 = private unnamed_addr constant [7 x i8] c"g_1666\00", align 1
@_ZL6g_1736 = internal global i16 -1, align 2
@.str38 = private unnamed_addr constant [7 x i8] c"g_1736\00", align 1
@_ZL6g_1834 = internal global i32 1, align 4
@.str39 = private unnamed_addr constant [7 x i8] c"g_1834\00", align 1
@_ZL6g_1873 = internal global i32 -1443672359, align 4
@.str40 = private unnamed_addr constant [7 x i8] c"g_1873\00", align 1
@_ZL6g_1892 = internal global i32 -1597644082, align 4
@.str41 = private unnamed_addr constant [7 x i8] c"g_1892\00", align 1
@_ZL6g_2106 = internal global i32 5, align 4
@.str42 = private unnamed_addr constant [7 x i8] c"g_2106\00", align 1
@_ZL6g_2124 = internal global [2 x [1 x [7 x i16]]] [[1 x [7 x i16]] [[7 x i16] [i16 -7341, i16 -7, i16 -7, i16 -7341, i16 12402, i16 -7341, i16 -7]], [1 x [7 x i16]] [[7 x i16] [i16 -8564, i16 -8564, i16 -7, i16 15222, i16 -7, i16 -8564, i16 -8564]]], align 16
@.str43 = private unnamed_addr constant [16 x i8] c"g_2124[i][j][k]\00", align 1
@_ZL6g_2318 = internal global i32 -1787628550, align 4
@.str44 = private unnamed_addr constant [7 x i8] c"g_2318\00", align 1
@_ZL13crc32_context = internal global i32 -1, align 4
@.str45 = private unnamed_addr constant [15 x i8] c"checksum = %X\0A\00", align 1
@.str46 = private unnamed_addr constant [35 x i8] c"...checksum after hashing %s : %X\0A\00", align 1
@_ZL9crc32_tab = internal global [256 x i32] zeroinitializer, align 16
@_ZZL6func_1vE3l_4 = private unnamed_addr constant [5 x [5 x [6 x i32]]] [[5 x [6 x i32]] [[6 x i32] [i32 -1130785399, i32 -1957822773, i32 -1582763539, i32 2, i32 895709185, i32 0], [6 x i32] [i32 -9, i32 -1957822773, i32 -6, i32 -9, i32 0, i32 1134343709], [6 x i32] [i32 -1830553323, i32 -5, i32 972421681, i32 1038378932, i32 1409643306, i32 655748694], [6 x i32] [i32 -1130785399, i32 0, i32 1409643306, i32 1, i32 1409643306, i32 0], [6 x i32] [i32 -1, i32 -5, i32 1286245973, i32 7, i32 0, i32 1409643306]], [5 x [6 x i32]] [[6 x i32] [i32 -28628944, i32 -1957822773, i32 276337448, i32 1038378932, i32 895709185, i32 2078931740], [6 x i32] [i32 1, i32 -1957822773, i32 1409643306, i32 1, i32 0, i32 972421681], [6 x i32] [i32 -9, i32 -5, i32 655748694, i32 -1, i32 1409643306, i32 1134343709], [6 x i32] [i32 -28628944, i32 0, i32 -1957822773, i32 0, i32 1409643306, i32 2078931740], [6 x i32] [i32 2, i32 -5, i32 -1582763539, i32 1, i32 0, i32 -1957822773]], [5 x [6 x i32]] [[6 x i32] [i32 -1757379985, i32 -1957822773, i32 1286245973, i32 -1, i32 895709185, i32 895709185], [6 x i32] [i32 -1830553323, i32 -1957822773, i32 -1957822773, i32 -1830553323, i32 0, i32 655748694], [6 x i32] [i32 1, i32 -5, i32 1134343709, i32 2, i32 1409643306, i32 972421681], [6 x i32] [i32 -1757379985, i32 0, i32 -6, i32 7, i32 1409643306, i32 895709185], [6 x i32] [i32 1038378932, i32 -5, i32 276337448, i32 0, i32 0, i32 -6]], [5 x [6 x i32]] [[6 x i32] [i32 -1130785399, i32 -1957822773, i32 -1582763539, i32 2, i32 895709185, i32 0], [6 x i32] [i32 -9, i32 -1957822773, i32 -6, i32 -9, i32 0, i32 1134343709], [6 x i32] [i32 -1830553323, i32 -5, i32 972421681, i32 1038378932, i32 1409643306, i32 655748694], [6 x i32] [i32 -1130785399, i32 0, i32 1409643306, i32 1, i32 1409643306, i32 0], [6 x i32] [i32 -1, i32 -5, i32 1286245973, i32 7, i32 0, i32 1409643306]], [5 x [6 x i32]] [[6 x i32] [i32 -28628944, i32 -1957822773, i32 276337448, i32 1038378932, i32 895709185, i32 2078931740], [6 x i32] [i32 1, i32 -1957822773, i32 1409643306, i32 1, i32 0, i32 972421681], [6 x i32] [i32 -9, i32 -5, i32 655748694, i32 -1, i32 1409643306, i32 1134343709], [6 x i32] [i32 -28628944, i32 0, i32 -1957822773, i32 0, i32 1409643306, i32 2078931740], [6 x i32] [i32 2, i32 -5, i32 -1582763539, i32 1, i32 0, i32 -1957822773]]], align 16
@_ZZL6func_1vE5l_871 = private unnamed_addr constant [9 x [3 x i32]] [[3 x i32] [i32 -224585530, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1], [3 x i32] [i32 754761900, i32 -1, i32 -1]], align 16
@_ZZL6func_1vE6l_1301 = private unnamed_addr constant [2 x [8 x [5 x i32]]] [[8 x [5 x i32]] [[5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0], [5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0], [5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0], [5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0]], [8 x [5 x i32]] [[5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0], [5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0], [5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0], [5 x i32] [i32 -2142866591, i32 -1, i32 -2142866591, i32 1, i32 -417784723], [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0]]], align 16
@_ZZL6func_1vE6l_1449 = private unnamed_addr constant [6 x i32] [i32 1980543023, i32 1980543023, i32 1980543023, i32 1980543023, i32 1980543023, i32 1980543023], align 16
@_ZZL6func_1vE6l_1628 = private unnamed_addr constant [6 x [4 x i16]] [[4 x i16] [i16 5806, i16 5806, i16 -2, i16 5806], [4 x i16] [i16 5806, i16 1, i16 1, i16 5806], [4 x i16] [i16 1, i16 5806, i16 1, i16 1], [4 x i16] [i16 5806, i16 5806, i16 -2, i16 5806], [4 x i16] [i16 5806, i16 1, i16 1, i16 5806], [4 x i16] [i16 1, i16 5806, i16 1, i16 1]], align 16
@_ZZL6func_1vE6l_1891 = private unnamed_addr constant [4 x [6 x [6 x i32]]] [[6 x [6 x i32]] [[6 x i32] [i32 1037320, i32 1037320, i32 -275675138, i32 -338704866, i32 -9, i32 -338704866], [6 x i32] [i32 679432479, i32 1037320, i32 679432479, i32 948090, i32 -275675138, i32 -275675138], [6 x i32] [i32 0, i32 679432479, i32 679432479, i32 0, i32 1037320, i32 -338704866], [6 x i32] [i32 -338704866, i32 0, i32 -275675138, i32 0, i32 -338704866, i32 948090], [6 x i32] [i32 0, i32 -338704866, i32 948090, i32 948090, i32 -338704866, i32 0], [6 x i32] [i32 679432479, i32 0, i32 1037320, i32 -338704866, i32 1037320, i32 0]], [6 x [6 x i32]] [[6 x i32] [i32 1037320, i32 679432479, i32 948090, i32 -275675138, i32 -275675138, i32 948090], [6 x i32] [i32 1037320, i32 1037320, i32 -275675138, i32 -338704866, i32 -9, i32 -338704866], [6 x i32] [i32 679432479, i32 1037320, i32 679432479, i32 948090, i32 -275675138, i32 -275675138], [6 x i32] [i32 679432479, i32 -338704866, i32 -338704866, i32 679432479, i32 -9, i32 948090], [6 x i32] [i32 948090, i32 679432479, i32 1037320, i32 679432479, i32 948090, i32 -275675138], [6 x i32] [i32 679432479, i32 948090, i32 -275675138, i32 -275675138, i32 948090, i32 679432479]], [6 x [6 x i32]] [[6 x i32] [i32 -338704866, i32 679432479, i32 -9, i32 948090, i32 -9, i32 679432479], [6 x i32] [i32 -9, i32 -338704866, i32 -275675138, i32 1037320, i32 1037320, i32 -275675138], [6 x i32] [i32 -9, i32 -9, i32 1037320, i32 948090, i32 0, i32 948090], [6 x i32] [i32 -338704866, i32 -9, i32 -338704866, i32 -275675138, i32 1037320, i32 1037320], [6 x i32] [i32 679432479, i32 -338704866, i32 -338704866, i32 679432479, i32 -9, i32 948090], [6 x i32] [i32 948090, i32 679432479, i32 1037320, i32 679432479, i32 948090, i32 -275675138]], [6 x [6 x i32]] [[6 x i32] [i32 679432479, i32 948090, i32 -275675138, i32 -275675138, i32 948090, i32 679432479], [6 x i32] [i32 -338704866, i32 679432479, i32 -9, i32 948090, i32 -9, i32 679432479], [6 x i32] [i32 -9, i32 -338704866, i32 -275675138, i32 1037320, i32 1037320, i32 -275675138], [6 x i32] [i32 -9, i32 -9, i32 1037320, i32 948090, i32 0, i32 948090], [6 x i32] [i32 -338704866, i32 -9, i32 -338704866, i32 -275675138, i32 1037320, i32 1037320], [6 x i32] [i32 679432479, i32 -338704866, i32 -338704866, i32 679432479, i32 -9, i32 948090]]], align 16
@_ZZL6func_1vE6l_2217 = private unnamed_addr constant [6 x [10 x i32]] [[10 x i32] [i32 8, i32 -872253894, i32 -227045996, i32 -590715710, i32 -6, i32 -6, i32 -590715710, i32 -227045996, i32 -872253894, i32 8], [10 x i32] [i32 1, i32 -872253894, i32 -9, i32 2121233469, i32 422996217, i32 -1701378101, i32 -6, i32 -1701378101, i32 422996217, i32 2121233469], [10 x i32] [i32 2121233469, i32 -848099926, i32 2121233469, i32 -872253894, i32 422996217, i32 0, i32 8, i32 1041240980, i32 1041240980, i32 8], [10 x i32] [i32 422996217, i32 -6, i32 0, i32 0, i32 -6, i32 422996217, i32 1, i32 1041240980, i32 -590715710, i32 -1701378101], [10 x i32] [i32 -848099926, i32 -1701378101, i32 2121233469, i32 -227045996, i32 1041240980, i32 -227045996, i32 2121233469, i32 -1701378101, i32 -848099926, i32 422996217], [10 x i32] [i32 -848099926, i32 0, i32 -9, i32 1, i32 -227045996, i32 422996217, i32 422996217, i32 -227045996, i32 1, i32 -9]], align 16
@_ZZL6func_1vE4l_59 = private unnamed_addr constant [1 x [9 x i32]] [[9 x i32] [i32 2137786228, i32 2137786228, i32 9, i32 2137786228, i32 2137786228, i32 9, i32 2137786228, i32 2137786228, i32 9]], align 16
@_ZZL6func_1vE5l_858 = private unnamed_addr constant [4 x i16] [i16 -14707, i16 -14707, i16 -14707, i16 -14707], align 2
@_ZZL6func_1vE6l_1503 = private unnamed_addr constant [6 x [4 x i16]] [[4 x i16] [i16 -24817, i16 -24817, i16 -24817, i16 -24817], [4 x i16] [i16 -24817, i16 -24817, i16 -24817, i16 -24817], [4 x i16] [i16 -24817, i16 -24817, i16 -24817, i16 -24817], [4 x i16] [i16 -24817, i16 -24817, i16 -24817, i16 -24817], [4 x i16] [i16 -24817, i16 -24817, i16 -24817, i16 -24817], [4 x i16] [i16 -24817, i16 -24817, i16 -24817, i16 -24817]], align 16
@_ZZL6func_1vE5l_725 = private unnamed_addr constant [10 x i32] [i32 1819239419, i32 1, i32 1819239419, i32 1819239419, i32 1, i32 1819239419, i32 1819239419, i32 1, i32 1819239419, i32 1819239419], align 16
@_ZZL6func_1vE5l_875 = private unnamed_addr constant [4 x [5 x [9 x i32]]] [[5 x [9 x i32]] [[9 x i32] [i32 1, i32 -1, i32 -6, i32 -1, i32 660341040, i32 1998782032, i32 -1943085183, i32 -1943085183, i32 1998782032], [9 x i32] [i32 -275818259, i32 0, i32 1, i32 0, i32 -275818259, i32 -47490640, i32 1313696051, i32 700861585, i32 -1975293404], [9 x i32] [i32 700861585, i32 -5, i32 -8, i32 881802582, i32 685840932, i32 -275818259, i32 1, i32 -741524309, i32 -1797235248], [9 x i32] [i32 -742009961, i32 1, i32 2, i32 -1975293404, i32 -841233877, i32 -47490640, i32 -1, i32 685840932, i32 -112774254], [9 x i32] [i32 -429554619, i32 1427265206, i32 -1401446539, i32 -697980267, i32 -6, i32 1998782032, i32 -1797235248, i32 -111810921, i32 685840932]], [5 x [9 x i32]] [[9 x i32] [i32 -1244175555, i32 -8, i32 748731527, i32 1, i32 -444520915, i32 881802582, i32 -1377500057, i32 1019336798, i32 -6], [9 x i32] [i32 1314521563, i32 -741524309, i32 891471557, i32 -841233877, i32 -1, i32 -1, i32 1, i32 1298941955, i32 -697980267], [9 x i32] [i32 1314521563, i32 412181402, i32 -1, i32 -1, i32 999858931, i32 -1797235248, i32 1298941955, i32 1, i32 -1], [9 x i32] [i32 -1244175555, i32 1019336798, i32 -841233877, i32 1427265206, i32 298999126, i32 -6, i32 1912941531, i32 -6, i32 298999126], [9 x i32] [i32 -429554619, i32 1998782032, i32 1998782032, i32 -429554619, i32 -1123850784, i32 -1975293404, i32 5, i32 263042027, i32 1019336798]], [5 x [9 x i32]] [[9 x i32] [i32 -742009961, i32 -6, i32 0, i32 -617042829, i32 700861585, i32 1, i32 -841233877, i32 -1401446539, i32 -429554619], [9 x i32] [i32 700861585, i32 1912941531, i32 -911117848, i32 -444520915, i32 -1123850784, i32 263042027, i32 -47490640, i32 -10, i32 1314521563], [9 x i32] [i32 -275818259, i32 -1, i32 -742009961, i32 0, i32 298999126, i32 -1, i32 -6, i32 -444520915, i32 412181402], [9 x i32] [i32 1, i32 -3, i32 -6, i32 -1123850784, i32 999858931, i32 1912941531, i32 0, i32 0, i32 -10], [9 x i32] [i32 -6, i32 0, i32 -47490640, i32 -742009961, i32 -1, i32 0, i32 1314521563, i32 -1, i32 -10]], [5 x [9 x i32]] [[9 x i32] [i32 0, i32 -1956734022, i32 -1975293404, i32 -1377500057, i32 -444520915, i32 -775396934, i32 -911117848, i32 -1, i32 412181402], [9 x i32] [i32 1, i32 -70444883, i32 0, i32 1314521563, i32 -6, i32 685840932, i32 685840932, i32 -6, i32 1314521563], [9 x i32] [i32 881802582, i32 1298941955, i32 881802582, i32 -1, i32 -841233877, i32 1, i32 0, i32 -1, i32 -429554619], [9 x i32] [i32 2, i32 700861585, i32 0, i32 412181402, i32 685840932, i32 -1244175555, i32 1998782032, i32 5, i32 1019336798], [9 x i32] [i32 1019336798, i32 -617042829, i32 -5, i32 -1, i32 0, i32 0, i32 1313696051, i32 298999126, i32 -1401446539]]], align 16
@_ZZL6func_1vE5l_924 = private unnamed_addr constant [2 x [10 x [7 x i32]]] [[10 x [7 x i32]] [[7 x i32] [i32 -1, i32 -1, i32 -6, i32 0, i32 1815420588, i32 -2, i32 7], [7 x i32] [i32 1374325200, i32 -1, i32 1, i32 0, i32 1815420588, i32 2086441245, i32 1688316134], [7 x i32] [i32 414476967, i32 3, i32 -559633732, i32 1855602959, i32 1815420588, i32 -9, i32 7], [7 x i32] [i32 1663173735, i32 -730813497, i32 7, i32 -9, i32 1815420588, i32 1855602959, i32 -559633732], [7 x i32] [i32 -730813497, i32 1663173735, i32 1688316134, i32 2086441245, i32 1815420588, i32 0, i32 1], [7 x i32] [i32 3, i32 414476967, i32 7, i32 -2, i32 1815420588, i32 0, i32 -6], [7 x i32] [i32 -1, i32 1374325200, i32 1, i32 -6, i32 1815420588, i32 -6, i32 1], [7 x i32] [i32 -1, i32 -1, i32 -6, i32 0, i32 1815420588, i32 -2, i32 7], [7 x i32] [i32 1374325200, i32 -1, i32 1, i32 0, i32 1815420588, i32 2086441245, i32 1688316134], [7 x i32] [i32 414476967, i32 3, i32 -559633732, i32 1855602959, i32 1815420588, i32 -9, i32 7]], [10 x [7 x i32]] [[7 x i32] [i32 1663173735, i32 -730813497, i32 7, i32 -9, i32 1815420588, i32 1855602959, i32 -559633732], [7 x i32] [i32 -730813497, i32 1663173735, i32 1688316134, i32 2086441245, i32 1815420588, i32 0, i32 1], [7 x i32] [i32 3, i32 414476967, i32 7, i32 -2, i32 1815420588, i32 0, i32 -6], [7 x i32] [i32 -1, i32 1374325200, i32 1, i32 -6, i32 1815420588, i32 -6, i32 1], [7 x i32] [i32 -1, i32 -1, i32 -6, i32 0, i32 1815420588, i32 -2, i32 7], [7 x i32] [i32 1374325200, i32 -1, i32 1, i32 0, i32 1815420588, i32 2086441245, i32 1688316134], [7 x i32] [i32 414476967, i32 3, i32 -559633732, i32 1855602959, i32 1815420588, i32 -9, i32 7], [7 x i32] [i32 1663173735, i32 -730813497, i32 7, i32 -9, i32 1815420588, i32 1855602959, i32 -559633732], [7 x i32] [i32 -730813497, i32 1663173735, i32 1688316134, i32 2086441245, i32 1815420588, i32 0, i32 1], [7 x i32] [i32 3, i32 414476967, i32 7, i32 -2, i32 1815420588, i32 0, i32 -6]]], align 16
@_ZZL6func_1vE6l_1165 = private unnamed_addr constant [8 x i32] [i32 -227461748, i32 891299874, i32 -227461748, i32 -227461748, i32 891299874, i32 -227461748, i32 -227461748, i32 891299874], align 16
@_ZZL6func_1vE6l_1351 = private unnamed_addr constant [7 x [6 x [5 x i32]]] [[6 x [5 x i32]] [[5 x i32] [i32 -806215593, i32 1, i32 1, i32 0, i32 3], [5 x i32] [i32 0, i32 649903633, i32 3, i32 -1299883054, i32 3], [5 x i32] [i32 -806215593, i32 -806215593, i32 1778401447, i32 1, i32 -2], [5 x i32] [i32 0, i32 -1299883054, i32 -1841935175, i32 -1299883054, i32 0], [5 x i32] [i32 3, i32 1, i32 -1018921074, i32 0, i32 0], [5 x i32] [i32 3, i32 -1299883054, i32 3, i32 649903633, i32 0]], [6 x [5 x i32]] [[5 x i32] [i32 -2, i32 -806215593, i32 1, i32 1, i32 0], [5 x i32] [i32 0, i32 649903633, i32 1159510307, i32 0, i32 0], [5 x i32] [i32 0, i32 1, i32 1, i32 0, i32 -2], [5 x i32] [i32 0, i32 0, i32 3, i32 -1, i32 3], [5 x i32] [i32 0, i32 -806215593, i32 -1018921074, i32 1, i32 3], [5 x i32] [i32 0, i32 -1, i32 -1841935175, i32 -1, i32 0]], [6 x [5 x i32]] [[5 x i32] [i32 -2, i32 1, i32 1778401447, i32 0, i32 -806215593], [5 x i32] [i32 3, i32 -1, i32 3, i32 0, i32 0], [5 x i32] [i32 3, i32 -806215593, i32 1, i32 1, i32 -806215593], [5 x i32] [i32 0, i32 0, i32 1159510307, i32 649903633, i32 0], [5 x i32] [i32 -806215593, i32 1, i32 1, i32 0, i32 3], [5 x i32] [i32 0, i32 649903633, i32 3, i32 -1299883054, i32 3]], [6 x [5 x i32]] [[5 x i32] [i32 -806215593, i32 -806215593, i32 1778401447, i32 1, i32 -2], [5 x i32] [i32 0, i32 -1299883054, i32 -1841935175, i32 -1299883054, i32 0], [5 x i32] [i32 3, i32 1, i32 -1018921074, i32 0, i32 0], [5 x i32] [i32 3, i32 -1299883054, i32 3, i32 649903633, i32 0], [5 x i32] [i32 -2, i32 -806215593, i32 1, i32 1, i32 0], [5 x i32] [i32 0, i32 649903633, i32 1159510307, i32 0, i32 0]], [6 x [5 x i32]] [[5 x i32] [i32 0, i32 1, i32 1, i32 0, i32 -2], [5 x i32] [i32 0, i32 0, i32 3, i32 -1, i32 3], [5 x i32] [i32 0, i32 -806215593, i32 -1018921074, i32 1, i32 3], [5 x i32] [i32 0, i32 -1, i32 -1841935175, i32 -1, i32 0], [5 x i32] [i32 -2, i32 1, i32 1778401447, i32 0, i32 -806215593], [5 x i32] [i32 3, i32 -1, i32 3, i32 0, i32 0]], [6 x [5 x i32]] [[5 x i32] [i32 3, i32 -806215593, i32 1, i32 1, i32 -806215593], [5 x i32] [i32 0, i32 0, i32 1159510307, i32 649903633, i32 0], [5 x i32] [i32 -806215593, i32 1, i32 1, i32 0, i32 3], [5 x i32] [i32 0, i32 649903633, i32 3, i32 -1299883054, i32 3], [5 x i32] [i32 -806215593, i32 -806215593, i32 1778401447, i32 1, i32 -2], [5 x i32] [i32 0, i32 -1299883054, i32 -1841935175, i32 -1299883054, i32 0]], [6 x [5 x i32]] [[5 x i32] [i32 3, i32 1, i32 -1018921074, i32 0, i32 0], [5 x i32] [i32 3, i32 -1299883054, i32 3, i32 649903633, i32 0], [5 x i32] [i32 -2, i32 -806215593, i32 1, i32 1, i32 0], [5 x i32] [i32 0, i32 649903633, i32 1159510307, i32 0, i32 0], [5 x i32] [i32 0, i32 1, i32 1, i32 0, i32 -2], [5 x i32] [i32 0, i32 0, i32 3, i32 -1, i32 3]]], align 16
@_ZZL6func_1vE6l_1451 = private unnamed_addr constant [10 x [6 x [1 x i32]]] [[6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]], [6 x [1 x i32]] [[1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100], [1 x i32] [i32 -1791735010], [1 x i32] [i32 -1573629100]]], align 16
@_ZZL6func_1vE6l_1514 = private unnamed_addr constant [4 x i32] [i32 -234938892, i32 -234938892, i32 -234938892, i32 -234938892], align 16
@_ZZL6func_1vE6l_1890 = private unnamed_addr constant [7 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -1, i32 -1], [2 x i32] [i32 -1, i32 -280167166], [2 x i32] [i32 1, i32 0], [2 x i32] [i32 -280167166, i32 0]], [4 x [2 x i32]] [[2 x i32] [i32 1, i32 -280167166], [2 x i32] [i32 -1, i32 -1], [2 x i32] [i32 -1, i32 -280167166], [2 x i32] [i32 1, i32 0]], [4 x [2 x i32]] [[2 x i32] [i32 -280167166, i32 0], [2 x i32] [i32 1, i32 -280167166], [2 x i32] [i32 -1, i32 -1], [2 x i32] [i32 -1, i32 -280167166]], [4 x [2 x i32]] [[2 x i32] [i32 1, i32 0], [2 x i32] [i32 -280167166, i32 0], [2 x i32] [i32 1, i32 -280167166], [2 x i32] [i32 -1, i32 -1]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 -280167166], [2 x i32] [i32 1, i32 0], [2 x i32] [i32 -280167166, i32 0], [2 x i32] [i32 1, i32 -280167166]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 -1], [2 x i32] [i32 -1, i32 -280167166], [2 x i32] [i32 1, i32 0], [2 x i32] [i32 -280167166, i32 0]], [4 x [2 x i32]] [[2 x i32] [i32 1, i32 -280167166], [2 x i32] [i32 -1, i32 -1], [2 x i32] [i32 -1, i32 -280167166], [2 x i32] [i32 1, i32 0]]], align 16
@_ZZL6func_1vE6l_1887 = private unnamed_addr constant [7 x i32] [i32 1660199867, i32 3, i32 1660199867, i32 1660199867, i32 3, i32 1660199867, i32 1660199867], align 16
@_ZZL6func_1vE6l_2185 = private unnamed_addr constant [3 x [10 x i32]] [[10 x i32] [i32 207507760, i32 207507760, i32 0, i32 207507760, i32 207507760, i32 0, i32 207507760, i32 207507760, i32 0, i32 207507760], [10 x i32] [i32 207507760, i32 434850564, i32 434850564, i32 207507760, i32 434850564, i32 434850564, i32 207507760, i32 434850564, i32 434850564, i32 207507760], [10 x i32] [i32 434850564, i32 207507760, i32 434850564, i32 434850564, i32 207507760, i32 434850564, i32 434850564, i32 207507760, i32 434850564, i32 434850564]], align 16
@_ZZL6func_1vE6l_2372 = private unnamed_addr constant [2 x [7 x [2 x i32]]] [[7 x [2 x i32]] [[2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656]], [7 x [2 x i32]] [[2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656], [2 x i32] [i32 -380349828, i32 -316819656]]], align 16
@_ZZL6func_1vE6l_2274 = private unnamed_addr constant [7 x i32] [i32 1761223169, i32 -1, i32 -1, i32 1761223169, i32 -1, i32 -1, i32 1761223169], align 16
@_ZZL6func_1vE6l_2337 = private unnamed_addr constant [7 x i32] [i32 625025538, i32 1253649506, i32 625025538, i32 625025538, i32 1253649506, i32 625025538, i32 625025538], align 16
@_ZZL6func_1vE6l_2373 = private unnamed_addr constant [10 x [5 x i32]] [[5 x i32] [i32 -4, i32 -768264010, i32 -4, i32 -768264010, i32 -4], [5 x i32] [i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039], [5 x i32] [i32 -4, i32 -768264010, i32 -4, i32 -768264010, i32 -4], [5 x i32] [i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039], [5 x i32] [i32 -4, i32 -768264010, i32 -4, i32 -768264010, i32 -4], [5 x i32] [i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039], [5 x i32] [i32 -4, i32 -768264010, i32 -4, i32 -768264010, i32 -4], [5 x i32] [i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039], [5 x i32] [i32 -4, i32 -768264010, i32 -4, i32 -768264010, i32 -4], [5 x i32] [i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039, i32 1441745039]], align 16
@_ZZL6func_1vE6l_2407 = private unnamed_addr constant [10 x [2 x [3 x i32]]] [[2 x [3 x i32]] [[3 x i32] [i32 -1107682178, i32 -8, i32 5], [3 x i32] [i32 -2, i32 0, i32 5]], [2 x [3 x i32]] [[3 x i32] [i32 1974753245, i32 5, i32 -1107682178], [3 x i32] [i32 1375867035, i32 1824131540, i32 1098186476]], [2 x [3 x i32]] [[3 x i32] [i32 5, i32 5, i32 1824131540], [3 x i32] [i32 -1, i32 0, i32 -444122073]], [2 x [3 x i32]] [[3 x i32] [i32 -1, i32 -8, i32 1375867035], [3 x i32] [i32 5, i32 -1107682178, i32 0]], [2 x [3 x i32]] [[3 x i32] [i32 1375867035, i32 -1, i32 1375867035], [3 x i32] [i32 1974753245, i32 -1072664214, i32 -444122073]], [2 x [3 x i32]] [[3 x i32] [i32 -2, i32 -1072664214, i32 1824131540], [3 x i32] [i32 -1107682178, i32 -1, i32 1098186476]], [2 x [3 x i32]] [[3 x i32] [i32 -644610635, i32 -1107682178, i32 -1107682178], [3 x i32] [i32 -1107682178, i32 -8, i32 5]], [2 x [3 x i32]] [[3 x i32] [i32 -2, i32 0, i32 5], [3 x i32] [i32 1974753245, i32 5, i32 -1107682178]], [2 x [3 x i32]] [[3 x i32] [i32 1375867035, i32 1824131540, i32 1098186476], [3 x i32] [i32 5, i32 5, i32 1824131540]], [2 x [3 x i32]] [[3 x i32] [i32 -1, i32 0, i32 -444122073], [3 x i32] [i32 -1, i32 -8, i32 1375867035]]], align 16
@_ZZL6func_1vE6l_2408 = private unnamed_addr constant [10 x [2 x i32]] [[2 x i32] [i32 8, i32 1439823568], [2 x i32] [i32 1439823568, i32 8], [2 x i32] [i32 1439823568, i32 1439823568], [2 x i32] [i32 8, i32 1439823568], [2 x i32] [i32 1439823568, i32 8], [2 x i32] [i32 1439823568, i32 1439823568], [2 x i32] [i32 8, i32 1439823568], [2 x i32] [i32 1439823568, i32 8], [2 x i32] [i32 1439823568, i32 1439823568], [2 x i32] [i32 8, i32 1439823568]], align 16
@_ZZL7func_21tsjE4l_72 = private unnamed_addr constant [6 x i16] [i16 4675, i16 4675, i16 4675, i16 4675, i16 4675, i16 4675], align 2
@_ZZL7func_21tsjE5l_188 = private unnamed_addr constant [7 x i32] [i32 -455168546, i32 4, i32 4, i32 -455168546, i32 4, i32 4, i32 -455168546], align 16
@_ZZL7func_21tsjE5l_274 = private unnamed_addr constant [8 x i32] [i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8], align 16
@_ZZL7func_21tsjE5l_247 = private unnamed_addr constant [1 x [2 x [3 x i32]]] [[2 x [3 x i32]] [[3 x i32] [i32 6, i32 6, i32 6], [3 x i32] [i32 -6, i32 -6, i32 -6]]], align 16
@_ZZL7func_21tsjE5l_276 = private unnamed_addr constant [5 x [5 x [7 x i16]]] [[5 x [7 x i16]] [[7 x i16] [i16 25072, i16 0, i16 0, i16 1255, i16 0, i16 14733, i16 -7], [7 x i16] [i16 1, i16 28603, i16 -4098, i16 -4438, i16 6, i16 -1, i16 -1], [7 x i16] [i16 21229, i16 14733, i16 -18174, i16 14733, i16 21229, i16 -13406, i16 9], [7 x i16] [i16 -1, i16 -4098, i16 -2976, i16 -5721, i16 -16139, i16 0, i16 -10], [7 x i16] [i16 -7789, i16 21229, i16 -29369, i16 9398, i16 0, i16 0, i16 0]], [5 x [7 x i16]] [[7 x i16] [i16 -1, i16 -5721, i16 -17281, i16 -1, i16 666, i16 6, i16 1], [7 x i16] [i16 21229, i16 -18174, i16 1, i16 1, i16 -18174, i16 21229, i16 0], [7 x i16] [i16 1, i16 -10, i16 -5, i16 10368, i16 23295, i16 -16139, i16 28603], [7 x i16] [i16 25072, i16 26536, i16 14733, i16 -1, i16 0, i16 0, i16 -1], [7 x i16] [i16 10368, i16 -10, i16 1, i16 0, i16 -5, i16 666, i16 -1]], [5 x [7 x i16]] [[7 x i16] [i16 0, i16 -18174, i16 1, i16 0, i16 1, i16 -18174, i16 1], [7 x i16] [i16 10368, i16 -2976, i16 0, i16 0, i16 -16139, i16 -17281, i16 -1], [7 x i16] [i16 9, i16 0, i16 -4, i16 0, i16 21556, i16 -7, i16 1], [7 x i16] [i16 -17281, i16 -10, i16 0, i16 -3, i16 -4438, i16 1, i16 3513], [7 x i16] [i16 -4, i16 -7789, i16 26536, i16 9, i16 9, i16 26536, i16 -7789]], [5 x [7 x i16]] [[7 x i16] [i16 0, i16 -4098, i16 0, i16 28603, i16 3513, i16 -16139, i16 -2976], [7 x i16] [i16 21229, i16 -7, i16 -7789, i16 0, i16 0, i16 21556, i16 -830], [7 x i16] [i16 3513, i16 -3, i16 1, i16 28603, i16 -4098, i16 -4438, i16 6], [7 x i16] [i16 0, i16 -830, i16 0, i16 9, i16 -1, i16 9, i16 0], [7 x i16] [i16 -16139, i16 -16139, i16 -5, i16 -3, i16 0, i16 3513, i16 -1]], [5 x [7 x i16]] [[7 x i16] [i16 -7789, i16 -18174, i16 -13406, i16 0, i16 21229, i16 0, i16 -4], [7 x i16] [i16 -5, i16 1, i16 -1, i16 0, i16 0, i16 -4098, i16 -16139], [7 x i16] [i16 21556, i16 1, i16 1255, i16 -29369, i16 -1, i16 -1, i16 -29369], [7 x i16] [i16 -10, i16 -1, i16 -10, i16 -16139, i16 -4098, i16 0, i16 0], [7 x i16] [i16 -7, i16 26536, i16 1, i16 -4, i16 0, i16 21229, i16 0]]], align 16
@_ZZL7func_80jE4l_85 = private unnamed_addr constant [7 x [7 x i32]] [[7 x i32] [i32 -9, i32 -67005619, i32 -67005619, i32 -9, i32 -583685334, i32 -5, i32 -5], [7 x i32] [i32 -196488370, i32 580163313, i32 -1, i32 580163313, i32 -196488370, i32 580163313, i32 -1], [7 x i32] [i32 -583685334, i32 -9, i32 -67005619, i32 -67005619, i32 -9, i32 -583685334, i32 -5], [7 x i32] [i32 0, i32 1218410546, i32 0, i32 580163313, i32 0, i32 1218410546, i32 0], [7 x i32] [i32 -583685334, i32 -67005619, i32 -5, i32 -9, i32 -9, i32 -5, i32 -67005619], [7 x i32] [i32 -196488370, i32 1218410546, i32 -1, i32 1218410546, i32 -196488370, i32 1218410546, i32 -1], [7 x i32] [i32 -9, i32 -9, i32 -5, i32 -67005619, i32 -583685334, i32 -583685334, i32 -67005619]], align 16
@_ZZL7func_80jE5l_135 = private unnamed_addr constant [10 x [10 x i16]] [[10 x i16] [i16 1, i16 15105, i16 -3957, i16 1, i16 1, i16 -3957, i16 15105, i16 1, i16 -3957, i16 1], [10 x i16] [i16 1, i16 13681, i16 6773, i16 1, i16 6773, i16 13681, i16 1, i16 -9102, i16 -9102, i16 1], [10 x i16] [i16 -9102, i16 1, i16 6773, i16 6773, i16 1, i16 -9102, i16 13681, i16 1, i16 13681, i16 -9102], [10 x i16] [i16 15105, i16 1, i16 -3957, i16 1, i16 15105, i16 -3957, i16 1, i16 1, i16 -3957, i16 15105], [10 x i16] [i16 15105, i16 13681, i16 13681, i16 13681, i16 3023, i16 29838, i16 13681, i16 29838, i16 3023, i16 13681], [10 x i16] [i16 29838, i16 13681, i16 29838, i16 3023, i16 13681, i16 -3957, i16 -3957, i16 13681, i16 3023, i16 29838], [10 x i16] [i16 -9102, i16 -9102, i16 1, i16 13681, i16 6773, i16 1, i16 6773, i16 13681, i16 1, i16 -9102], [10 x i16] [i16 6773, i16 -3957, i16 29838, i16 6773, i16 3023, i16 3023, i16 6773, i16 29838, i16 -3957, i16 6773], [10 x i16] [i16 29838, i16 -9102, i16 -3957, i16 3023, i16 -9102, i16 3023, i16 -3957, i16 -9102, i16 29838, i16 29838], [10 x i16] [i16 6773, i16 13681, i16 1, i16 -9102, i16 -9102, i16 1, i16 13681, i16 6773, i16 1, i16 6773]], align 16
@_ZZL7func_93ijjE4l_97 = private unnamed_addr constant [8 x [6 x [5 x i32]]] [[6 x [5 x i32]] [[5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3]], [6 x [5 x i32]] [[5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3]], [6 x [5 x i32]] [[5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3]], [6 x [5 x i32]] [[5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3]], [6 x [5 x i32]] [[5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1405256942, i32 2], [5 x i32] [i32 -3, i32 9, i32 1628881301, i32 9, i32 -3], [5 x i32] [i32 2, i32 1405256942, i32 -4, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9]], [6 x [5 x i32]] [[5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9]], [6 x [5 x i32]] [[5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9]], [6 x [5 x i32]] [[5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9], [5 x i32] [i32 76084847, i32 1, i32 -1624386027, i32 1, i32 76084847], [5 x i32] [i32 9, i32 1, i32 -1, i32 1, i32 9]]], align 16
@_ZZL7func_93ijjE5l_102 = private unnamed_addr constant [6 x [7 x i32]] [[7 x i32] [i32 -571150278, i32 0, i32 638087271, i32 -571150278, i32 -283360631, i32 -283360631, i32 -571150278], [7 x i32] [i32 -4, i32 0, i32 -4, i32 901053283, i32 0, i32 0, i32 0], [7 x i32] [i32 -426644873, i32 -571150278, i32 1910591458, i32 -571150278, i32 -426644873, i32 1910591458, i32 -1552070139], [7 x i32] [i32 -1, i32 0, i32 901053283, i32 -1, i32 901053283, i32 0, i32 -1], [7 x i32] [i32 638087271, i32 -1552070139, i32 0, i32 -283360631, i32 -1552070139, i32 -283360631, i32 0], [7 x i32] [i32 -1, i32 -1, i32 -275025420, i32 0, i32 974492719, i32 -275025420, i32 974492719]], align 16
@_ZZL7func_93ijjE5l_103 = private unnamed_addr constant [8 x i32] [i32 7, i32 200967678, i32 7, i32 200967678, i32 7, i32 200967678, i32 7, i32 200967678], align 16
@_ZZL7func_16jtjjE5l_346 = private unnamed_addr constant [6 x [3 x [4 x i32]]] [[3 x [4 x i32]] [[4 x i32] [i32 -1062101698, i32 295234022, i32 -1062101698, i32 -806616231], [4 x i32] [i32 -1062101698, i32 -806616231, i32 -806616231, i32 -1062101698], [4 x i32] [i32 1, i32 -806616231, i32 814885706, i32 -806616231]], [3 x [4 x i32]] [[4 x i32] [i32 -806616231, i32 295234022, i32 814885706, i32 814885706], [4 x i32] [i32 1, i32 1, i32 -806616231, i32 814885706], [4 x i32] [i32 -1062101698, i32 295234022, i32 -1062101698, i32 -806616231]], [3 x [4 x i32]] [[4 x i32] [i32 -1062101698, i32 -806616231, i32 -806616231, i32 -1062101698], [4 x i32] [i32 1, i32 -806616231, i32 814885706, i32 -806616231], [4 x i32] [i32 -806616231, i32 295234022, i32 814885706, i32 814885706]], [3 x [4 x i32]] [[4 x i32] [i32 1, i32 1, i32 -806616231, i32 814885706], [4 x i32] [i32 -1062101698, i32 295234022, i32 -1062101698, i32 -806616231], [4 x i32] [i32 -1062101698, i32 -806616231, i32 -806616231, i32 -1062101698]], [3 x [4 x i32]] [[4 x i32] [i32 1, i32 -806616231, i32 814885706, i32 -806616231], [4 x i32] [i32 -806616231, i32 295234022, i32 814885706, i32 814885706], [4 x i32] [i32 1, i32 1, i32 -806616231, i32 814885706]], [3 x [4 x i32]] [[4 x i32] [i32 -1062101698, i32 295234022, i32 -1062101698, i32 -806616231], [4 x i32] [i32 -1062101698, i32 -806616231, i32 -806616231, i32 -1062101698], [4 x i32] [i32 1, i32 -806616231, i32 814885706, i32 -806616231]]], align 16
@_ZZL7func_12jiiE5l_576 = private unnamed_addr constant [7 x [5 x i32]] [[5 x i32] [i32 9, i32 1, i32 -6, i32 -6, i32 1], [5 x i32] [i32 8, i32 -1458450247, i32 1298414959, i32 1, i32 1], [5 x i32] [i32 0, i32 -77074931, i32 0, i32 -6, i32 1626087962], [5 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1], [5 x i32] [i32 0, i32 9, i32 -77074931, i32 1, i32 -77074931], [5 x i32] [i32 8, i32 8, i32 1, i32 1, i32 -1539252300], [5 x i32] [i32 9, i32 0, i32 0, i32 9, i32 -77074931]], align 16
@_ZZL7func_12jiiE5l_554 = private unnamed_addr constant [2 x [1 x [4 x i32]]] [[1 x [4 x i32]] [[4 x i32] [i32 -891263142, i32 -891263142, i32 -891263142, i32 -891263142]], [1 x [4 x i32]] [[4 x i32] [i32 -891263142, i32 -891263142, i32 -891263142, i32 -891263142]]], align 16
@_ZZL7func_12jiiE5l_548 = private unnamed_addr constant [1 x [10 x [10 x i16]]] [[10 x [10 x i16]] [[10 x i16] [i16 -20577, i16 -15425, i16 -4339, i16 -29349, i16 -29190, i16 1, i16 -15645, i16 -4339, i16 9918, i16 9], [10 x i16] [i16 -7, i16 9918, i16 1, i16 -15425, i16 -29190, i16 9, i16 -29349, i16 1, i16 -29349, i16 9], [10 x i16] [i16 -29190, i16 -15645, i16 6446, i16 -15645, i16 -29190, i16 -20577, i16 12185, i16 6446, i16 -15425, i16 9], [10 x i16] [i16 1, i16 -29349, i16 5692, i16 12185, i16 -29190, i16 -7, i16 -15425, i16 5692, i16 -15645, i16 9], [10 x i16] [i16 9, i16 12185, i16 -2, i16 9918, i16 -29190, i16 -29190, i16 9918, i16 -2, i16 12185, i16 9], [10 x i16] [i16 -20577, i16 -15425, i16 -4339, i16 -29349, i16 -29190, i16 1, i16 -15645, i16 -4339, i16 9918, i16 9], [10 x i16] [i16 -7, i16 9918, i16 1, i16 -15425, i16 -29190, i16 9, i16 -29349, i16 1, i16 -29349, i16 9], [10 x i16] [i16 -29190, i16 -15645, i16 6446, i16 -15645, i16 -29190, i16 -20577, i16 12185, i16 6446, i16 -15425, i16 9], [10 x i16] [i16 1, i16 -29349, i16 5692, i16 12185, i16 -29190, i16 -7, i16 -15425, i16 5692, i16 -15645, i16 9], [10 x i16] [i16 9, i16 12185, i16 -2, i16 9918, i16 -29190, i16 -29190, i16 0, i16 -25239, i16 26184, i16 -15645]]], align 16
@_ZZL7func_12jiiE5l_561 = private unnamed_addr constant [3 x [4 x i32]] [[4 x i32] [i32 158997814, i32 -1036964723, i32 -1, i32 -1036964723], [4 x i32] [i32 -1036964723, i32 1, i32 -1, i32 -1], [4 x i32] [i32 158997814, i32 158997814, i32 -1036964723, i32 -1]], align 16
@_ZZL7func_10tE5l_613 = private unnamed_addr constant [2 x [6 x [3 x i32]]] [[6 x [3 x i32]] [[3 x i32] [i32 -3, i32 -3, i32 -659336089], [3 x i32] [i32 1050559983, i32 -659336089, i32 -659336089], [3 x i32] [i32 -659336089, i32 -3, i32 -1], [3 x i32] [i32 1050559983, i32 -3, i32 1050559983], [3 x i32] [i32 -3, i32 -659336089, i32 -1], [3 x i32] [i32 -3, i32 -3, i32 -659336089]], [6 x [3 x i32]] [[3 x i32] [i32 1050559983, i32 -659336089, i32 -659336089], [3 x i32] [i32 -659336089, i32 -3, i32 -1], [3 x i32] [i32 1050559983, i32 -3, i32 1050559983], [3 x i32] [i32 -3, i32 -659336089, i32 -1], [3 x i32] [i32 -3, i32 -3, i32 -659336089], [3 x i32] [i32 1050559983, i32 -659336089, i32 -659336089]]], align 16
@_ZZL7func_10tE5l_614 = private unnamed_addr constant [10 x i16] [i16 2866, i16 26370, i16 26370, i16 2866, i16 26370, i16 26370, i16 2866, i16 2591, i16 2591, i16 26370], align 16
@_ZZL7func_10tE5l_618 = private unnamed_addr constant [10 x [4 x i32]] [[4 x i32] [i32 1864603484, i32 -1544171254, i32 -10, i32 -10], [4 x i32] [i32 -4, i32 -4, i32 1864603484, i32 -10], [4 x i32] [i32 -6, i32 -1544171254, i32 -6, i32 1864603484], [4 x i32] [i32 -6, i32 1864603484, i32 1864603484, i32 -6], [4 x i32] [i32 -4, i32 1864603484, i32 -10, i32 1864603484], [4 x i32] [i32 1864603484, i32 -1544171254, i32 -10, i32 -10], [4 x i32] [i32 -4, i32 -4, i32 1864603484, i32 -10], [4 x i32] [i32 -6, i32 -1544171254, i32 -6, i32 1864603484], [4 x i32] [i32 -6, i32 1864603484, i32 1864603484, i32 -6], [4 x i32] [i32 -4, i32 1864603484, i32 -10, i32 1864603484]], align 16

; Function Attrs: uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %print_hash_value = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* %print_hash_value, align 4
  %0 = load i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %1, i64 1
  %2 = load i8** %arrayidx, align 8
  %call = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8]* @.str, i32 0, i32 0)) #5
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %print_hash_value, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  call void @_ZL19platform_main_beginv()
  call void @_ZL12crc32_gentabv()
  %call2 = call i32 @_ZL6func_1v()
  %3 = load i32* @_ZL3g_2, align 4
  %4 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %3, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %4)
  %5 = load i32* @_ZL4g_33, align 4
  %6 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %5, i8* getelementptr inbounds ([5 x i8]* @.str2, i32 0, i32 0), i32 %6)
  %7 = load i32* @_ZL4g_36, align 4
  %8 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %7, i8* getelementptr inbounds ([5 x i8]* @.str3, i32 0, i32 0), i32 %8)
  %9 = load i16* @_ZL4g_46, align 2
  %conv = sext i16 %9 to i32
  %10 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 %10)
  %11 = load i32* @_ZL4g_48, align 4
  %12 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %11, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 %12)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %13 = load i32* %i, align 4
  %cmp3 = icmp slt i32 %13, 10
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %14 = load i32* %j, align 4
  %cmp5 = icmp slt i32 %14, 5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %15 = load i32* %j, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load i32* %i, align 4
  %idxprom7 = sext i32 %16 to i64
  %arrayidx8 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom7
  %arrayidx9 = getelementptr inbounds [5 x i32]* %arrayidx8, i32 0, i64 %idxprom
  %17 = load i32* %arrayidx9, align 4
  %18 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %17, i8* getelementptr inbounds ([11 x i8]* @.str6, i32 0, i32 0), i32 %18)
  %19 = load i32* %print_hash_value, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then10, label %if.end12

if.then10:                                        ; preds = %for.body6
  %20 = load i32* %i, align 4
  %21 = load i32* %j, align 4
  %call11 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str7, i32 0, i32 0), i32 %20, i32 %21)
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %22 = load i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %23 = load i32* %i, align 4
  %inc14 = add nsw i32 %23, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %24 = load i32* @_ZL4g_55, align 4
  %25 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %24, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 %25)
  %26 = load i16* @_ZL4g_56, align 2
  %conv16 = sext i16 %26 to i32
  %27 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv16, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 %27)
  %28 = load i16* @_ZL4g_60, align 2
  %conv17 = zext i16 %28 to i32
  %29 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv17, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 %29)
  %30 = load i32* @_ZL5g_166, align 4
  %31 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %30, i8* getelementptr inbounds ([6 x i8]* @.str11, i32 0, i32 0), i32 %31)
  %32 = load i32* @_ZL5g_168, align 4
  %33 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %32, i8* getelementptr inbounds ([6 x i8]* @.str12, i32 0, i32 0), i32 %33)
  %34 = load volatile i16* @_ZL5g_277, align 2
  %conv18 = zext i16 %34 to i32
  %35 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv18, i8* getelementptr inbounds ([6 x i8]* @.str13, i32 0, i32 0), i32 %35)
  %36 = load i16* @_ZL5g_394, align 2
  %conv19 = zext i16 %36 to i32
  %37 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv19, i8* getelementptr inbounds ([6 x i8]* @.str14, i32 0, i32 0), i32 %37)
  %38 = load i32* @_ZL5g_396, align 4
  %39 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %38, i8* getelementptr inbounds ([6 x i8]* @.str15, i32 0, i32 0), i32 %39)
  %40 = load i32* @_ZL5g_398, align 4
  %41 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %40, i8* getelementptr inbounds ([6 x i8]* @.str16, i32 0, i32 0), i32 %41)
  %42 = load i32* @_ZL5g_489, align 4
  %43 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %42, i8* getelementptr inbounds ([6 x i8]* @.str17, i32 0, i32 0), i32 %43)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc45, %for.end15
  %44 = load i32* %i, align 4
  %cmp21 = icmp slt i32 %44, 5
  br i1 %cmp21, label %for.body22, label %for.end47

for.body22:                                       ; preds = %for.cond20
  store i32 0, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc42, %for.body22
  %45 = load i32* %j, align 4
  %cmp24 = icmp slt i32 %45, 1
  br i1 %cmp24, label %for.body25, label %for.end44

for.body25:                                       ; preds = %for.cond23
  store i32 0, i32* %k, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc39, %for.body25
  %46 = load i32* %k, align 4
  %cmp27 = icmp slt i32 %46, 2
  br i1 %cmp27, label %for.body28, label %for.end41

for.body28:                                       ; preds = %for.cond26
  %47 = load i32* %k, align 4
  %idxprom29 = sext i32 %47 to i64
  %48 = load i32* %j, align 4
  %idxprom30 = sext i32 %48 to i64
  %49 = load i32* %i, align 4
  %idxprom31 = sext i32 %49 to i64
  %arrayidx32 = getelementptr inbounds [5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 %idxprom31
  %arrayidx33 = getelementptr inbounds [1 x [2 x i32]]* %arrayidx32, i32 0, i64 %idxprom30
  %arrayidx34 = getelementptr inbounds [2 x i32]* %arrayidx33, i32 0, i64 %idxprom29
  %50 = load volatile i32* %arrayidx34, align 4
  %51 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %50, i8* getelementptr inbounds ([15 x i8]* @.str18, i32 0, i32 0), i32 %51)
  %52 = load i32* %print_hash_value, align 4
  %tobool35 = icmp ne i32 %52, 0
  br i1 %tobool35, label %if.then36, label %if.end38

if.then36:                                        ; preds = %for.body28
  %53 = load i32* %i, align 4
  %54 = load i32* %j, align 4
  %55 = load i32* %k, align 4
  %call37 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str19, i32 0, i32 0), i32 %53, i32 %54, i32 %55)
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %for.body28
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %56 = load i32* %k, align 4
  %inc40 = add nsw i32 %56, 1
  store i32 %inc40, i32* %k, align 4
  br label %for.cond26

for.end41:                                        ; preds = %for.cond26
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41
  %57 = load i32* %j, align 4
  %inc43 = add nsw i32 %57, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond23

for.end44:                                        ; preds = %for.cond23
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %58 = load i32* %i, align 4
  %inc46 = add nsw i32 %58, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond20

for.end47:                                        ; preds = %for.cond20
  %59 = load i32* @_ZL5g_615, align 4
  %60 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %59, i8* getelementptr inbounds ([6 x i8]* @.str20, i32 0, i32 0), i32 %60)
  %61 = load i32* @_ZL5g_622, align 4
  %62 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %61, i8* getelementptr inbounds ([6 x i8]* @.str21, i32 0, i32 0), i32 %62)
  %63 = load volatile i32* @_ZL5g_778, align 4
  %64 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %63, i8* getelementptr inbounds ([6 x i8]* @.str22, i32 0, i32 0), i32 %64)
  %65 = load i32* @_ZL5g_796, align 4
  %66 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %65, i8* getelementptr inbounds ([6 x i8]* @.str23, i32 0, i32 0), i32 %66)
  %67 = load i32* @_ZL5g_859, align 4
  %68 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %67, i8* getelementptr inbounds ([6 x i8]* @.str24, i32 0, i32 0), i32 %68)
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc65, %for.end47
  %69 = load i32* %i, align 4
  %cmp49 = icmp slt i32 %69, 1
  br i1 %cmp49, label %for.body50, label %for.end67

for.body50:                                       ; preds = %for.cond48
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc62, %for.body50
  %70 = load i32* %j, align 4
  %cmp52 = icmp slt i32 %70, 6
  br i1 %cmp52, label %for.body53, label %for.end64

for.body53:                                       ; preds = %for.cond51
  %71 = load i32* %j, align 4
  %idxprom54 = sext i32 %71 to i64
  %72 = load i32* %i, align 4
  %idxprom55 = sext i32 %72 to i64
  %arrayidx56 = getelementptr inbounds [1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 %idxprom55
  %arrayidx57 = getelementptr inbounds [6 x i32]* %arrayidx56, i32 0, i64 %idxprom54
  %73 = load i32* %arrayidx57, align 4
  %74 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %73, i8* getelementptr inbounds ([12 x i8]* @.str25, i32 0, i32 0), i32 %74)
  %75 = load i32* %print_hash_value, align 4
  %tobool58 = icmp ne i32 %75, 0
  br i1 %tobool58, label %if.then59, label %if.end61

if.then59:                                        ; preds = %for.body53
  %76 = load i32* %i, align 4
  %77 = load i32* %j, align 4
  %call60 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str7, i32 0, i32 0), i32 %76, i32 %77)
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %for.body53
  br label %for.inc62

for.inc62:                                        ; preds = %if.end61
  %78 = load i32* %j, align 4
  %inc63 = add nsw i32 %78, 1
  store i32 %inc63, i32* %j, align 4
  br label %for.cond51

for.end64:                                        ; preds = %for.cond51
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %79 = load i32* %i, align 4
  %inc66 = add nsw i32 %79, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond48

for.end67:                                        ; preds = %for.cond48
  %80 = load i32* @_ZL5g_930, align 4
  %81 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %80, i8* getelementptr inbounds ([6 x i8]* @.str26, i32 0, i32 0), i32 %81)
  %82 = load volatile i32* @_ZL6g_1020, align 4
  %83 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %82, i8* getelementptr inbounds ([7 x i8]* @.str27, i32 0, i32 0), i32 %83)
  %84 = load i32* @_ZL6g_1021, align 4
  %85 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %84, i8* getelementptr inbounds ([7 x i8]* @.str28, i32 0, i32 0), i32 %85)
  %86 = load i16* @_ZL6g_1066, align 2
  %conv68 = zext i16 %86 to i32
  %87 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv68, i8* getelementptr inbounds ([7 x i8]* @.str29, i32 0, i32 0), i32 %87)
  %88 = load i32* @_ZL6g_1295, align 4
  %89 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %88, i8* getelementptr inbounds ([7 x i8]* @.str30, i32 0, i32 0), i32 %89)
  store i32 0, i32* %i, align 4
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc78, %for.end67
  %90 = load i32* %i, align 4
  %cmp70 = icmp slt i32 %90, 6
  br i1 %cmp70, label %for.body71, label %for.end80

for.body71:                                       ; preds = %for.cond69
  %91 = load i32* %i, align 4
  %idxprom72 = sext i32 %91 to i64
  %arrayidx73 = getelementptr inbounds [6 x i32]* @_ZL6g_1311, i32 0, i64 %idxprom72
  %92 = load i32* %arrayidx73, align 4
  %93 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %92, i8* getelementptr inbounds ([10 x i8]* @.str31, i32 0, i32 0), i32 %93)
  %94 = load i32* %print_hash_value, align 4
  %tobool74 = icmp ne i32 %94, 0
  br i1 %tobool74, label %if.then75, label %if.end77

if.then75:                                        ; preds = %for.body71
  %95 = load i32* %i, align 4
  %call76 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str32, i32 0, i32 0), i32 %95)
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %for.body71
  br label %for.inc78

for.inc78:                                        ; preds = %if.end77
  %96 = load i32* %i, align 4
  %inc79 = add nsw i32 %96, 1
  store i32 %inc79, i32* %i, align 4
  br label %for.cond69

for.end80:                                        ; preds = %for.cond69
  %97 = load i16* @_ZL6g_1430, align 2
  %conv81 = sext i16 %97 to i32
  %98 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv81, i8* getelementptr inbounds ([7 x i8]* @.str33, i32 0, i32 0), i32 %98)
  %99 = load volatile i16* @_ZL6g_1442, align 2
  %conv82 = zext i16 %99 to i32
  %100 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv82, i8* getelementptr inbounds ([7 x i8]* @.str34, i32 0, i32 0), i32 %100)
  %101 = load i16* @_ZL6g_1477, align 2
  %conv83 = sext i16 %101 to i32
  %102 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv83, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i32 %102)
  %103 = load i16* @_ZL6g_1580, align 2
  %conv84 = sext i16 %103 to i32
  %104 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv84, i8* getelementptr inbounds ([7 x i8]* @.str36, i32 0, i32 0), i32 %104)
  %105 = load i32* @_ZL6g_1666, align 4
  %106 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %105, i8* getelementptr inbounds ([7 x i8]* @.str37, i32 0, i32 0), i32 %106)
  %107 = load i16* @_ZL6g_1736, align 2
  %conv85 = zext i16 %107 to i32
  %108 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv85, i8* getelementptr inbounds ([7 x i8]* @.str38, i32 0, i32 0), i32 %108)
  %109 = load i32* @_ZL6g_1834, align 4
  %110 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %109, i8* getelementptr inbounds ([7 x i8]* @.str39, i32 0, i32 0), i32 %110)
  %111 = load i32* @_ZL6g_1873, align 4
  %112 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %111, i8* getelementptr inbounds ([7 x i8]* @.str40, i32 0, i32 0), i32 %112)
  %113 = load volatile i32* @_ZL6g_1892, align 4
  %114 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %113, i8* getelementptr inbounds ([7 x i8]* @.str41, i32 0, i32 0), i32 %114)
  %115 = load i32* @_ZL6g_2106, align 4
  %116 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %115, i8* getelementptr inbounds ([7 x i8]* @.str42, i32 0, i32 0), i32 %116)
  store i32 0, i32* %i, align 4
  br label %for.cond86

for.cond86:                                       ; preds = %for.inc112, %for.end80
  %117 = load i32* %i, align 4
  %cmp87 = icmp slt i32 %117, 2
  br i1 %cmp87, label %for.body88, label %for.end114

for.body88:                                       ; preds = %for.cond86
  store i32 0, i32* %j, align 4
  br label %for.cond89

for.cond89:                                       ; preds = %for.inc109, %for.body88
  %118 = load i32* %j, align 4
  %cmp90 = icmp slt i32 %118, 1
  br i1 %cmp90, label %for.body91, label %for.end111

for.body91:                                       ; preds = %for.cond89
  store i32 0, i32* %k, align 4
  br label %for.cond92

for.cond92:                                       ; preds = %for.inc106, %for.body91
  %119 = load i32* %k, align 4
  %cmp93 = icmp slt i32 %119, 7
  br i1 %cmp93, label %for.body94, label %for.end108

for.body94:                                       ; preds = %for.cond92
  %120 = load i32* %k, align 4
  %idxprom95 = sext i32 %120 to i64
  %121 = load i32* %j, align 4
  %idxprom96 = sext i32 %121 to i64
  %122 = load i32* %i, align 4
  %idxprom97 = sext i32 %122 to i64
  %arrayidx98 = getelementptr inbounds [2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 %idxprom97
  %arrayidx99 = getelementptr inbounds [1 x [7 x i16]]* %arrayidx98, i32 0, i64 %idxprom96
  %arrayidx100 = getelementptr inbounds [7 x i16]* %arrayidx99, i32 0, i64 %idxprom95
  %123 = load i16* %arrayidx100, align 2
  %conv101 = zext i16 %123 to i32
  %124 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %conv101, i8* getelementptr inbounds ([16 x i8]* @.str43, i32 0, i32 0), i32 %124)
  %125 = load i32* %print_hash_value, align 4
  %tobool102 = icmp ne i32 %125, 0
  br i1 %tobool102, label %if.then103, label %if.end105

if.then103:                                       ; preds = %for.body94
  %126 = load i32* %i, align 4
  %127 = load i32* %j, align 4
  %128 = load i32* %k, align 4
  %call104 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str19, i32 0, i32 0), i32 %126, i32 %127, i32 %128)
  br label %if.end105

if.end105:                                        ; preds = %if.then103, %for.body94
  br label %for.inc106

for.inc106:                                       ; preds = %if.end105
  %129 = load i32* %k, align 4
  %inc107 = add nsw i32 %129, 1
  store i32 %inc107, i32* %k, align 4
  br label %for.cond92

for.end108:                                       ; preds = %for.cond92
  br label %for.inc109

for.inc109:                                       ; preds = %for.end108
  %130 = load i32* %j, align 4
  %inc110 = add nsw i32 %130, 1
  store i32 %inc110, i32* %j, align 4
  br label %for.cond89

for.end111:                                       ; preds = %for.cond89
  br label %for.inc112

for.inc112:                                       ; preds = %for.end111
  %131 = load i32* %i, align 4
  %inc113 = add nsw i32 %131, 1
  store i32 %inc113, i32* %i, align 4
  br label %for.cond86

for.end114:                                       ; preds = %for.cond86
  %132 = load i32* @_ZL6g_2318, align 4
  %133 = load i32* %print_hash_value, align 4
  call void @_ZL15transparent_crcjPci(i32 %132, i8* getelementptr inbounds ([7 x i8]* @.str44, i32 0, i32 0), i32 %133)
  %134 = load i32* @_ZL13crc32_context, align 4
  %conv115 = zext i32 %134 to i64
  %xor = xor i64 %conv115, 4294967295
  %conv116 = trunc i64 %xor to i32
  %135 = load i32* %print_hash_value, align 4
  call void @_ZL17platform_main_endji(i32 %conv116, i32 %135)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @_ZL19platform_main_beginv() #2 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_ZL12crc32_gentabv() #2 {
entry:
  %crc = alloca i32, align 4
  %poly = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 -306674912, i32* %poly, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  store i32 %1, i32* %crc, align 4
  store i32 8, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32* %j, align 4
  %cmp2 = icmp sgt i32 %2, 0
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32* %crc, align 4
  %and = and i32 %3, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %4 = load i32* %crc, align 4
  %shr = lshr i32 %4, 1
  %xor = xor i32 %shr, -306674912
  store i32 %xor, i32* %crc, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %5 = load i32* %crc, align 4
  %shr4 = lshr i32 %5, 1
  store i32 %shr4, i32* %crc, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32* %j, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %7 = load i32* %crc, align 4
  %8 = load i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @_ZL9crc32_tab, i32 0, i64 %idxprom
  store i32 %7, i32* %arrayidx, align 4
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: uwtable
define internal i32 @_ZL6func_1v() #0 {
entry:
  %retval = alloca i32, align 4
  %l_4 = alloca [5 x [5 x [6 x i32]]], align 16
  %l_659 = alloca i32, align 4
  %l_660 = alloca i32, align 4
  %l_676 = alloca i32, align 4
  %l_704 = alloca i32, align 4
  %l_820 = alloca i32, align 4
  %l_871 = alloca [9 x [3 x i32]], align 16
  %l_953 = alloca i32, align 4
  %l_1100 = alloca i32, align 4
  %l_1166 = alloca i32, align 4
  %l_1190 = alloca i32, align 4
  %l_1193 = alloca i16, align 2
  %l_1258 = alloca i32, align 4
  %l_1266 = alloca i32, align 4
  %l_1300 = alloca i32, align 4
  %l_1301 = alloca [2 x [8 x [5 x i32]]], align 16
  %l_1370 = alloca [5 x i32], align 16
  %l_1449 = alloca [6 x i32], align 16
  %l_1589 = alloca i32, align 4
  %l_1628 = alloca [6 x [4 x i16]], align 16
  %l_1629 = alloca i16, align 2
  %l_1688 = alloca i32, align 4
  %l_1729 = alloca i16, align 2
  %l_1737 = alloca i32, align 4
  %l_1837 = alloca [6 x i32], align 16
  %l_1891 = alloca [4 x [6 x [6 x i32]]], align 16
  %l_1955 = alloca i32, align 4
  %l_2170 = alloca i32, align 4
  %l_2181 = alloca i32, align 4
  %l_2215 = alloca [1 x i16], align 2
  %l_2217 = alloca [6 x [10 x i32]], align 16
  %l_2306 = alloca i32, align 4
  %l_2355 = alloca i32, align 4
  %l_2419 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l_3 = alloca i32, align 4
  %l_57 = alloca i32, align 4
  %l_59 = alloca [1 x [9 x i32]], align 16
  %l_63 = alloca i32, align 4
  %l_661 = alloca i16, align 2
  %i17 = alloca i32, align 4
  %j18 = alloca i32, align 4
  %l_7 = alloca i32, align 4
  %l_58 = alloca i32, align 4
  %l_603 = alloca i32, align 4
  %l_662 = alloca i16, align 2
  %l_679 = alloca i16, align 2
  %l_730 = alloca i32, align 4
  %l_858 = alloca [4 x i16], align 2
  %l_987 = alloca i32, align 4
  %l_1031 = alloca i32, align 4
  %l_1173 = alloca i32, align 4
  %l_1197 = alloca i32, align 4
  %l_1249 = alloca [10 x i32], align 16
  %l_1503 = alloca [6 x [4 x i16]], align 16
  %l_1591 = alloca i16, align 2
  %l_1613 = alloca i32, align 4
  %i162 = alloca i32, align 4
  %j163 = alloca i32, align 4
  %l_688 = alloca i16, align 2
  %l_703 = alloca i32, align 4
  %l_826 = alloca i32, align 4
  %l_861 = alloca i32, align 4
  %l_904 = alloca [3 x i16], align 2
  %l_1073 = alloca i16, align 2
  %l_1124 = alloca i16, align 2
  %l_1251 = alloca i32, align 4
  %l_1253 = alloca i32, align 4
  %l_1256 = alloca i32, align 4
  %l_1257 = alloca i32, align 4
  %i215 = alloca i32, align 4
  %l_725 = alloca [10 x i32], align 16
  %i290 = alloca i32, align 4
  %l_731 = alloca i32, align 4
  %l_795 = alloca i32, align 4
  %l_834 = alloca i32, align 4
  %l_872 = alloca i16, align 2
  %l_874 = alloca i32, align 4
  %l_929 = alloca i16, align 2
  %l_952 = alloca i32, align 4
  %l_759 = alloca [6 x i32], align 16
  %l_763 = alloca i32, align 4
  %l_862 = alloca i32, align 4
  %l_875 = alloca [4 x [5 x [9 x i32]]], align 16
  %i424 = alloca i32, align 4
  %j425 = alloca i32, align 4
  %k426 = alloca i32, align 4
  %l_762 = alloca i32, align 4
  %i607 = alloca i32, align 4
  %j608 = alloca i32, align 4
  %l_925 = alloca i32, align 4
  %l_928 = alloca i32, align 4
  %l_935 = alloca [3 x i32], align 4
  %i825 = alloca i32, align 4
  %l_924 = alloca [2 x [10 x [7 x i32]]], align 16
  %i838 = alloca i32, align 4
  %j839 = alloca i32, align 4
  %k840 = alloca i32, align 4
  %l_954 = alloca i32, align 4
  %l_1099 = alloca i32, align 4
  %l_1125 = alloca i32, align 4
  %l_1196 = alloca i32, align 4
  %l_1250 = alloca i32, align 4
  %l_1252 = alloca i32, align 4
  %l_1254 = alloca i32, align 4
  %l_1255 = alloca i32, align 4
  %l_1030 = alloca i16, align 2
  %l_1038 = alloca [4 x i32], align 16
  %l_1126 = alloca i16, align 2
  %i1091 = alloca i32, align 4
  %l_1039 = alloca i16, align 2
  %l_1074 = alloca i16, align 2
  %l_1156 = alloca i32, align 4
  %l_1165 = alloca [8 x i32], align 16
  %l_1167 = alloca i32, align 4
  %i1442 = alloca i32, align 4
  %j1443 = alloca i32, align 4
  %k1444 = alloca i32, align 4
  %l_1200 = alloca i32, align 4
  %l_1248 = alloca i32, align 4
  %l_1223 = alloca i32, align 4
  %l_1245 = alloca i16, align 2
  %l_1263 = alloca i32, align 4
  %l_1293 = alloca i32, align 4
  %l_1336 = alloca [5 x [2 x [1 x i32]]], align 16
  %l_1561 = alloca i16, align 2
  %i1658 = alloca i32, align 4
  %j1659 = alloca i32, align 4
  %k1660 = alloca i32, align 4
  %l_1292 = alloca i32, align 4
  %l_1294 = alloca i16, align 2
  %l_1306 = alloca i32, align 4
  %l_1309 = alloca i32, align 4
  %l_1310 = alloca i32, align 4
  %l_1352 = alloca [4 x i16], align 2
  %l_1384 = alloca i16, align 2
  %i1744 = alloca i32, align 4
  %l_1351 = alloca [7 x [6 x [5 x i32]]], align 16
  %i1756 = alloca i32, align 4
  %j1757 = alloca i32, align 4
  %k1758 = alloca i32, align 4
  %l_1307 = alloca i32, align 4
  %l_1308 = alloca [4 x i32], align 16
  %l_1334 = alloca i32, align 4
  %i1768 = alloca i32, align 4
  %l_1428 = alloca i32, align 4
  %l_1465 = alloca i16, align 2
  %l_1470 = alloca i32, align 4
  %l_1486 = alloca i32, align 4
  %l_1532 = alloca i32, align 4
  %l_1590 = alloca i32, align 4
  %l_1429 = alloca i16, align 2
  %l_1433 = alloca i32, align 4
  %l_1451 = alloca [10 x [6 x [1 x i32]]], align 16
  %i1990 = alloca i32, align 4
  %j1991 = alloca i32, align 4
  %k1992 = alloca i32, align 4
  %l_1478 = alloca i32, align 4
  %l_1514 = alloca [4 x i32], align 16
  %l_1614 = alloca i32, align 4
  %i2293 = alloca i32, align 4
  %l_1562 = alloca [8 x i32], align 16
  %l_1577 = alloca i32, align 4
  %i2394 = alloca i32, align 4
  %l_1609 = alloca i32, align 4
  %l_1644 = alloca [1 x i16], align 2
  %l_1661 = alloca i32, align 4
  %l_1667 = alloca i32, align 4
  %l_1689 = alloca i32, align 4
  %i2662 = alloca i32, align 4
  %l_1660 = alloca i32, align 4
  %l_1690 = alloca i16, align 2
  %l_1691 = alloca i32, align 4
  %l_1738 = alloca i32, align 4
  %l_1694 = alloca i16, align 2
  %l_1700 = alloca [1 x i32], align 4
  %i2834 = alloca i32, align 4
  %l_1748 = alloca i16, align 2
  %l_1771 = alloca i32, align 4
  %l_1801 = alloca i32, align 4
  %l_1853 = alloca i32, align 4
  %l_1876 = alloca i16, align 2
  %l_1877 = alloca i32, align 4
  %l_1878 = alloca i32, align 4
  %l_1879 = alloca i32, align 4
  %l_1883 = alloca i32, align 4
  %l_1888 = alloca [6 x i16], align 2
  %l_1889 = alloca i32, align 4
  %l_1890 = alloca [7 x [4 x [2 x i32]]], align 16
  %l_2080 = alloca i16, align 2
  %l_2145 = alloca i16, align 2
  %l_2214 = alloca i16, align 2
  %l_2336 = alloca i16, align 2
  %l_2406 = alloca i32, align 4
  %l_2418 = alloca i32, align 4
  %i2944 = alloca i32, align 4
  %j2945 = alloca i32, align 4
  %k2946 = alloca i32, align 4
  %l_1749 = alloca i16, align 2
  %l_1772 = alloca i32, align 4
  %l_1792 = alloca i32, align 4
  %l_1798 = alloca i32, align 4
  %l_1800 = alloca i32, align 4
  %l_1793 = alloca i32, align 4
  %l_1794 = alloca i32, align 4
  %l_1796 = alloca i32, align 4
  %l_1797 = alloca i32, align 4
  %l_1770 = alloca i32, align 4
  %l_1799 = alloca i32, align 4
  %l_1752 = alloca i32, align 4
  %l_1795 = alloca i32, align 4
  %l_1831 = alloca i16, align 2
  %l_1872 = alloca i16, align 2
  %l_1874 = alloca i32, align 4
  %l_1875 = alloca i32, align 4
  %l_1880 = alloca i32, align 4
  %l_1881 = alloca i32, align 4
  %l_1882 = alloca i32, align 4
  %l_1884 = alloca i32, align 4
  %l_1885 = alloca i32, align 4
  %l_1886 = alloca i16, align 2
  %l_1887 = alloca [7 x i32], align 16
  %l_1898 = alloca [1 x i32], align 4
  %l_2048 = alloca i32, align 4
  %l_2049 = alloca i32, align 4
  %l_2147 = alloca i32, align 4
  %i3221 = alloca i32, align 4
  %l_1923 = alloca i32, align 4
  %l_2000 = alloca i32, align 4
  %l_2021 = alloca i32, align 4
  %l_2050 = alloca [2 x [1 x i32]], align 4
  %l_2067 = alloca i16, align 2
  %i3233 = alloca i32, align 4
  %j3234 = alloca i32, align 4
  %l_1952 = alloca i32, align 4
  %l_1972 = alloca i32, align 4
  %l_1983 = alloca i32, align 4
  %l_1993 = alloca [3 x i32], align 4
  %i3469 = alloca i32, align 4
  %l_2024 = alloca i32, align 4
  %l_2029 = alloca i32, align 4
  %l_2064 = alloca i32, align 4
  %l_2142 = alloca i16, align 2
  %l_2146 = alloca i32, align 4
  %l_2185 = alloca [3 x [10 x i32]], align 16
  %l_2213 = alloca i32, align 4
  %i3992 = alloca i32, align 4
  %j3993 = alloca i32, align 4
  %l_2182 = alloca i16, align 2
  %i3998 = alloca i32, align 4
  %i4003 = alloca i32, align 4
  %i4097 = alloca i32, align 4
  %l_2216 = alloca i16, align 2
  %l_2265 = alloca i32, align 4
  %l_2272 = alloca i32, align 4
  %l_2273 = alloca i32, align 4
  %l_2317 = alloca i16, align 2
  %l_2372 = alloca [2 x [7 x [2 x i32]]], align 16
  %l_2374 = alloca i32, align 4
  %l_2390 = alloca i16, align 2
  %i4233 = alloca i32, align 4
  %j4234 = alloca i32, align 4
  %k4235 = alloca i32, align 4
  %l_2274 = alloca [7 x i32], align 16
  %l_2275 = alloca [2 x i32], align 4
  %i4240 = alloca i32, align 4
  %l_2316 = alloca i32, align 4
  %l_2319 = alloca [5 x i32], align 16
  %l_2337 = alloca [7 x i32], align 16
  %i4308 = alloca i32, align 4
  %i4365 = alloca i32, align 4
  %j4366 = alloca i32, align 4
  %k4367 = alloca i32, align 4
  %i4484 = alloca i32, align 4
  %j4485 = alloca i32, align 4
  %k4486 = alloca i32, align 4
  %l_2370 = alloca i16, align 2
  %l_2371 = alloca i32, align 4
  %l_2373 = alloca [10 x [5 x i32]], align 16
  %l_2396 = alloca i32, align 4
  %l_2407 = alloca [10 x [2 x [3 x i32]]], align 16
  %i4652 = alloca i32, align 4
  %j4653 = alloca i32, align 4
  %k4654 = alloca i32, align 4
  %l_2408 = alloca [10 x [2 x i32]], align 16
  %l_2413 = alloca i32, align 4
  %i4721 = alloca i32, align 4
  %j4722 = alloca i32, align 4
  %l_2395 = alloca i32, align 4
  %l_2416 = alloca i32, align 4
  %0 = bitcast [5 x [5 x [6 x i32]]]* %l_4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x [5 x [6 x i32]]]* @_ZZL6func_1vE3l_4 to i8*), i64 600, i32 16, i1 false)
  store i32 -1315234982, i32* %l_659, align 4
  store i32 -9, i32* %l_660, align 4
  store i32 3, i32* %l_676, align 4
  store i32 -1, i32* %l_704, align 4
  store i32 1387327434, i32* %l_820, align 4
  %1 = bitcast [9 x [3 x i32]]* %l_871 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([9 x [3 x i32]]* @_ZZL6func_1vE5l_871 to i8*), i64 108, i32 16, i1 false)
  store i32 -734747081, i32* %l_953, align 4
  store i32 -1, i32* %l_1100, align 4
  store i32 1545649513, i32* %l_1166, align 4
  store i32 -1553076418, i32* %l_1190, align 4
  store i16 1, i16* %l_1193, align 2
  store i32 -1, i32* %l_1258, align 4
  store i32 -367263005, i32* %l_1266, align 4
  store i32 -1, i32* %l_1300, align 4
  %2 = bitcast [2 x [8 x [5 x i32]]]* %l_1301 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([2 x [8 x [5 x i32]]]* @_ZZL6func_1vE6l_1301 to i8*), i64 320, i32 16, i1 false)
  %3 = bitcast [6 x i32]* %l_1449 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([6 x i32]* @_ZZL6func_1vE6l_1449 to i8*), i64 24, i32 16, i1 false)
  store i32 -1852051006, i32* %l_1589, align 4
  %4 = bitcast [6 x [4 x i16]]* %l_1628 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast ([6 x [4 x i16]]* @_ZZL6func_1vE6l_1628 to i8*), i64 48, i32 16, i1 false)
  store i16 -27843, i16* %l_1629, align 2
  store i32 -1, i32* %l_1688, align 4
  store i16 23106, i16* %l_1729, align 2
  store i32 1, i32* %l_1737, align 4
  %5 = bitcast [4 x [6 x [6 x i32]]]* %l_1891 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* bitcast ([4 x [6 x [6 x i32]]]* @_ZZL6func_1vE6l_1891 to i8*), i64 576, i32 16, i1 false)
  store i32 -1, i32* %l_1955, align 4
  store i32 0, i32* %l_2170, align 4
  store i32 1445153660, i32* %l_2181, align 4
  %6 = bitcast [6 x [10 x i32]]* %l_2217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* bitcast ([6 x [10 x i32]]* @_ZZL6func_1vE6l_2217 to i8*), i64 240, i32 16, i1 false)
  store i32 3, i32* %l_2306, align 4
  store i32 8, i32* %l_2355, align 4
  store i32 426035435, i32* %l_2419, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32* %i, align 4
  %cmp = icmp slt i32 %7, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc6, %for.end
  %10 = load i32* %i, align 4
  %cmp2 = icmp slt i32 %10, 6
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %11 = load i32* %i, align 4
  %idxprom4 = sext i32 %11 to i64
  %arrayidx5 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 %idxprom4
  store i32 -1, i32* %arrayidx5, align 4
  br label %for.inc6

for.inc6:                                         ; preds = %for.body3
  %12 = load i32* %i, align 4
  %inc7 = add nsw i32 %12, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc14, %for.end8
  %13 = load i32* %i, align 4
  %cmp10 = icmp slt i32 %13, 1
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond9
  %14 = load i32* %i, align 4
  %idxprom12 = sext i32 %14 to i64
  %arrayidx13 = getelementptr inbounds [1 x i16]* %l_2215, i32 0, i64 %idxprom12
  store i16 -1, i16* %arrayidx13, align 2
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %15 = load i32* %i, align 4
  %inc15 = add nsw i32 %15, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond9

for.end16:                                        ; preds = %for.cond9
  %16 = load i32* @_ZL3g_2, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end16
  store i32 622684660, i32* %l_3, align 4
  store i32 0, i32* %l_57, align 4
  %17 = bitcast [1 x [9 x i32]]* %l_59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* bitcast ([1 x [9 x i32]]* @_ZZL6func_1vE4l_59 to i8*), i64 36, i32 16, i1 false)
  store i32 -3, i32* %l_63, align 4
  store i16 1590, i16* %l_661, align 2
  %18 = load i32* %l_3, align 4
  %arrayidx19 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx20 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx19, i32 0, i64 4
  %arrayidx21 = getelementptr inbounds [6 x i32]* %arrayidx20, i32 0, i64 5
  %19 = load i32* %arrayidx21, align 4
  %and = and i32 %19, %18
  store i32 %and, i32* %arrayidx21, align 4
  store i32 0, i32* %l_3, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc159, %if.then
  %20 = load i32* %l_3, align 4
  %cmp23 = icmp ule i32 %20, 11
  br i1 %cmp23, label %for.body24, label %for.end161

for.body24:                                       ; preds = %for.cond22
  store i32 0, i32* %l_7, align 4
  store i32 0, i32* %l_58, align 4
  store i32 1075092791, i32* %l_603, align 4
  store i32 0, i32* %l_7, align 4
  store i32 0, i32* @_ZL3g_2, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc28, %for.body24
  %21 = load i32* @_ZL3g_2, align 4
  %cmp26 = icmp sge i32 %21, 5
  br i1 %cmp26, label %for.body27, label %for.end30

for.body27:                                       ; preds = %for.cond25
  %22 = load i32* @_ZL3g_2, align 4
  store i32 %22, i32* %retval
  br label %return

for.inc28:                                        ; No predecessors!
  %23 = load i32* @_ZL3g_2, align 4
  %inc29 = add nsw i32 %23, 1
  store i32 %inc29, i32* @_ZL3g_2, align 4
  br label %for.cond25

for.end30:                                        ; preds = %for.cond25
  %24 = load i32* %l_3, align 4
  %25 = load i32* %l_3, align 4
  %tobool31 = icmp ne i32 %25, 0
  %conv = zext i1 %tobool31 to i16
  %26 = load i32* @_ZL3g_2, align 4
  %27 = load i32* @_ZL4g_33, align 4
  %or = or i32 %27, %26
  store i32 %or, i32* @_ZL4g_33, align 4
  %conv32 = trunc i32 %or to i16
  %28 = load i32* %l_7, align 4
  %call = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv32, i32 %28)
  %conv33 = zext i16 %call to i32
  %29 = load i32* %l_7, align 4
  store i32 %29, i32* @_ZL4g_36, align 4
  %conv34 = trunc i32 %29 to i16
  %call35 = call i32 @_ZL7func_34t(i16 zeroext %conv34)
  %call36 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv33, i32 %call35)
  %conv37 = trunc i32 %call36 to i16
  %30 = load i32* @_ZL3g_2, align 4
  %31 = load i16* @_ZL4g_60, align 2
  %dec = add i16 %31, -1
  store i16 %dec, i16* @_ZL4g_60, align 2
  %32 = load i32* %l_58, align 4
  %conv38 = trunc i32 %32 to i16
  %call39 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %31, i16 zeroext %conv38)
  %33 = load i32* @_ZL3g_2, align 4
  %conv40 = trunc i32 %33 to i16
  %call41 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %call39, i16 zeroext %conv40)
  %conv42 = zext i16 %call41 to i32
  %34 = load i32* %l_63, align 4
  %xor = xor i32 %conv42, %34
  %cmp43 = icmp ne i32 %30, %xor
  %conv44 = zext i1 %cmp43 to i32
  %call45 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv37, i32 %conv44)
  %35 = load i32* %l_58, align 4
  %call46 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %call45, i32 %35)
  %conv47 = zext i16 %call46 to i32
  %36 = load i32* %l_7, align 4
  %cmp48 = icmp uge i32 %conv47, %36
  %conv49 = zext i1 %cmp48 to i32
  %arrayidx50 = getelementptr inbounds [1 x [9 x i32]]* %l_59, i32 0, i64 0
  %arrayidx51 = getelementptr inbounds [9 x i32]* %arrayidx50, i32 0, i64 1
  store i32 %conv49, i32* %arrayidx51, align 4
  %conv52 = trunc i32 %conv49 to i16
  %arrayidx53 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx54 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx53, i32 0, i64 4
  %arrayidx55 = getelementptr inbounds [6 x i32]* %arrayidx54, i32 0, i64 5
  %37 = load i32* %arrayidx55, align 4
  %conv56 = trunc i32 %37 to i16
  %38 = load i32* %l_58, align 4
  %call57 = call i32 @_ZL7func_21tsj(i16 zeroext %conv52, i16 signext %conv56, i32 %38)
  %arrayidx58 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 2
  %arrayidx59 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx58, i32 0, i64 2
  %arrayidx60 = getelementptr inbounds [6 x i32]* %arrayidx59, i32 0, i64 2
  %39 = load i32* %arrayidx60, align 4
  %call61 = call i32 @_ZL7func_16jtjj(i32 %24, i16 zeroext %conv, i32 %call57, i32 %39)
  %40 = load i32* @_ZL5g_398, align 4
  %41 = load i32* @_ZL5g_398, align 4
  %call62 = call zeroext i16 @_ZL7func_12jii(i32 %call61, i32 %40, i32 %41)
  %conv63 = zext i16 %call62 to i32
  store i32 %conv63, i32* %l_603, align 4
  %conv64 = trunc i32 %conv63 to i16
  %call65 = call i32 @_ZL7func_10t(i16 zeroext %conv64)
  %42 = load i32* @_ZL5g_622, align 4
  %or66 = or i32 %42, %call65
  store i32 %or66, i32* @_ZL5g_622, align 4
  %43 = load i32* %l_63, align 4
  %arrayidx67 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 4
  %arrayidx68 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx67, i32 0, i64 2
  %arrayidx69 = getelementptr inbounds [6 x i32]* %arrayidx68, i32 0, i64 0
  %44 = load i32* %arrayidx69, align 4
  %45 = load i32* @_ZL4g_48, align 4
  %46 = load i32* @_ZL4g_33, align 4
  %conv70 = trunc i32 %46 to i16
  store i16 %conv70, i16* @_ZL4g_46, align 2
  %tobool71 = icmp ne i16 %conv70, 0
  %lnot = xor i1 %tobool71, true
  %conv72 = zext i1 %lnot to i32
  store i32 %conv72, i32* @_ZL5g_396, align 4
  %47 = load i32* %l_603, align 4
  %48 = load i32* %l_603, align 4
  %49 = load i32* %l_659, align 4
  %arrayidx73 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx74 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx73, i32 0, i64 3
  %arrayidx75 = getelementptr inbounds [6 x i32]* %arrayidx74, i32 0, i64 1
  %50 = load i32* %arrayidx75, align 4
  %cmp76 = icmp slt i32 %49, %50
  %conv77 = zext i1 %cmp76 to i32
  %cmp78 = icmp eq i32 %48, %conv77
  %conv79 = zext i1 %cmp78 to i32
  %call80 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv79, i32 1)
  %51 = load i16* @_ZL5g_394, align 2
  %conv81 = zext i16 %51 to i32
  %xor82 = xor i32 %conv81, %call80
  %conv83 = trunc i32 %xor82 to i16
  store i16 %conv83, i16* @_ZL5g_394, align 2
  %52 = load i32* %l_659, align 4
  %conv84 = trunc i32 %52 to i16
  %call85 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv83, i16 zeroext %conv84)
  %conv86 = zext i16 %call85 to i32
  %arrayidx87 = getelementptr inbounds [1 x [9 x i32]]* %l_59, i32 0, i64 0
  %arrayidx88 = getelementptr inbounds [9 x i32]* %arrayidx87, i32 0, i64 4
  %53 = load i32* %arrayidx88, align 4
  %cmp89 = icmp sgt i32 %conv86, %53
  %conv90 = zext i1 %cmp89 to i32
  %or91 = or i32 %47, %conv90
  %call92 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext 12685, i32 %or91)
  %call93 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %call92, i32 1)
  %conv94 = sext i16 %call93 to i32
  %call95 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 1, i32 %conv94)
  %conv96 = trunc i32 %call95 to i16
  %54 = load i32* %l_603, align 4
  %conv97 = trunc i32 %54 to i16
  %call98 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv96, i16 signext %conv97)
  %conv99 = sext i16 %call98 to i32
  %55 = load i16* @_ZL4g_56, align 2
  %conv100 = sext i16 %55 to i32
  %xor101 = xor i32 %conv100, %conv99
  %conv102 = trunc i32 %xor101 to i16
  store i16 %conv102, i16* @_ZL4g_56, align 2
  %call103 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv102, i16 signext -1)
  %conv104 = sext i16 %call103 to i32
  %arrayidx105 = getelementptr inbounds [1 x [9 x i32]]* %l_59, i32 0, i64 0
  %arrayidx106 = getelementptr inbounds [9 x i32]* %arrayidx105, i32 0, i64 1
  %56 = load i32* %arrayidx106, align 4
  %call107 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv104, i32 %56)
  %conv108 = trunc i32 %call107 to i16
  %57 = load i32* %l_603, align 4
  %call109 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv108, i32 %57)
  %tobool110 = icmp ne i16 %call109, 0
  br i1 %tobool110, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.end30
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.end30
  %58 = phi i1 [ true, %for.end30 ], [ true, %lor.rhs ]
  %conv111 = zext i1 %58 to i32
  %call112 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv111, i32 -9)
  %xor113 = xor i32 %call112, 3
  %conv114 = trunc i32 %xor113 to i16
  %59 = load i32* @_ZL4g_33, align 4
  %conv115 = trunc i32 %59 to i16
  %call116 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv114, i16 signext %conv115)
  %conv117 = sext i16 %call116 to i32
  %cmp118 = icmp sle i32 %conv117, 1
  %conv119 = zext i1 %cmp118 to i16
  %60 = load i32* %l_58, align 4
  %call120 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv119, i32 %60)
  %conv121 = zext i16 %call120 to i32
  %61 = load i32* %l_660, align 4
  %and122 = and i32 %61, %conv121
  store i32 %and122, i32* %l_660, align 4
  %cmp123 = icmp eq i32 %conv72, %and122
  %conv124 = zext i1 %cmp123 to i32
  %arrayidx125 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx126 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx125, i32 0, i64 4
  %arrayidx127 = getelementptr inbounds [6 x i32]* %arrayidx126, i32 0, i64 5
  %62 = load i32* %arrayidx127, align 4
  %cmp128 = icmp sge i32 %conv124, %62
  %conv129 = zext i1 %cmp128 to i16
  %call130 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv129)
  %conv131 = zext i16 %call130 to i32
  %cmp132 = icmp ne i32 %45, %conv131
  %conv133 = zext i1 %cmp132 to i32
  %xor134 = xor i32 %44, %conv133
  %63 = load i16* %l_661, align 2
  %conv135 = zext i16 %63 to i32
  %xor136 = xor i32 %xor134, %conv135
  %64 = load i16* %l_661, align 2
  %conv137 = zext i16 %64 to i32
  %or138 = or i32 %xor136, %conv137
  %call139 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %43, i32 %or138)
  %arrayidx140 = getelementptr inbounds [1 x [9 x i32]]* %l_59, i32 0, i64 0
  %arrayidx141 = getelementptr inbounds [9 x i32]* %arrayidx140, i32 0, i64 1
  %65 = load i32* %arrayidx141, align 4
  %cmp142 = icmp sle i32 %call139, %65
  %conv143 = zext i1 %cmp142 to i16
  %arrayidx144 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 1
  %arrayidx145 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx144, i32 0, i64 2
  %arrayidx146 = getelementptr inbounds [6 x i32]* %arrayidx145, i32 0, i64 4
  %66 = load i32* %arrayidx146, align 4
  %conv147 = trunc i32 %66 to i16
  %call148 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv143, i16 signext %conv147)
  %call149 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %call148, i16 signext 1)
  %tobool150 = icmp ne i16 %call149, 0
  br i1 %tobool150, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.end
  %67 = load i32* %l_603, align 4
  %tobool151 = icmp ne i32 %67, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.end
  %68 = phi i1 [ false, %lor.end ], [ %tobool151, %land.rhs ]
  %conv152 = zext i1 %68 to i32
  %69 = load i32* %l_7, align 4
  %cmp153 = icmp ult i32 %conv152, %69
  %conv154 = zext i1 %cmp153 to i16
  %70 = load i16* %l_661, align 2
  %call155 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv154, i16 zeroext %70)
  %call156 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call155, i16 zeroext 21138)
  %conv157 = zext i16 %call156 to i32
  %71 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %and158 = and i32 %71, %conv157
  store i32 %and158, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  br label %for.inc159

for.inc159:                                       ; preds = %land.end
  %72 = load i32* %l_3, align 4
  %call160 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %72, i32 1)
  store i32 %call160, i32* %l_3, align 4
  br label %for.cond22

for.end161:                                       ; preds = %for.cond22
  br label %if.end2657

if.else:                                          ; preds = %for.end16
  store i16 7361, i16* %l_662, align 2
  store i16 -1, i16* %l_679, align 2
  store i32 1, i32* %l_730, align 4
  %73 = bitcast [4 x i16]* %l_858 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* bitcast ([4 x i16]* @_ZZL6func_1vE5l_858 to i8*), i64 8, i32 2, i1 false)
  store i32 -1506166480, i32* %l_987, align 4
  store i32 2, i32* %l_1031, align 4
  store i32 503961690, i32* %l_1173, align 4
  store i32 740576033, i32* %l_1197, align 4
  %74 = bitcast [10 x i32]* %l_1249 to i8*
  call void @llvm.memset.p0i8.i64(i8* %74, i8 0, i64 40, i32 16, i1 false)
  %75 = bitcast i8* %74 to [10 x i32]*
  %76 = getelementptr [10 x i32]* %75, i32 0, i32 1
  store i32 1, i32* %76
  %77 = getelementptr [10 x i32]* %75, i32 0, i32 2
  store i32 1, i32* %77
  %78 = getelementptr [10 x i32]* %75, i32 0, i32 4
  store i32 1, i32* %78
  %79 = getelementptr [10 x i32]* %75, i32 0, i32 5
  store i32 1, i32* %79
  %80 = getelementptr [10 x i32]* %75, i32 0, i32 7
  store i32 1, i32* %80
  %81 = getelementptr [10 x i32]* %75, i32 0, i32 8
  store i32 1, i32* %81
  %82 = bitcast [6 x [4 x i16]]* %l_1503 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* bitcast ([6 x [4 x i16]]* @_ZZL6func_1vE6l_1503 to i8*), i64 48, i32 16, i1 false)
  store i16 6, i16* %l_1591, align 2
  store i32 1988974391, i32* %l_1613, align 4
  br label %lbl_873

lbl_873:                                          ; preds = %if.then1737, %if.then990, %if.then711, %if.else
  %83 = load i16* %l_662, align 2
  %tobool164 = icmp ne i16 %83, 0
  br i1 %tobool164, label %land.rhs165, label %land.end207

land.rhs165:                                      ; preds = %lbl_873
  %84 = load i32* @_ZL5g_166, align 4
  %conv166 = trunc i32 %84 to i16
  %call167 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv166, i16 zeroext 0)
  %tobool168 = icmp ne i16 %call167, 0
  br i1 %tobool168, label %land.rhs169, label %land.end199

land.rhs169:                                      ; preds = %land.rhs165
  %85 = load i16* %l_662, align 2
  %86 = load volatile i16* @_ZL5g_277, align 2
  %conv170 = zext i16 %86 to i32
  %call171 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %85, i32 %conv170)
  store i16 11667, i16* @_ZL4g_60, align 2
  store i32 -11668, i32* %l_676, align 4
  %87 = load i16* %l_662, align 2
  %conv172 = sext i16 %87 to i32
  %cmp173 = icmp sgt i32 -11668, %conv172
  %conv174 = zext i1 %cmp173 to i32
  %88 = load i32* %l_660, align 4
  %and175 = and i32 0, %88
  %conv176 = trunc i32 %and175 to i16
  %call177 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext 1, i16 signext %conv176)
  %conv178 = sext i16 %call177 to i32
  %and179 = and i32 %conv174, %conv178
  %89 = load i16* %l_662, align 2
  %conv180 = sext i16 %89 to i32
  %cmp181 = icmp ne i32 %and179, %conv180
  %conv182 = zext i1 %cmp181 to i32
  %arrayidx183 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 2
  %arrayidx184 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx183, i32 0, i64 0
  %arrayidx185 = getelementptr inbounds [6 x i32]* %arrayidx184, i32 0, i64 0
  %90 = load i32* %arrayidx185, align 4
  %xor186 = xor i32 %conv182, %90
  %91 = load i32* @_ZL5g_622, align 4
  %cmp187 = icmp eq i32 %xor186, %91
  %conv188 = zext i1 %cmp187 to i32
  %92 = load i16* %l_679, align 2
  %conv189 = zext i16 %92 to i32
  %cmp190 = icmp slt i32 %conv188, %conv189
  %conv191 = zext i1 %cmp190 to i32
  %93 = load i32* %l_659, align 4
  %cmp192 = icmp eq i32 %conv191, %93
  %conv193 = zext i1 %cmp192 to i16
  %94 = load i32* @_ZL4g_36, align 4
  %call194 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv193, i32 %94)
  %conv195 = sext i16 %call194 to i32
  %call196 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %call171, i32 %conv195)
  %conv197 = sext i16 %call196 to i32
  %95 = load i32* %l_660, align 4
  %cmp198 = icmp sge i32 %conv197, %95
  br label %land.end199

land.end199:                                      ; preds = %land.rhs169, %land.rhs165
  %96 = phi i1 [ false, %land.rhs165 ], [ %cmp198, %land.rhs169 ]
  %conv200 = zext i1 %96 to i32
  %cmp201 = icmp sge i32 %conv200, 1997
  %conv202 = zext i1 %cmp201 to i32
  %cmp203 = icmp ugt i32 %conv202, 0
  %conv204 = zext i1 %cmp203 to i32
  %97 = load i32* @_ZL5g_398, align 4
  %call205 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv204, i32 %97)
  %tobool206 = icmp ne i32 %call205, 0
  br label %land.end207

land.end207:                                      ; preds = %land.end199, %lbl_873
  %98 = phi i1 [ false, %lbl_873 ], [ %tobool206, %land.end199 ]
  %conv208 = zext i1 %98 to i32
  %arrayidx209 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 2
  %arrayidx210 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx209, i32 0, i64 0
  %arrayidx211 = getelementptr inbounds [6 x i32]* %arrayidx210, i32 0, i64 4
  store i32 %conv208, i32* %arrayidx211, align 4
  store i32 0, i32* %l_676, align 4
  br label %for.cond212

for.cond212:                                      ; preds = %for.inc1652, %land.end207
  %99 = load i32* %l_676, align 4
  %cmp213 = icmp sle i32 %99, 0
  br i1 %cmp213, label %for.body214, label %for.end1654

for.body214:                                      ; preds = %for.cond212
  store i16 1, i16* %l_688, align 2
  store i32 5, i32* %l_703, align 4
  store i32 -1645967106, i32* %l_826, align 4
  store i32 -4, i32* %l_861, align 4
  store i16 4, i16* %l_1073, align 2
  store i16 0, i16* %l_1124, align 2
  store i32 -1, i32* %l_1251, align 4
  store i32 -1, i32* %l_1253, align 4
  store i32 1112764957, i32* %l_1256, align 4
  store i32 -335843719, i32* %l_1257, align 4
  store i32 0, i32* %i215, align 4
  br label %for.cond216

for.cond216:                                      ; preds = %for.inc221, %for.body214
  %100 = load i32* %i215, align 4
  %cmp217 = icmp slt i32 %100, 3
  br i1 %cmp217, label %for.body218, label %for.end223

for.body218:                                      ; preds = %for.cond216
  %101 = load i32* %i215, align 4
  %idxprom219 = sext i32 %101 to i64
  %arrayidx220 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 %idxprom219
  store i16 -8, i16* %arrayidx220, align 2
  br label %for.inc221

for.inc221:                                       ; preds = %for.body218
  %102 = load i32* %i215, align 4
  %inc222 = add nsw i32 %102, 1
  store i32 %inc222, i32* %i215, align 4
  br label %for.cond216

for.end223:                                       ; preds = %for.cond216
  %103 = load i16* %l_662, align 2
  %104 = load i16* %l_679, align 2
  %conv224 = zext i16 %104 to i32
  %105 = load volatile i16* @_ZL5g_277, align 2
  %conv225 = zext i16 %105 to i32
  %xor226 = xor i32 %conv224, %conv225
  store i32 %xor226, i32* @_ZL4g_55, align 4
  %106 = load i32* @_ZL4g_48, align 4
  %and227 = and i32 %106, %xor226
  store i32 %and227, i32* @_ZL4g_48, align 4
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %lor.end279, label %lor.rhs229

lor.rhs229:                                       ; preds = %for.end223
  %107 = load i16* %l_688, align 2
  %conv230 = sext i16 %107 to i32
  %arrayidx231 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 2
  %arrayidx232 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx231, i32 0, i64 3
  %arrayidx233 = getelementptr inbounds [6 x i32]* %arrayidx232, i32 0, i64 5
  %108 = load i32* %arrayidx233, align 4
  %conv234 = trunc i32 %108 to i16
  %call235 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext 8431, i32 15)
  %call236 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv234, i16 signext %call235)
  %109 = load i16* @_ZL4g_60, align 2
  %conv237 = zext i16 %109 to i32
  %110 = load i16* %l_688, align 2
  %conv238 = sext i16 %110 to i32
  %cmp239 = icmp slt i32 %conv238, 412
  %conv240 = zext i1 %cmp239 to i32
  %111 = load i32* @_ZL4g_55, align 4
  %call241 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv240, i32 %111)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %land.rhs243, label %land.end244

land.rhs243:                                      ; preds = %lor.rhs229
  br label %land.end244

land.end244:                                      ; preds = %land.rhs243, %lor.rhs229
  %112 = phi i1 [ false, %lor.rhs229 ], [ true, %land.rhs243 ]
  %conv245 = zext i1 %112 to i32
  %arrayidx246 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 1
  %arrayidx247 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx246, i32 0, i64 1
  %arrayidx248 = getelementptr inbounds [6 x i32]* %arrayidx247, i32 0, i64 5
  %113 = load i32* %arrayidx248, align 4
  %cmp249 = icmp sle i32 %conv245, %113
  %conv250 = zext i1 %cmp249 to i16
  %114 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 3, i64 0, i64 1), align 4
  %conv251 = trunc i32 %114 to i16
  %call252 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv250, i16 signext %conv251)
  %conv253 = sext i16 %call252 to i32
  %cmp254 = icmp slt i32 %conv237, %conv253
  br i1 %cmp254, label %lor.end256, label %lor.rhs255

lor.rhs255:                                       ; preds = %land.end244
  br label %lor.end256

lor.end256:                                       ; preds = %lor.rhs255, %land.end244
  %115 = phi i1 [ true, %land.end244 ], [ true, %lor.rhs255 ]
  %conv257 = zext i1 %115 to i32
  %116 = load i32* %l_703, align 4
  %or258 = or i32 %116, %conv257
  store i32 %or258, i32* %l_703, align 4
  %tobool259 = icmp ne i32 %or258, 0
  br i1 %tobool259, label %lor.end262, label %lor.rhs260

lor.rhs260:                                       ; preds = %lor.end256
  %117 = load i32* @_ZL4g_33, align 4
  %tobool261 = icmp ne i32 %117, 0
  br label %lor.end262

lor.end262:                                       ; preds = %lor.rhs260, %lor.end256
  %118 = phi i1 [ true, %lor.end256 ], [ %tobool261, %lor.rhs260 ]
  %conv263 = zext i1 %118 to i32
  %119 = load i16* %l_679, align 2
  %conv264 = zext i16 %119 to i32
  %call265 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv263, i32 %conv264)
  %120 = load i16* @_ZL4g_46, align 2
  %conv266 = sext i16 %120 to i32
  %cmp267 = icmp ne i32 %call265, %conv266
  %conv268 = zext i1 %cmp267 to i16
  %121 = load i16* %l_679, align 2
  %call269 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv268, i16 zeroext %121)
  %tobool270 = icmp ne i16 %call269, 0
  br i1 %tobool270, label %lor.end273, label %lor.rhs271

lor.rhs271:                                       ; preds = %lor.end262
  %122 = load i32* %l_703, align 4
  %tobool272 = icmp ne i32 %122, 0
  br label %lor.end273

lor.end273:                                       ; preds = %lor.rhs271, %lor.end262
  %123 = phi i1 [ true, %lor.end262 ], [ %tobool272, %lor.rhs271 ]
  %conv274 = zext i1 %123 to i16
  %call275 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call236, i16 zeroext %conv274)
  %conv276 = zext i16 %call275 to i32
  %call277 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv230, i32 %conv276)
  %tobool278 = icmp ne i32 %call277, 0
  br label %lor.end279

lor.end279:                                       ; preds = %lor.end273, %for.end223
  %124 = phi i1 [ true, %for.end223 ], [ %tobool278, %lor.end273 ]
  %conv280 = zext i1 %124 to i16
  %call281 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %103, i16 signext %conv280)
  %125 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 0), align 4
  %conv282 = trunc i32 %125 to i16
  %call283 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %call281, i16 zeroext %conv282)
  %126 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 3, i64 3), align 4
  %call284 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %call283, i32 %126)
  %conv285 = zext i16 %call284 to i32
  %cmp286 = icmp ult i32 %conv285, 65535
  %conv287 = zext i1 %cmp286 to i32
  %127 = load i32* %l_704, align 4
  %cmp288 = icmp ne i32 %conv287, %127
  br i1 %cmp288, label %if.then289, label %if.else364

if.then289:                                       ; preds = %lor.end279
  %128 = bitcast [10 x i32]* %l_725 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %128, i8* bitcast ([10 x i32]* @_ZZL6func_1vE5l_725 to i8*), i64 40, i32 16, i1 false)
  %129 = load i32* @_ZL5g_398, align 4
  %130 = load i16* @_ZL4g_56, align 2
  %conv291 = sext i16 %130 to i32
  %131 = load i16* @_ZL4g_46, align 2
  %conv292 = sext i16 %131 to i32
  %or293 = or i32 %conv292, %conv291
  %conv294 = trunc i32 %or293 to i16
  store i16 %conv294, i16* @_ZL4g_46, align 2
  %conv295 = sext i16 %conv294 to i32
  %call296 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext -9110, i32 %conv295)
  %conv297 = sext i16 %call296 to i32
  %132 = load i32* @_ZL3g_2, align 4
  %or298 = or i32 %132, %conv297
  store i32 %or298, i32* @_ZL3g_2, align 4
  %cmp299 = icmp ugt i32 %129, %or298
  %conv300 = zext i1 %cmp299 to i16
  %133 = load i16* %l_662, align 2
  %tobool301 = icmp ne i16 %133, 0
  br i1 %tobool301, label %lor.end328, label %lor.rhs302

lor.rhs302:                                       ; preds = %if.then289
  %arrayidx303 = getelementptr inbounds [10 x i32]* %l_725, i32 0, i64 2
  %134 = load i32* %arrayidx303, align 4
  %conv304 = trunc i32 %134 to i16
  %135 = load i32* @_ZL4g_55, align 4
  %cmp305 = icmp sgt i32 %135, 0
  %conv306 = zext i1 %cmp305 to i32
  %cmp307 = icmp ne i32 1, %conv306
  %conv308 = zext i1 %cmp307 to i32
  %136 = load i16* @_ZL4g_60, align 2
  %conv309 = zext i16 %136 to i32
  %cmp310 = icmp sge i32 %conv308, %conv309
  %conv311 = zext i1 %cmp310 to i16
  %call312 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv311, i16 signext -16141)
  %conv313 = sext i16 %call312 to i32
  %arrayidx314 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx315 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx314, i32 0, i64 4
  %arrayidx316 = getelementptr inbounds [6 x i32]* %arrayidx315, i32 0, i64 5
  %137 = load i32* %arrayidx316, align 4
  %or317 = or i32 %137, %conv313
  store i32 %or317, i32* %arrayidx316, align 4
  %arrayidx318 = getelementptr inbounds [10 x i32]* %l_725, i32 0, i64 2
  %138 = load i32* %arrayidx318, align 4
  %cmp319 = icmp sge i32 %or317, %138
  %conv320 = zext i1 %cmp319 to i16
  %call321 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv304, i16 zeroext %conv320)
  %139 = load volatile i16* @_ZL5g_277, align 2
  %call322 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %call321, i16 zeroext %139)
  %conv323 = zext i16 %call322 to i32
  %140 = load i32* @_ZL5g_396, align 4
  %cmp324 = icmp ugt i32 %conv323, %140
  %conv325 = zext i1 %cmp324 to i16
  %call326 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv325)
  %tobool327 = icmp ne i16 %call326, 0
  br label %lor.end328

lor.end328:                                       ; preds = %lor.rhs302, %if.then289
  %141 = phi i1 [ true, %if.then289 ], [ %tobool327, %lor.rhs302 ]
  %conv329 = zext i1 %141 to i32
  %cmp330 = icmp sle i32 -3, %conv329
  %conv331 = zext i1 %cmp330 to i16
  %call332 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv331, i16 signext -6851)
  %conv333 = sext i16 %call332 to i32
  %142 = load i32* %l_730, align 4
  %or334 = or i32 %142, %conv333
  store i32 %or334, i32* %l_730, align 4
  %conv335 = trunc i32 %or334 to i16
  %call336 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv300, i16 zeroext %conv335)
  %143 = load i16* @_ZL5g_394, align 2
  %call337 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call336, i16 zeroext %143)
  %conv338 = zext i16 %call337 to i32
  %144 = load i32* @_ZL5g_615, align 4
  %xor339 = xor i32 %conv338, %144
  %145 = load i16* %l_679, align 2
  %conv340 = zext i16 %145 to i32
  %cmp341 = icmp ne i32 %xor339, %conv340
  %conv342 = zext i1 %cmp341 to i16
  %146 = load i32* %l_704, align 4
  %conv343 = trunc i32 %146 to i16
  %call344 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv342, i16 zeroext %conv343)
  %147 = load i32* @_ZL5g_615, align 4
  %conv345 = trunc i32 %147 to i16
  %call346 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call344, i16 zeroext %conv345)
  %conv347 = zext i16 %call346 to i32
  %148 = load i16* @_ZL5g_394, align 2
  %conv348 = zext i16 %148 to i32
  %or349 = or i32 %conv347, %conv348
  %149 = load i16* %l_679, align 2
  %conv350 = zext i16 %149 to i32
  %xor351 = xor i32 %or349, %conv350
  %150 = load i16* %l_688, align 2
  %conv352 = sext i16 %150 to i32
  %xor353 = xor i32 %xor351, %conv352
  %cmp354 = icmp ne i32 %xor353, 4
  %conv355 = zext i1 %cmp354 to i32
  %151 = load i32* @_ZL5g_622, align 4
  %xor356 = xor i32 %151, %conv355
  store i32 %xor356, i32* @_ZL5g_622, align 4
  %152 = load i32* @_ZL4g_36, align 4
  %and357 = and i32 %152, %xor356
  store i32 %and357, i32* @_ZL4g_36, align 4
  %tobool358 = icmp ne i32 %and357, 0
  %lnot359 = xor i1 %tobool358, true
  %conv360 = zext i1 %lnot359 to i16
  %call361 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv360, i16 signext 3318)
  %conv362 = sext i16 %call361 to i32
  store i32 %conv362, i32* @_ZL4g_55, align 4
  %153 = load i32* %l_660, align 4
  %154 = load i32* @_ZL4g_55, align 4
  %or363 = or i32 %154, %153
  store i32 %or363, i32* @_ZL4g_55, align 4
  br label %if.end996

if.else364:                                       ; preds = %lor.end279
  store i32 2, i32* %l_731, align 4
  store i32 1397668227, i32* %l_795, align 4
  store i32 -9, i32* %l_834, align 4
  store i16 0, i16* %l_872, align 2
  store i32 -1, i32* %l_874, align 4
  store i16 -1703, i16* %l_929, align 2
  store i32 -401688856, i32* %l_952, align 4
  %155 = load i32* @_ZL5g_489, align 4
  %156 = load i32* %l_731, align 4
  %157 = load i32* %l_731, align 4
  %conv365 = trunc i32 %157 to i16
  %call366 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv365)
  %conv367 = zext i16 %call366 to i32
  %158 = load i32* @_ZL5g_622, align 4
  %arrayidx368 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 0
  %arrayidx369 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx368, i32 0, i64 0
  %arrayidx370 = getelementptr inbounds [6 x i32]* %arrayidx369, i32 0, i64 4
  store i32 %158, i32* %arrayidx370, align 4
  %cmp371 = icmp sgt i32 %conv367, %158
  %conv372 = zext i1 %cmp371 to i16
  %159 = load i32* %l_703, align 4
  %conv373 = trunc i32 %159 to i16
  %call374 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv372, i16 zeroext %conv373)
  %conv375 = zext i16 %call374 to i32
  %call376 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext -29119, i32 %conv375)
  %conv377 = zext i16 %call376 to i32
  %or378 = or i32 %156, %conv377
  %cmp379 = icmp sgt i32 %155, %or378
  %conv380 = zext i1 %cmp379 to i32
  %160 = load i16* @_ZL4g_56, align 2
  %conv381 = sext i16 %160 to i32
  %cmp382 = icmp sle i32 %conv381, 3
  br i1 %cmp382, label %land.rhs383, label %land.end384

land.rhs383:                                      ; preds = %if.else364
  br label %land.end384

land.end384:                                      ; preds = %land.rhs383, %if.else364
  %161 = phi i1 [ false, %if.else364 ], [ true, %land.rhs383 ]
  %conv385 = zext i1 %161 to i16
  %162 = load i32* @_ZL4g_33, align 4
  %call386 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv385, i32 %162)
  %conv387 = sext i16 %call386 to i32
  %163 = load i32* %l_731, align 4
  %cmp388 = icmp sge i32 %conv387, %163
  %conv389 = zext i1 %cmp388 to i32
  %cmp390 = icmp eq i32 %conv389, 0
  %conv391 = zext i1 %cmp390 to i32
  %164 = load i32* %l_660, align 4
  %cmp392 = icmp sgt i32 %conv391, %164
  %conv393 = zext i1 %cmp392 to i16
  %165 = load i32* %l_676, align 4
  %conv394 = trunc i32 %165 to i16
  %call395 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv393, i16 zeroext %conv394)
  %166 = load i32* %l_660, align 4
  %conv396 = trunc i32 %166 to i16
  %call397 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call395, i16 zeroext %conv396)
  %tobool398 = icmp ne i16 %call397, 0
  br i1 %tobool398, label %land.rhs399, label %land.end401

land.rhs399:                                      ; preds = %land.end384
  %167 = load i32* %l_731, align 4
  %tobool400 = icmp ne i32 %167, 0
  br label %land.end401

land.end401:                                      ; preds = %land.rhs399, %land.end384
  %168 = phi i1 [ false, %land.end384 ], [ %tobool400, %land.rhs399 ]
  %conv402 = zext i1 %168 to i32
  %169 = load i16* %l_679, align 2
  %conv403 = zext i16 %169 to i32
  %cmp404 = icmp eq i32 %conv402, %conv403
  %conv405 = zext i1 %cmp404 to i32
  %170 = load i32* @_ZL4g_33, align 4
  %call406 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv405, i32 %170)
  %171 = load i16* @_ZL4g_60, align 2
  %conv407 = zext i16 %171 to i32
  %cmp408 = icmp ule i32 %call406, %conv407
  %conv409 = zext i1 %cmp408 to i32
  %xor410 = xor i32 4, %conv409
  %172 = load i32* @_ZL4g_55, align 4
  %and411 = and i32 %xor410, %172
  %and412 = and i32 %conv380, %and411
  %tobool413 = icmp ne i32 %and412, 0
  br i1 %tobool413, label %land.rhs414, label %land.end416

land.rhs414:                                      ; preds = %land.end401
  %173 = load i32* %l_659, align 4
  %tobool415 = icmp ne i32 %173, 0
  br label %land.end416

land.end416:                                      ; preds = %land.rhs414, %land.end401
  %174 = phi i1 [ false, %land.end401 ], [ %tobool415, %land.rhs414 ]
  %conv417 = zext i1 %174 to i32
  %175 = load i32* @_ZL5g_622, align 4
  %cmp418 = icmp ule i32 %conv417, %175
  %conv419 = zext i1 %cmp418 to i32
  %176 = load i32* %l_660, align 4
  %or420 = or i32 %conv419, %176
  %tobool421 = icmp ne i32 %or420, 0
  br i1 %tobool421, label %if.then423, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end416
  %177 = load i32* @_ZL5g_396, align 4
  %tobool422 = icmp ne i32 %177, 0
  br i1 %tobool422, label %if.then423, label %if.else721

if.then423:                                       ; preds = %lor.lhs.false, %land.end416
  store i32 6, i32* %l_763, align 4
  store i32 -941862878, i32* %l_862, align 4
  %178 = bitcast [4 x [5 x [9 x i32]]]* %l_875 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %178, i8* bitcast ([4 x [5 x [9 x i32]]]* @_ZZL6func_1vE5l_875 to i8*), i64 720, i32 16, i1 false)
  store i32 0, i32* %i424, align 4
  br label %for.cond427

for.cond427:                                      ; preds = %for.inc432, %if.then423
  %179 = load i32* %i424, align 4
  %cmp428 = icmp slt i32 %179, 6
  br i1 %cmp428, label %for.body429, label %for.end434

for.body429:                                      ; preds = %for.cond427
  %180 = load i32* %i424, align 4
  %idxprom430 = sext i32 %180 to i64
  %arrayidx431 = getelementptr inbounds [6 x i32]* %l_759, i32 0, i64 %idxprom430
  store i32 424479008, i32* %arrayidx431, align 4
  br label %for.inc432

for.inc432:                                       ; preds = %for.body429
  %181 = load i32* %i424, align 4
  %inc433 = add nsw i32 %181, 1
  store i32 %inc433, i32* %i424, align 4
  br label %for.cond427

for.end434:                                       ; preds = %for.cond427
  %182 = load i16* %l_662, align 2
  %conv435 = sext i16 %182 to i32
  %or436 = or i32 %conv435, 5543
  %conv437 = trunc i32 %or436 to i16
  %183 = load i32* %l_703, align 4
  %conv438 = trunc i32 %183 to i16
  %call439 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv437, i16 zeroext %conv438)
  %conv440 = zext i16 %call439 to i32
  %184 = load i16* %l_662, align 2
  %conv441 = sext i16 %184 to i32
  %185 = load i16* @_ZL4g_60, align 2
  %conv442 = zext i16 %185 to i32
  %call443 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv441, i32 %conv442)
  %186 = load i32* %l_730, align 4
  %cmp444 = icmp slt i32 %call443, %186
  %conv445 = zext i1 %cmp444 to i32
  %neg = xor i32 %conv445, -1
  %call446 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv440, i32 %neg)
  %arrayidx447 = getelementptr inbounds [6 x i32]* %l_759, i32 0, i64 4
  %187 = load i32* %arrayidx447, align 4
  %188 = load i32* @_ZL4g_33, align 4
  %189 = load volatile i16* @_ZL5g_277, align 2
  %conv448 = zext i16 %189 to i32
  %190 = load i32* @_ZL5g_396, align 4
  %call449 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv448, i32 %190)
  %191 = load i32* %l_731, align 4
  %cmp450 = icmp sle i32 %call449, %191
  %conv451 = zext i1 %cmp450 to i32
  %or452 = or i32 %188, %conv451
  %192 = load i32* @_ZL5g_166, align 4
  %or453 = or i32 %or452, %192
  %and454 = and i32 %187, %or453
  %193 = load i32* @_ZL4g_55, align 4
  %cmp455 = icmp ult i32 %and454, %193
  %conv456 = zext i1 %cmp455 to i16
  %call457 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv456)
  %tobool458 = icmp ne i16 %call457, 0
  br i1 %tobool458, label %land.rhs459, label %land.end461

land.rhs459:                                      ; preds = %for.end434
  %194 = load i32* @_ZL5g_168, align 4
  %tobool460 = icmp ne i32 %194, 0
  br label %land.end461

land.end461:                                      ; preds = %land.rhs459, %for.end434
  %195 = phi i1 [ false, %for.end434 ], [ %tobool460, %land.rhs459 ]
  %conv462 = zext i1 %195 to i32
  %call463 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %call446, i32 %conv462)
  %tobool464 = icmp ne i32 %call463, 0
  br i1 %tobool464, label %if.then467, label %lor.lhs.false465

lor.lhs.false465:                                 ; preds = %land.end461
  %196 = load i32* @_ZL4g_48, align 4
  %tobool466 = icmp ne i32 %196, 0
  br i1 %tobool466, label %if.then467, label %if.else469

if.then467:                                       ; preds = %lor.lhs.false465, %land.end461
  %197 = load i32* @_ZL3g_2, align 4
  %and468 = and i32 %197, 0
  store i32 %and468, i32* @_ZL3g_2, align 4
  br label %if.end

if.else469:                                       ; preds = %lor.lhs.false465
  store i32 1, i32* %l_762, align 4
  %198 = load i32* %l_762, align 4
  store i32 %198, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then467
  %199 = load i32* %l_763, align 4
  %tobool470 = icmp ne i32 %199, 0
  br i1 %tobool470, label %if.then471, label %if.else529

if.then471:                                       ; preds = %if.end
  %200 = load i32* @_ZL5g_168, align 4
  %conv472 = trunc i32 %200 to i16
  %call473 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext -9)
  %conv474 = sext i16 %call473 to i32
  %201 = load volatile i32* @_ZL5g_778, align 4
  %conv475 = trunc i32 %201 to i16
  %call476 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv475)
  %conv477 = zext i16 %call476 to i32
  %and478 = and i32 %conv474, %conv477
  %conv479 = trunc i32 %and478 to i16
  %call480 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv472, i16 signext %conv479)
  %call481 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext -4, i32 14)
  %call482 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %call481, i32 15)
  %call483 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call480, i16 zeroext %call482)
  %202 = load i32* @_ZL5g_615, align 4
  %203 = load i16* @_ZL4g_56, align 2
  %conv484 = sext i16 %203 to i32
  %204 = load i16* %l_688, align 2
  %conv485 = sext i16 %204 to i32
  %cmp486 = icmp slt i32 %conv484, %conv485
  %conv487 = zext i1 %cmp486 to i32
  %205 = load i32* %l_703, align 4
  %conv488 = trunc i32 %205 to i16
  %206 = load i32* %l_660, align 4
  %conv489 = trunc i32 %206 to i16
  %call490 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv488, i16 zeroext %conv489)
  %conv491 = zext i16 %call490 to i32
  %207 = load i16* @_ZL4g_60, align 2
  %conv492 = zext i16 %207 to i32
  %call493 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv491, i32 %conv492)
  %208 = load i16* @_ZL4g_56, align 2
  %conv494 = sext i16 %208 to i32
  %cmp495 = icmp ne i32 %call493, %conv494
  br i1 %cmp495, label %lor.end498, label %lor.rhs496

lor.rhs496:                                       ; preds = %if.then471
  %209 = load i32* %l_795, align 4
  %tobool497 = icmp ne i32 %209, 0
  br label %lor.end498

lor.end498:                                       ; preds = %lor.rhs496, %if.then471
  %210 = phi i1 [ true, %if.then471 ], [ %tobool497, %lor.rhs496 ]
  %conv499 = zext i1 %210 to i32
  %211 = load i32* %l_660, align 4
  %xor500 = xor i32 %conv499, %211
  %call501 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv487, i32 %xor500)
  store i32 %call501, i32* %l_703, align 4
  %cmp502 = icmp sgt i32 %202, %call501
  br i1 %cmp502, label %lor.end505, label %lor.rhs503

lor.rhs503:                                       ; preds = %lor.end498
  %212 = load i32* @_ZL4g_55, align 4
  %tobool504 = icmp ne i32 %212, 0
  br label %lor.end505

lor.end505:                                       ; preds = %lor.rhs503, %lor.end498
  %213 = phi i1 [ true, %lor.end498 ], [ %tobool504, %lor.rhs503 ]
  %conv506 = zext i1 %213 to i16
  %214 = load i32* %l_730, align 4
  %conv507 = trunc i32 %214 to i16
  %call508 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv506, i16 zeroext %conv507)
  %conv509 = zext i16 %call508 to i32
  %215 = load i32* @_ZL4g_48, align 4
  %call510 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv509, i32 %215)
  %or511 = or i32 40437, %call510
  %conv512 = trunc i32 %or511 to i16
  %216 = load i32* @_ZL5g_166, align 4
  %conv513 = trunc i32 %216 to i16
  %call514 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv512, i16 zeroext %conv513)
  %call515 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call483, i16 zeroext %call514)
  %217 = load i32* @_ZL4g_33, align 4
  %conv516 = trunc i32 %217 to i16
  %call517 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %call515, i16 signext %conv516)
  %conv518 = sext i16 %call517 to i32
  %218 = load i32* @_ZL4g_33, align 4
  %call519 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv518, i32 %218)
  %tobool520 = icmp ne i32 %call519, 0
  br i1 %tobool520, label %land.rhs521, label %land.end523

land.rhs521:                                      ; preds = %lor.end505
  %219 = load i32* %l_703, align 4
  %tobool522 = icmp ne i32 %219, 0
  br label %land.end523

land.end523:                                      ; preds = %land.rhs521, %lor.end505
  %220 = phi i1 [ false, %lor.end505 ], [ %tobool522, %land.rhs521 ]
  %conv524 = zext i1 %220 to i32
  %221 = load i32* @_ZL5g_796, align 4
  %call525 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv524, i32 %221)
  %222 = load i16* @_ZL5g_394, align 2
  %conv526 = zext i16 %222 to i32
  %or527 = or i32 %call525, %conv526
  %223 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 2), align 4
  %xor528 = xor i32 %223, %or527
  store i32 %xor528, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 2), align 4
  br label %if.end603

if.else529:                                       ; preds = %if.end
  %224 = load i32* @_ZL5g_166, align 4
  %conv530 = trunc i32 %224 to i16
  %225 = load i32* %l_763, align 4
  %226 = load i32* %l_730, align 4
  %or531 = or i32 %226, 2371
  store i32 %or531, i32* %l_730, align 4
  %227 = load i16* @_ZL4g_46, align 2
  %conv532 = sext i16 %227 to i32
  %or533 = or i32 %or531, %conv532
  %228 = load i32* %l_820, align 4
  %conv534 = trunc i32 %228 to i16
  %call535 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv534, i32 5)
  %tobool536 = icmp ne i16 %call535, 0
  br i1 %tobool536, label %land.rhs537, label %land.end557

land.rhs537:                                      ; preds = %if.else529
  %229 = load i32* @_ZL4g_36, align 4
  %230 = load i16* %l_688, align 2
  %conv538 = sext i16 %230 to i32
  %cmp539 = icmp eq i32 %229, %conv538
  %conv540 = zext i1 %cmp539 to i32
  %neg541 = xor i32 %conv540, -1
  %231 = load i32* @_ZL5g_398, align 4
  %or542 = or i32 %neg541, %231
  %232 = load i16* @_ZL4g_60, align 2
  %conv543 = zext i16 %232 to i32
  %call544 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %or542, i32 %conv543)
  %cmp545 = icmp uge i32 65535, %call544
  %conv546 = zext i1 %cmp545 to i32
  %cmp547 = icmp sle i32 %conv546, 51361
  %conv548 = zext i1 %cmp547 to i32
  %xor549 = xor i32 %conv548, 65077
  %233 = load i16* %l_688, align 2
  %conv550 = sext i16 %233 to i32
  %cmp551 = icmp ne i32 %xor549, %conv550
  %conv552 = zext i1 %cmp551 to i32
  %cmp553 = icmp slt i32 %conv552, -1
  %conv554 = zext i1 %cmp553 to i32
  %call555 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv554, i32 -9)
  %tobool556 = icmp ne i32 %call555, 0
  br label %land.end557

land.end557:                                      ; preds = %land.rhs537, %if.else529
  %234 = phi i1 [ false, %if.else529 ], [ %tobool556, %land.rhs537 ]
  %conv558 = zext i1 %234 to i32
  %neg559 = xor i32 %conv558, -1
  %call560 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %neg559, i32 1)
  %tobool561 = icmp ne i32 %call560, 0
  br i1 %tobool561, label %land.rhs564, label %lor.lhs.false562

lor.lhs.false562:                                 ; preds = %land.end557
  %235 = load i32* %l_820, align 4
  %tobool563 = icmp ne i32 %235, 0
  br i1 %tobool563, label %land.rhs564, label %land.end566

land.rhs564:                                      ; preds = %lor.lhs.false562, %land.end557
  %236 = load i32* @_ZL4g_55, align 4
  %tobool565 = icmp ne i32 %236, 0
  br label %land.end566

land.end566:                                      ; preds = %land.rhs564, %lor.lhs.false562
  %237 = phi i1 [ false, %lor.lhs.false562 ], [ %tobool565, %land.rhs564 ]
  %conv567 = zext i1 %237 to i32
  %238 = load i16* %l_688, align 2
  %conv568 = sext i16 %238 to i32
  %cmp569 = icmp slt i32 %conv567, %conv568
  %conv570 = zext i1 %cmp569 to i16
  %239 = load i32* %l_763, align 4
  %conv571 = trunc i32 %239 to i16
  %call572 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv570, i16 signext %conv571)
  %conv573 = sext i16 %call572 to i32
  %cmp574 = icmp eq i32 %or533, %conv573
  %conv575 = zext i1 %cmp574 to i32
  %240 = load volatile i32* @_ZL5g_778, align 4
  %cmp576 = icmp sgt i32 %conv575, %240
  %conv577 = zext i1 %cmp576 to i32
  %call578 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %225, i32 %conv577)
  %conv579 = trunc i32 %call578 to i16
  %241 = load i16* @_ZL4g_56, align 2
  %conv580 = sext i16 %241 to i32
  %call581 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv579, i32 %conv580)
  %tobool582 = icmp ne i16 %call581, 0
  br i1 %tobool582, label %land.rhs583, label %land.end585

land.rhs583:                                      ; preds = %land.end566
  %242 = load i32* @_ZL5g_622, align 4
  %tobool584 = icmp ne i32 %242, 0
  br label %land.end585

land.end585:                                      ; preds = %land.rhs583, %land.end566
  %243 = phi i1 [ false, %land.end566 ], [ %tobool584, %land.rhs583 ]
  %conv586 = zext i1 %243 to i32
  %call587 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 0, i32 %conv586)
  %and588 = and i32 %call587, 5
  %244 = load i32* @_ZL5g_622, align 4
  %cmp589 = icmp eq i32 %and588, %244
  %conv590 = zext i1 %cmp589 to i16
  %245 = load i32* %l_826, align 4
  %conv591 = trunc i32 %245 to i16
  %call592 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv590, i16 zeroext %conv591)
  %246 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 0), align 4
  %conv593 = trunc i32 %246 to i16
  %call594 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %call592, i16 signext %conv593)
  %call595 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %call594, i32 6)
  %247 = load i32* @_ZL5g_615, align 4
  %conv596 = trunc i32 %247 to i16
  %call597 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call595, i16 signext %conv596)
  %call598 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv530, i16 zeroext %call597)
  %conv599 = zext i16 %call598 to i32
  %cmp600 = icmp slt i32 0, %conv599
  %conv601 = zext i1 %cmp600 to i32
  %248 = load i32* @_ZL4g_48, align 4
  %xor602 = xor i32 %248, %conv601
  store i32 %xor602, i32* @_ZL4g_48, align 4
  %249 = load i32* @_ZL5g_615, align 4
  store i32 %249, i32* %retval
  br label %return

if.end603:                                        ; preds = %land.end523
  store i32 4, i32* @_ZL3g_2, align 4
  br label %for.cond604

for.cond604:                                      ; preds = %for.inc618, %if.end603
  %250 = load i32* @_ZL3g_2, align 4
  %cmp605 = icmp sge i32 %250, 0
  br i1 %cmp605, label %for.body606, label %for.end619

for.body606:                                      ; preds = %for.cond604
  %251 = load i16* @_ZL4g_56, align 2
  %tobool609 = icmp ne i16 %251, 0
  br i1 %tobool609, label %if.then610, label %if.end611

if.then610:                                       ; preds = %for.body606
  br label %for.end619

if.end611:                                        ; preds = %for.body606
  %252 = load i32* @_ZL4g_33, align 4
  %253 = load i32* %l_676, align 4
  %add = add nsw i32 %253, 3
  %idxprom612 = sext i32 %add to i64
  %254 = load i32* %l_676, align 4
  %add613 = add nsw i32 %254, 4
  %idxprom614 = sext i32 %add613 to i64
  %arrayidx615 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom614
  %arrayidx616 = getelementptr inbounds [5 x i32]* %arrayidx615, i32 0, i64 %idxprom612
  store i32 %252, i32* %arrayidx616, align 4
  %255 = load i16* @_ZL4g_56, align 2
  %conv617 = sext i16 %255 to i32
  store i32 %conv617, i32* %retval
  br label %return

for.inc618:                                       ; No predecessors!
  %256 = load i32* @_ZL3g_2, align 4
  %sub = sub nsw i32 %256, 1
  store i32 %sub, i32* @_ZL3g_2, align 4
  br label %for.cond604

for.end619:                                       ; preds = %if.then610, %for.cond604
  %257 = load i16* @_ZL5g_394, align 2
  %inc620 = add i16 %257, 1
  store i16 %inc620, i16* @_ZL5g_394, align 2
  %conv621 = zext i16 %257 to i32
  %258 = load i32* @_ZL5g_166, align 4
  %conv622 = trunc i32 %258 to i16
  %259 = load i32* @_ZL5g_166, align 4
  %call623 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv622, i32 %259)
  %260 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 4), align 4
  %261 = load i16* %l_662, align 2
  %conv624 = sext i16 %261 to i32
  %262 = load i32* %l_730, align 4
  %and625 = and i32 %conv624, %262
  %263 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 3, i64 0, i64 1), align 4
  %264 = load i16* @_ZL4g_46, align 2
  %conv626 = sext i16 %264 to i32
  %265 = load i32* @_ZL5g_622, align 4
  %call627 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext 0, i32 %265)
  %conv628 = sext i16 %call627 to i32
  %cmp629 = icmp sge i32 %conv626, %conv628
  %conv630 = zext i1 %cmp629 to i32
  store i32 %conv630, i32* %l_703, align 4
  %call631 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv630, i32 -973382652)
  %cmp632 = icmp ne i32 %call631, 37228
  %lnot633 = xor i1 %cmp632, true
  %conv634 = zext i1 %lnot633 to i32
  %cmp635 = icmp sgt i32 %263, %conv634
  %conv636 = zext i1 %cmp635 to i32
  %266 = load i32* %l_730, align 4
  %cmp637 = icmp sle i32 %conv636, %266
  %conv638 = zext i1 %cmp637 to i32
  %267 = load i16* @_ZL4g_56, align 2
  %conv639 = sext i16 %267 to i32
  %call640 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv638, i32 %conv639)
  %conv641 = trunc i32 %call640 to i16
  %arrayidx642 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  store i16 %conv641, i16* %arrayidx642, align 2
  %conv643 = sext i16 %conv641 to i32
  %call644 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %and625, i32 %conv643)
  %call645 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %260, i32 %call644)
  %268 = load i32* %l_834, align 4
  %call646 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %call645, i32 %268)
  %tobool647 = icmp ne i32 %call646, 0
  br i1 %tobool647, label %lor.end650, label %lor.rhs648

lor.rhs648:                                       ; preds = %for.end619
  %269 = load i32* %l_826, align 4
  %tobool649 = icmp ne i32 %269, 0
  br label %lor.end650

lor.end650:                                       ; preds = %lor.rhs648, %for.end619
  %270 = phi i1 [ true, %for.end619 ], [ %tobool649, %lor.rhs648 ]
  %conv651 = zext i1 %270 to i32
  %cmp652 = icmp ult i32 %conv651, 1
  %conv653 = zext i1 %cmp652 to i32
  %271 = load i32* @_ZL5g_859, align 4
  %or654 = or i32 %conv653, %271
  %272 = load i32* %l_763, align 4
  %cmp655 = icmp ne i32 %or654, %272
  %conv656 = zext i1 %cmp655 to i16
  store i16 %conv656, i16* @_ZL4g_46, align 2
  %conv657 = sext i16 %conv656 to i32
  %273 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %and658 = and i32 %273, %conv657
  store i32 %and658, i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %xor659 = xor i32 %and658, 20806
  %conv660 = trunc i32 %xor659 to i16
  %274 = load i16* @_ZL4g_60, align 2
  %conv661 = zext i16 %274 to i32
  %call662 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv660, i32 %conv661)
  %call663 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call623, i16 zeroext %call662)
  %conv664 = zext i16 %call663 to i32
  %cmp665 = icmp uge i32 %conv664, -779406906
  %conv666 = zext i1 %cmp665 to i32
  %cmp667 = icmp ugt i32 %conv666, 5
  %conv668 = zext i1 %cmp667 to i16
  %call669 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv668, i16 zeroext -9)
  %conv670 = zext i16 %call669 to i32
  %275 = load i32* @_ZL4g_48, align 4
  %cmp671 = icmp eq i32 %conv670, %275
  %conv672 = zext i1 %cmp671 to i32
  %cmp673 = icmp slt i32 %conv621, %conv672
  %conv674 = zext i1 %cmp673 to i32
  %276 = load i32* @_ZL5g_168, align 4
  %cmp675 = icmp ult i32 %conv674, %276
  %conv676 = zext i1 %cmp675 to i32
  %call677 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv676, i32 9)
  store i32 %call677, i32* %l_861, align 4
  %277 = load i32* %l_862, align 4
  %xor678 = xor i32 %call677, %277
  %conv679 = trunc i32 %xor678 to i16
  store i16 %conv679, i16* @_ZL4g_60, align 2
  %conv680 = zext i16 %conv679 to i32
  %278 = load i32* @_ZL5g_615, align 4
  %cmp681 = icmp sle i32 %conv680, %278
  %conv682 = zext i1 %cmp681 to i32
  %call683 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv682, i32 -1)
  %tobool684 = icmp ne i32 %call683, 0
  %conv685 = zext i1 %tobool684 to i16
  %call686 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv685, i16 signext 11604)
  %conv687 = sext i16 %call686 to i32
  %tobool688 = icmp ne i32 %conv687, 0
  br i1 %tobool688, label %if.then689, label %if.else690

if.then689:                                       ; preds = %lor.end650
  %279 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 3), align 4
  store i32 %279, i32* %retval
  br label %return

if.else690:                                       ; preds = %lor.end650
  %280 = load i32* @_ZL5g_168, align 4
  %tobool691 = icmp ne i32 %280, 0
  br i1 %tobool691, label %lor.end707, label %lor.rhs692

lor.rhs692:                                       ; preds = %if.else690
  %281 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %conv693 = trunc i32 %281 to i16
  %282 = load i32* @_ZL5g_622, align 4
  %conv694 = trunc i32 %282 to i16
  %arrayidx695 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx696 = getelementptr inbounds [3 x i32]* %arrayidx695, i32 0, i64 2
  %283 = load i32* %arrayidx696, align 4
  %284 = load i32* @_ZL5g_166, align 4
  store i32 %284, i32* @_ZL4g_48, align 4
  %call697 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %283, i32 %284)
  %call698 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv694, i32 %call697)
  %call699 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %call698, i32 13)
  %conv700 = zext i16 %call699 to i32
  %call701 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv693, i32 %conv700)
  %conv702 = zext i16 %call701 to i32
  %285 = load i16* %l_872, align 2
  %conv703 = sext i16 %285 to i32
  %xor704 = xor i32 %conv703, %conv702
  %conv705 = trunc i32 %xor704 to i16
  store i16 %conv705, i16* %l_872, align 2
  %tobool706 = icmp ne i16 %conv705, 0
  br label %lor.end707

lor.end707:                                       ; preds = %lor.rhs692, %if.else690
  %286 = phi i1 [ true, %if.else690 ], [ %tobool706, %lor.rhs692 ]
  %conv708 = zext i1 %286 to i32
  %287 = load i32* @_ZL3g_2, align 4
  %or709 = or i32 %conv708, %287
  store i32 %or709, i32* @_ZL3g_2, align 4
  %288 = load i32* @_ZL5g_859, align 4
  %tobool710 = icmp ne i32 %288, 0
  br i1 %tobool710, label %if.then711, label %if.end712

if.then711:                                       ; preds = %lor.end707
  br label %lbl_873

if.end712:                                        ; preds = %lor.end707
  %arrayidx713 = getelementptr inbounds [4 x [5 x [9 x i32]]]* %l_875, i32 0, i64 3
  %arrayidx714 = getelementptr inbounds [5 x [9 x i32]]* %arrayidx713, i32 0, i64 0
  %arrayidx715 = getelementptr inbounds [9 x i32]* %arrayidx714, i32 0, i64 1
  %289 = load i32* %arrayidx715, align 4
  %inc716 = add i32 %289, 1
  store i32 %inc716, i32* %arrayidx715, align 4
  %290 = load i32* %l_703, align 4
  %tobool717 = icmp ne i32 %290, 0
  br i1 %tobool717, label %if.then718, label %if.end719

if.then718:                                       ; preds = %if.end712
  br label %for.end1654

if.end719:                                        ; preds = %if.end712
  br label %if.end720

if.end720:                                        ; preds = %if.end719
  br label %if.end723

if.else721:                                       ; preds = %lor.lhs.false
  %291 = load i16* %l_872, align 2
  %conv722 = sext i16 %291 to i32
  store i32 %conv722, i32* %retval
  br label %return

if.end723:                                        ; preds = %if.end720
  %292 = load i32* @_ZL5g_615, align 4
  %293 = load i32* @_ZL5g_166, align 4
  %conv724 = trunc i32 %293 to i16
  %294 = load volatile i16* @_ZL5g_277, align 2
  %arrayidx725 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 0
  %arrayidx726 = getelementptr inbounds [3 x i32]* %arrayidx725, i32 0, i64 2
  %295 = load i32* %arrayidx726, align 4
  %296 = load i32* %l_834, align 4
  %297 = load i16* @_ZL4g_56, align 2
  %conv727 = sext i16 %297 to i32
  %and728 = and i32 %conv727, %296
  %conv729 = trunc i32 %and728 to i16
  store i16 %conv729, i16* @_ZL4g_56, align 2
  %call730 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv729, i32 6)
  %conv731 = sext i16 %call730 to i32
  %or732 = or i32 %295, %conv731
  %298 = load i32* %l_703, align 4
  %tobool733 = icmp ne i32 %298, 0
  %lnot734 = xor i1 %tobool733, true
  %conv735 = zext i1 %lnot734 to i32
  %299 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 0), align 4
  %call736 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv735, i32 %299)
  %300 = load i32* %l_730, align 4
  %cmp737 = icmp sle i32 %call736, %300
  %conv738 = zext i1 %cmp737 to i16
  %call739 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv738)
  %301 = load i32* %l_703, align 4
  %call740 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %call739, i32 %301)
  %conv741 = sext i16 %call740 to i32
  %cmp742 = icmp ule i32 %or732, %conv741
  %conv743 = zext i1 %cmp742 to i16
  %302 = load i16* @_ZL5g_394, align 2
  %call744 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv743, i16 signext %302)
  %conv745 = sext i16 %call744 to i32
  %303 = load i32* %l_795, align 4
  %cmp746 = icmp ugt i32 %conv745, %303
  %conv747 = zext i1 %cmp746 to i16
  %call748 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv747, i16 zeroext 15099)
  %call749 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %294, i16 signext %call748)
  %conv750 = sext i16 %call749 to i32
  store i32 %conv750, i32* %l_861, align 4
  %call751 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv750, i32 -1)
  %conv752 = trunc i32 %call751 to i16
  %call753 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv752, i16 signext -28245)
  %call754 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -1, i16 zeroext %call753)
  %conv755 = zext i16 %call754 to i32
  %and756 = and i32 %conv755, 862367504
  %304 = load i32* @_ZL4g_36, align 4
  %cmp757 = icmp ule i32 %and756, %304
  br i1 %cmp757, label %lor.end760, label %lor.rhs758

lor.rhs758:                                       ; preds = %if.end723
  %305 = load i32* @_ZL5g_489, align 4
  %tobool759 = icmp ne i32 %305, 0
  br label %lor.end760

lor.end760:                                       ; preds = %lor.rhs758, %if.end723
  %306 = phi i1 [ true, %if.end723 ], [ %tobool759, %lor.rhs758 ]
  %conv761 = zext i1 %306 to i16
  %call762 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv724, i16 signext %conv761)
  %conv763 = sext i16 %call762 to i32
  %arrayidx764 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %307 = load i16* %arrayidx764, align 2
  %conv765 = zext i16 %307 to i32
  %call766 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv763, i32 %conv765)
  %cmp767 = icmp eq i32 %call766, 1231290328
  %conv768 = zext i1 %cmp767 to i32
  %308 = load i32* @_ZL5g_796, align 4
  %cmp769 = icmp ult i32 %conv768, %308
  %conv770 = zext i1 %cmp769 to i16
  %call771 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv770, i32 13)
  %conv772 = zext i16 %call771 to i32
  %arrayidx773 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx774 = getelementptr inbounds [3 x i32]* %arrayidx773, i32 0, i64 2
  %309 = load i32* %arrayidx774, align 4
  %cmp775 = icmp eq i32 %conv772, %309
  %conv776 = zext i1 %cmp775 to i32
  %cmp777 = icmp eq i32 %292, %conv776
  %conv778 = zext i1 %cmp777 to i32
  store i32 %conv778, i32* @_ZL5g_859, align 4
  %310 = load i16* @_ZL4g_46, align 2
  %311 = load i32* %l_826, align 4
  %conv779 = trunc i32 %311 to i16
  %312 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 3, i64 2), align 4
  %313 = load i16* %l_872, align 2
  %call780 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %313, i16 zeroext 24449)
  %conv781 = zext i16 %call780 to i32
  %cmp782 = icmp eq i32 %312, %conv781
  %conv783 = zext i1 %cmp782 to i32
  %call784 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv779, i32 %conv783)
  %conv785 = zext i16 %call784 to i32
  %314 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 1, i64 0, i64 1), align 4
  %tobool786 = icmp ne i32 %314, 0
  %lnot787 = xor i1 %tobool786, true
  %conv788 = zext i1 %lnot787 to i32
  %call789 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv785, i32 %conv788)
  %315 = load i32* @_ZL5g_622, align 4
  %cmp790 = icmp ne i32 %call789, %315
  %conv791 = zext i1 %cmp790 to i16
  %316 = load i16* @_ZL4g_60, align 2
  %conv792 = zext i16 %316 to i32
  %317 = load i32* %l_795, align 4
  %arrayidx793 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %318 = load i16* %arrayidx793, align 2
  %conv794 = zext i16 %318 to i32
  %cmp795 = icmp ne i32 %317, %conv794
  %conv796 = zext i1 %cmp795 to i32
  %arrayidx797 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 3
  %arrayidx798 = getelementptr inbounds [3 x i32]* %arrayidx797, i32 0, i64 1
  %319 = load i32* %arrayidx798, align 4
  %cmp799 = icmp eq i32 %conv796, %319
  %conv800 = zext i1 %cmp799 to i16
  %320 = load i32* @_ZL3g_2, align 4
  %call801 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv800, i32 %320)
  %conv802 = sext i16 %call801 to i32
  %cmp803 = icmp ne i32 %conv792, %conv802
  %conv804 = zext i1 %cmp803 to i16
  %call805 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv791, i16 signext %conv804)
  %call806 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %310, i16 zeroext %call805)
  store i16 %call806, i16* @_ZL4g_56, align 2
  %conv807 = sext i16 %call806 to i32
  %321 = load i32* @_ZL5g_859, align 4
  %cmp808 = icmp sgt i32 %conv807, %321
  %conv809 = zext i1 %cmp808 to i32
  %call810 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv809, i32 187216037)
  %322 = load i32* @_ZL5g_489, align 4
  %cmp811 = icmp ne i32 %call810, %322
  %conv812 = zext i1 %cmp811 to i32
  %323 = load i32* @_ZL5g_489, align 4
  %call813 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv812, i32 %323)
  %conv814 = trunc i32 %call813 to i16
  %324 = load i32* @_ZL4g_33, align 4
  %call815 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv814, i32 %324)
  %tobool816 = icmp ne i16 %call815, 0
  br i1 %tobool816, label %if.then817, label %if.else824

if.then817:                                       ; preds = %lor.end760
  %arrayidx818 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 4
  %arrayidx819 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx818, i32 0, i64 2
  %arrayidx820 = getelementptr inbounds [6 x i32]* %arrayidx819, i32 0, i64 1
  %325 = load i32* %arrayidx820, align 4
  %tobool821 = icmp ne i32 %325, 0
  br i1 %tobool821, label %if.then822, label %if.end823

if.then822:                                       ; preds = %if.then817
  br label %for.end1654

if.end823:                                        ; preds = %if.then817
  br label %if.end995

if.else824:                                       ; preds = %lor.end760
  store i32 7, i32* %l_925, align 4
  store i32 -2, i32* %l_928, align 4
  store i32 0, i32* %i825, align 4
  br label %for.cond826

for.cond826:                                      ; preds = %for.inc831, %if.else824
  %326 = load i32* %i825, align 4
  %cmp827 = icmp slt i32 %326, 3
  br i1 %cmp827, label %for.body828, label %for.end833

for.body828:                                      ; preds = %for.cond826
  %327 = load i32* %i825, align 4
  %idxprom829 = sext i32 %327 to i64
  %arrayidx830 = getelementptr inbounds [3 x i32]* %l_935, i32 0, i64 %idxprom829
  store i32 1, i32* %arrayidx830, align 4
  br label %for.inc831

for.inc831:                                       ; preds = %for.body828
  %328 = load i32* %i825, align 4
  %inc832 = add nsw i32 %328, 1
  store i32 %inc832, i32* %i825, align 4
  br label %for.cond826

for.end833:                                       ; preds = %for.cond826
  store i16 1, i16* @_ZL4g_60, align 2
  br label %for.cond834

for.cond834:                                      ; preds = %for.inc912, %for.end833
  %329 = load i16* @_ZL4g_60, align 2
  %conv835 = zext i16 %329 to i32
  %cmp836 = icmp sle i32 %conv835, 4
  br i1 %cmp836, label %for.body837, label %for.end916

for.body837:                                      ; preds = %for.cond834
  %330 = bitcast [2 x [10 x [7 x i32]]]* %l_924 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %330, i8* bitcast ([2 x [10 x [7 x i32]]]* @_ZZL6func_1vE5l_924 to i8*), i64 560, i32 16, i1 false)
  %331 = load i32* %l_925, align 4
  %dec841 = add i32 %331, -1
  store i32 %dec841, i32* %l_925, align 4
  %332 = load i32* @_ZL5g_930, align 4
  %inc842 = add i32 %332, 1
  store i32 %inc842, i32* @_ZL5g_930, align 4
  %333 = load i32* %l_826, align 4
  %arrayidx843 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx844 = getelementptr inbounds [3 x i32]* %arrayidx843, i32 0, i64 2
  %334 = load i32* %arrayidx844, align 4
  %cmp845 = icmp uge i32 %334, -9
  %conv846 = zext i1 %cmp845 to i32
  %or847 = or i32 %333, %conv846
  %tobool848 = icmp ne i32 %or847, 0
  br i1 %tobool848, label %lor.end901, label %lor.rhs849

lor.rhs849:                                       ; preds = %for.body837
  %arrayidx850 = getelementptr inbounds [3 x i32]* %l_935, i32 0, i64 2
  %335 = load i32* %arrayidx850, align 4
  %conv851 = trunc i32 %335 to i16
  %336 = load i16* %l_662, align 2
  %conv852 = sext i16 %336 to i32
  %337 = load i32* %l_928, align 4
  store i32 %337, i32* @_ZL5g_622, align 4
  %338 = load i16* %l_679, align 2
  %arrayidx853 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %339 = load i16* %arrayidx853, align 2
  %conv854 = sext i16 %339 to i32
  %340 = load volatile i16* @_ZL5g_277, align 2
  %conv855 = zext i16 %340 to i32
  %cmp856 = icmp sgt i32 %conv854, %conv855
  %conv857 = zext i1 %cmp856 to i32
  %341 = load i32* @_ZL3g_2, align 4
  %cmp858 = icmp sle i32 %conv857, %341
  br i1 %cmp858, label %land.rhs859, label %land.end861

land.rhs859:                                      ; preds = %lor.rhs849
  %342 = load i32* %l_952, align 4
  %tobool860 = icmp ne i32 %342, 0
  br label %land.end861

land.end861:                                      ; preds = %land.rhs859, %lor.rhs849
  %343 = phi i1 [ false, %lor.rhs849 ], [ %tobool860, %land.rhs859 ]
  %conv862 = zext i1 %343 to i32
  %344 = load i16* @_ZL4g_46, align 2
  %conv863 = sext i16 %344 to i32
  %cmp864 = icmp slt i32 %conv862, %conv863
  %conv865 = zext i1 %cmp864 to i16
  %call866 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %338, i16 signext %conv865)
  %345 = load i32* @_ZL4g_36, align 4
  %conv867 = trunc i32 %345 to i16
  %call868 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %call866, i16 signext %conv867)
  %conv869 = sext i16 %call868 to i32
  %call870 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv869, i32 5)
  %cmp871 = icmp ule i32 %call870, 1
  %conv872 = zext i1 %cmp871 to i32
  %cmp873 = icmp slt i32 %conv872, 10264
  %conv874 = zext i1 %cmp873 to i32
  %call875 = call i32 @_ZL26safe_mul_func_uint32_t_u_ujj(i32 %337, i32 %conv874)
  %conv876 = trunc i32 %call875 to i16
  %346 = load i16* @_ZL4g_60, align 2
  %call877 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv876, i16 zeroext %346)
  %conv878 = zext i16 %call877 to i32
  %347 = load i32* %l_953, align 4
  %cmp879 = icmp ne i32 %conv878, %347
  %conv880 = zext i1 %cmp879 to i32
  %348 = load i16* %l_662, align 2
  %conv881 = sext i16 %348 to i32
  %cmp882 = icmp ne i32 %conv880, %conv881
  %conv883 = zext i1 %cmp882 to i16
  %349 = load i32* %l_703, align 4
  %conv884 = trunc i32 %349 to i16
  %call885 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv883, i16 zeroext %conv884)
  %conv886 = zext i16 %call885 to i32
  %xor887 = xor i32 -3, %conv886
  %cmp888 = icmp ule i32 %xor887, -3
  %conv889 = zext i1 %cmp888 to i16
  %350 = load i32* %l_953, align 4
  %call890 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv889, i32 %350)
  %conv891 = sext i16 %call890 to i32
  %cmp892 = icmp sle i32 %conv852, %conv891
  %conv893 = zext i1 %cmp892 to i16
  %arrayidx894 = getelementptr inbounds [3 x i32]* %l_935, i32 0, i64 2
  %351 = load i32* %arrayidx894, align 4
  %conv895 = trunc i32 %351 to i16
  %call896 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv893, i16 signext %conv895)
  %call897 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv851, i16 zeroext %call896)
  %conv898 = zext i16 %call897 to i32
  %352 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %or899 = or i32 %352, %conv898
  store i32 %or899, i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %tobool900 = icmp ne i32 %or899, 0
  br label %lor.end901

lor.end901:                                       ; preds = %land.end861, %for.body837
  %353 = phi i1 [ true, %for.body837 ], [ %tobool900, %land.end861 ]
  %conv902 = zext i1 %353 to i32
  %354 = load i32* @_ZL5g_859, align 4
  %cmp903 = icmp sge i32 %conv902, %354
  br i1 %cmp903, label %lor.end906, label %lor.rhs904

lor.rhs904:                                       ; preds = %lor.end901
  %355 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %tobool905 = icmp ne i32 %355, 0
  br label %lor.end906

lor.end906:                                       ; preds = %lor.rhs904, %lor.end901
  %356 = phi i1 [ true, %lor.end901 ], [ %tobool905, %lor.rhs904 ]
  %conv907 = zext i1 %356 to i32
  %arrayidx908 = getelementptr inbounds [2 x [10 x [7 x i32]]]* %l_924, i32 0, i64 1
  %arrayidx909 = getelementptr inbounds [10 x [7 x i32]]* %arrayidx908, i32 0, i64 5
  %arrayidx910 = getelementptr inbounds [7 x i32]* %arrayidx909, i32 0, i64 5
  %357 = load i32* %arrayidx910, align 4
  %xor911 = xor i32 %357, %conv907
  store i32 %xor911, i32* %arrayidx910, align 4
  br label %for.inc912

for.inc912:                                       ; preds = %lor.end906
  %358 = load i16* @_ZL4g_60, align 2
  %conv913 = zext i16 %358 to i32
  %add914 = add nsw i32 %conv913, 1
  %conv915 = trunc i32 %add914 to i16
  store i16 %conv915, i16* @_ZL4g_60, align 2
  br label %for.cond834

for.end916:                                       ; preds = %for.cond834
  store i32 0, i32* @_ZL5g_930, align 4
  br label %for.cond917

for.cond917:                                      ; preds = %for.inc925, %for.end916
  %359 = load i32* @_ZL5g_930, align 4
  %cmp918 = icmp ule i32 %359, 0
  br i1 %cmp918, label %for.body919, label %for.end927

for.body919:                                      ; preds = %for.cond917
  store i32 -1, i32* %l_954, align 4
  %arrayidx920 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 0
  %360 = load i16* %arrayidx920, align 2
  %conv921 = sext i16 %360 to i32
  %cmp922 = icmp uge i32 %conv921, -866495976
  %conv923 = zext i1 %cmp922 to i32
  %361 = load i32* %l_954, align 4
  %or924 = or i32 %361, %conv923
  store i32 %or924, i32* %l_954, align 4
  %362 = load i32* @_ZL5g_168, align 4
  store i32 %362, i32* %retval
  br label %return

for.inc925:                                       ; No predecessors!
  %363 = load i32* @_ZL5g_930, align 4
  %add926 = add i32 %363, 1
  store i32 %add926, i32* @_ZL5g_930, align 4
  br label %for.cond917

for.end927:                                       ; preds = %for.cond917
  store i32 -1, i32* %l_820, align 4
  %364 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp928 = icmp slt i32 %364, 556615199
  %conv929 = zext i1 %cmp928 to i32
  %arrayidx930 = getelementptr inbounds [3 x i32]* %l_935, i32 0, i64 2
  %365 = load i32* %arrayidx930, align 4
  %conv931 = trunc i32 %365 to i16
  %arrayidx932 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %366 = load i16* %arrayidx932, align 2
  %conv933 = zext i16 %366 to i32
  %call934 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv931, i32 %conv933)
  %conv935 = sext i16 %call934 to i32
  %367 = load i32* @_ZL4g_55, align 4
  %conv936 = trunc i32 %367 to i16
  %call937 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext -27446, i32 5)
  %call938 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %call937, i32 9)
  %conv939 = sext i16 %call938 to i32
  %368 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 5), align 4
  store i32 %368, i32* @_ZL5g_796, align 4
  %neg940 = xor i32 %368, -1
  %369 = load i32* @_ZL3g_2, align 4
  %xor941 = xor i32 %369, %neg940
  store i32 %xor941, i32* @_ZL3g_2, align 4
  %cmp942 = icmp sle i32 %xor941, 0
  %conv943 = zext i1 %cmp942 to i32
  %and944 = and i32 %conv939, %conv943
  %arrayidx945 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx946 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx945, i32 0, i64 4
  %arrayidx947 = getelementptr inbounds [6 x i32]* %arrayidx946, i32 0, i64 5
  %370 = load i32* %arrayidx947, align 4
  %and948 = and i32 %370, %and944
  store i32 %and948, i32* %arrayidx947, align 4
  %conv949 = trunc i32 %and948 to i16
  %call950 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv936, i16 signext %conv949)
  %conv951 = sext i16 %call950 to i32
  %or952 = or i32 %conv951, 1086401108
  %conv953 = trunc i32 %or952 to i16
  %371 = load i16* %l_679, align 2
  %call954 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv953, i16 signext %371)
  %conv955 = sext i16 %call954 to i32
  %372 = load i16* %l_679, align 2
  %conv956 = zext i16 %372 to i32
  %cmp957 = icmp slt i32 %conv955, %conv956
  %conv958 = zext i1 %cmp957 to i32
  %call959 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv958, i32 -481983742)
  %arrayidx960 = getelementptr inbounds [3 x i32]* %l_935, i32 0, i64 2
  %373 = load i32* %arrayidx960, align 4
  %cmp961 = icmp uge i32 %call959, %373
  %conv962 = zext i1 %cmp961 to i16
  %374 = load i32* @_ZL5g_615, align 4
  %conv963 = trunc i32 %374 to i16
  %call964 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv962, i16 signext %conv963)
  %conv965 = sext i16 %call964 to i32
  %cmp966 = icmp slt i32 %conv935, %conv965
  %conv967 = zext i1 %cmp966 to i32
  %cmp968 = icmp ne i32 %conv967, 5
  %conv969 = zext i1 %cmp968 to i32
  %cmp970 = icmp sle i32 %conv929, %conv969
  %conv971 = zext i1 %cmp970 to i32
  %375 = load i32* @_ZL5g_398, align 4
  %cmp972 = icmp ule i32 %conv971, %375
  %conv973 = zext i1 %cmp972 to i16
  %arrayidx974 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx975 = getelementptr inbounds [3 x i32]* %arrayidx974, i32 0, i64 2
  %376 = load i32* %arrayidx975, align 4
  %conv976 = trunc i32 %376 to i16
  %call977 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv973, i16 zeroext %conv976)
  %conv978 = zext i16 %call977 to i32
  %call979 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 -1, i32 %conv978)
  %tobool980 = icmp ne i32 %call979, 0
  br i1 %tobool980, label %land.rhs981, label %land.end983

land.rhs981:                                      ; preds = %for.end927
  %377 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 3, i64 0, i64 1), align 4
  %tobool982 = icmp ne i32 %377, 0
  br label %land.end983

land.end983:                                      ; preds = %land.rhs981, %for.end927
  %378 = phi i1 [ false, %for.end927 ], [ %tobool982, %land.rhs981 ]
  %conv984 = zext i1 %378 to i32
  store i32 %conv984, i32* %l_874, align 4
  store i32 0, i32* @_ZL4g_36, align 4
  br label %for.cond985

for.cond985:                                      ; preds = %for.inc992, %land.end983
  %379 = load i32* @_ZL4g_36, align 4
  %cmp986 = icmp ule i32 %379, 0
  br i1 %cmp986, label %for.body987, label %for.end994

for.body987:                                      ; preds = %for.cond985
  %380 = load i32* %l_730, align 4
  %xor988 = xor i32 %380, -1516255930
  store i32 %xor988, i32* %l_730, align 4
  %381 = load i32* %l_826, align 4
  %tobool989 = icmp ne i32 %381, 0
  br i1 %tobool989, label %if.then990, label %if.end991

if.then990:                                       ; preds = %for.body987
  br label %lbl_873

if.end991:                                        ; preds = %for.body987
  br label %for.inc992

for.inc992:                                       ; preds = %if.end991
  %382 = load i32* @_ZL4g_36, align 4
  %add993 = add i32 %382, 1
  store i32 %add993, i32* @_ZL4g_36, align 4
  br label %for.cond985

for.end994:                                       ; preds = %for.cond985
  br label %if.end995

if.end995:                                        ; preds = %for.end994, %if.end823
  br label %if.end996

if.end996:                                        ; preds = %if.end995, %lor.end328
  store i16 0, i16* @_ZL4g_60, align 2
  br label %for.cond997

for.cond997:                                      ; preds = %for.inc1647, %if.end996
  %383 = load i16* @_ZL4g_60, align 2
  %conv998 = zext i16 %383 to i32
  %cmp999 = icmp sle i32 %conv998, 0
  br i1 %cmp999, label %for.body1000, label %for.end1651

for.body1000:                                     ; preds = %for.cond997
  store i32 0, i32* %l_1099, align 4
  store i32 895541339, i32* %l_1125, align 4
  store i32 1, i32* %l_1196, align 4
  store i32 220256392, i32* %l_1250, align 4
  store i32 642727289, i32* %l_1252, align 4
  store i32 -40424173, i32* %l_1254, align 4
  store i32 1, i32* %l_1255, align 4
  %384 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %385 = load i32* @_ZL5g_615, align 4
  %386 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 1), align 4
  %387 = load i32* %l_987, align 4
  %conv1001 = trunc i32 %387 to i16
  %call1002 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv1001, i32 14)
  %conv1003 = zext i16 %call1002 to i32
  %call1004 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 -1)
  %conv1005 = trunc i32 %call1004 to i16
  %388 = load i32* @_ZL3g_2, align 4
  %conv1006 = trunc i32 %388 to i16
  %call1007 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv1005, i16 zeroext %conv1006)
  %conv1008 = zext i16 %call1007 to i32
  %389 = load i32* @_ZL5g_859, align 4
  %conv1009 = trunc i32 %389 to i16
  %call1010 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv1009, i16 zeroext 9)
  %conv1011 = zext i16 %call1010 to i32
  %390 = load i32* %l_826, align 4
  %or1012 = or i32 %conv1011, %390
  %conv1013 = trunc i32 %or1012 to i16
  %call1014 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv1013, i16 signext -4)
  %conv1015 = sext i16 %call1014 to i32
  %call1016 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 848993878, i32 %conv1015)
  %and1017 = and i32 0, %call1016
  %call1018 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv1008, i32 %and1017)
  %cmp1019 = icmp eq i32 %call1018, 3
  %conv1020 = zext i1 %cmp1019 to i32
  %391 = load i32* @_ZL3g_2, align 4
  %xor1021 = xor i32 %conv1020, %391
  %call1022 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv1003, i32 %xor1021)
  %call1023 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %call1022, i32 8)
  store i32 %call1023, i32* @_ZL5g_622, align 4
  %tobool1024 = icmp ne i32 %call1023, 0
  br i1 %tobool1024, label %lor.end1026, label %lor.rhs1025

lor.rhs1025:                                      ; preds = %for.body1000
  br label %lor.end1026

lor.end1026:                                      ; preds = %lor.rhs1025, %for.body1000
  %392 = phi i1 [ true, %for.body1000 ], [ true, %lor.rhs1025 ]
  %conv1027 = zext i1 %392 to i32
  %cmp1028 = icmp ugt i32 %386, %conv1027
  %conv1029 = zext i1 %cmp1028 to i32
  %cmp1030 = icmp ne i32 %385, %conv1029
  %conv1031 = zext i1 %cmp1030 to i32
  %393 = load i32* @_ZL4g_36, align 4
  %cmp1032 = icmp ule i32 %conv1031, %393
  %conv1033 = zext i1 %cmp1032 to i16
  %394 = load i32* @_ZL3g_2, align 4
  %conv1034 = trunc i32 %394 to i16
  %call1035 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv1033, i16 signext %conv1034)
  %conv1036 = sext i16 %call1035 to i32
  %395 = load i16* @_ZL4g_46, align 2
  %conv1037 = sext i16 %395 to i32
  %call1038 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv1036, i32 %conv1037)
  %cmp1039 = icmp ne i32 %call1038, 7
  %conv1040 = zext i1 %cmp1039 to i32
  %and1041 = and i32 %384, %conv1040
  store i32 %and1041, i32* @_ZL5g_859, align 4
  %396 = load i32* @_ZL4g_55, align 4
  %397 = load i32* @_ZL5g_398, align 4
  %and1042 = and i32 %396, %397
  %398 = load i16* %l_679, align 2
  %arrayidx1043 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %399 = load i16* %arrayidx1043, align 2
  %400 = load i32* @_ZL5g_796, align 4
  %401 = load i16* %l_688, align 2
  %call1044 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %401, i32 12)
  %conv1045 = zext i16 %call1044 to i32
  %402 = load i32* @_ZL5g_168, align 4
  %cmp1046 = icmp ult i32 %conv1045, %402
  br i1 %cmp1046, label %lor.end1053, label %lor.rhs1047

lor.rhs1047:                                      ; preds = %lor.end1026
  %403 = load i32* %l_703, align 4
  %conv1048 = trunc i32 %403 to i16
  %call1049 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext 883, i16 zeroext %conv1048)
  %conv1050 = zext i16 %call1049 to i32
  %call1051 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv1050, i32 -1201278833)
  %tobool1052 = icmp ne i32 %call1051, 0
  br label %lor.end1053

lor.end1053:                                      ; preds = %lor.rhs1047, %lor.end1026
  %404 = phi i1 [ true, %lor.end1026 ], [ %tobool1052, %lor.rhs1047 ]
  %conv1054 = zext i1 %404 to i32
  %405 = load i32* %l_730, align 4
  %cmp1055 = icmp ne i32 %conv1054, %405
  %conv1056 = zext i1 %cmp1055 to i32
  %or1057 = or i32 %400, %conv1056
  %or1058 = or i32 %or1057, 16268
  %call1059 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %or1058, i32 1312589171)
  %406 = load volatile i32* @_ZL6g_1020, align 4
  %and1060 = and i32 %call1059, %406
  %call1061 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext 9997, i32 %and1060)
  %call1062 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %399, i16 signext %call1061)
  %conv1063 = sext i16 %call1062 to i32
  %407 = load i16* @_ZL5g_394, align 2
  %conv1064 = zext i16 %407 to i32
  %cmp1065 = icmp sgt i32 %conv1063, %conv1064
  %conv1066 = zext i1 %cmp1065 to i16
  %call1067 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv1066, i32 3)
  %conv1068 = sext i16 %call1067 to i32
  %conv1069 = trunc i32 %conv1068 to i16
  %call1070 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %398, i16 signext %conv1069)
  %call1071 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %call1070, i32 14)
  %conv1072 = sext i16 %call1071 to i32
  %408 = load i32* @_ZL4g_48, align 4
  %cmp1073 = icmp sle i32 %conv1072, %408
  %conv1074 = zext i1 %cmp1073 to i32
  %or1075 = or i32 %conv1074, -2
  %tobool1076 = icmp ne i32 %or1075, 0
  br i1 %tobool1076, label %lor.end1078, label %lor.rhs1077

lor.rhs1077:                                      ; preds = %lor.end1053
  br label %lor.end1078

lor.end1078:                                      ; preds = %lor.rhs1077, %lor.end1053
  %409 = phi i1 [ true, %lor.end1053 ], [ true, %lor.rhs1077 ]
  %conv1079 = zext i1 %409 to i16
  store i16 %conv1079, i16* @_ZL5g_394, align 2
  %conv1080 = zext i16 %conv1079 to i32
  store i32 %conv1080, i32* @_ZL6g_1021, align 4
  %conv1081 = trunc i32 %conv1080 to i16
  %call1082 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv1081, i16 zeroext 9006)
  %conv1083 = zext i16 %call1082 to i32
  %410 = load i32* @_ZL4g_55, align 4
  %or1084 = or i32 %conv1083, %410
  %cmp1085 = icmp eq i32 %and1042, %or1084
  %conv1086 = zext i1 %cmp1085 to i32
  %arrayidx1087 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %411 = load i16* %arrayidx1087, align 2
  %conv1088 = sext i16 %411 to i32
  %cmp1089 = icmp slt i32 %conv1086, %conv1088
  br i1 %cmp1089, label %if.then1090, label %if.else1508

if.then1090:                                      ; preds = %lor.end1078
  store i16 -6, i16* %l_1030, align 2
  store i16 1, i16* %l_1126, align 2
  store i32 0, i32* %i1091, align 4
  br label %for.cond1092

for.cond1092:                                     ; preds = %for.inc1097, %if.then1090
  %412 = load i32* %i1091, align 4
  %cmp1093 = icmp slt i32 %412, 4
  br i1 %cmp1093, label %for.body1094, label %for.end1099

for.body1094:                                     ; preds = %for.cond1092
  %413 = load i32* %i1091, align 4
  %idxprom1095 = sext i32 %413 to i64
  %arrayidx1096 = getelementptr inbounds [4 x i32]* %l_1038, i32 0, i64 %idxprom1095
  store i32 1, i32* %arrayidx1096, align 4
  br label %for.inc1097

for.inc1097:                                      ; preds = %for.body1094
  %414 = load i32* %i1091, align 4
  %inc1098 = add nsw i32 %414, 1
  store i32 %inc1098, i32* %i1091, align 4
  br label %for.cond1092

for.end1099:                                      ; preds = %for.cond1092
  %415 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv1100 = trunc i32 %415 to i16
  %416 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %cmp1101 = icmp sgt i32 10577, %416
  %conv1102 = zext i1 %cmp1101 to i32
  %cmp1103 = icmp sgt i32 %conv1102, 54011
  %conv1104 = zext i1 %cmp1103 to i32
  %417 = load i32* @_ZL5g_622, align 4
  %conv1105 = trunc i32 %417 to i16
  store i16 %conv1105, i16* %l_1030, align 2
  %418 = load i32* %l_1031, align 4
  %conv1106 = trunc i32 %418 to i16
  %call1107 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv1105, i16 zeroext %conv1106)
  %conv1108 = zext i16 %call1107 to i32
  %419 = load i32* @_ZL4g_36, align 4
  %cmp1109 = icmp eq i32 %419, 0
  %conv1110 = zext i1 %cmp1109 to i32
  %cmp1111 = icmp sgt i32 %conv1108, %conv1110
  %conv1112 = zext i1 %cmp1111 to i16
  %arrayidx1113 = getelementptr inbounds [4 x i32]* %l_1038, i32 0, i64 3
  %420 = load i32* %arrayidx1113, align 4
  %call1114 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %420, i32 -3)
  %conv1115 = trunc i32 %call1114 to i16
  %421 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call1116 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv1115, i32 %421)
  %conv1117 = sext i16 %call1116 to i32
  %arrayidx1118 = getelementptr inbounds [4 x i32]* %l_1038, i32 0, i64 3
  %422 = load i32* %arrayidx1118, align 4
  %cmp1119 = icmp sgt i32 %conv1117, %422
  %conv1120 = zext i1 %cmp1119 to i16
  %423 = load i32* %l_1031, align 4
  %call1121 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv1120, i32 %423)
  %call1122 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv1112, i16 zeroext %call1121)
  %conv1123 = zext i16 %call1122 to i32
  %424 = load i32* @_ZL5g_168, align 4
  %call1124 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv1123, i32 %424)
  %cmp1125 = icmp ugt i32 %conv1104, %call1124
  %conv1126 = zext i1 %cmp1125 to i32
  %425 = load i16* @_ZL5g_394, align 2
  %conv1127 = zext i16 %425 to i32
  %or1128 = or i32 %conv1127, %conv1126
  %conv1129 = trunc i32 %or1128 to i16
  store i16 %conv1129, i16* @_ZL5g_394, align 2
  %call1130 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv1100, i16 zeroext %conv1129)
  %tobool1131 = icmp ne i16 %call1130, 0
  br i1 %tobool1131, label %if.then1132, label %if.else1136

if.then1132:                                      ; preds = %for.end1099
  %426 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 1, i64 0, i64 1), align 4
  %arrayidx1133 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx1134 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx1133, i32 0, i64 4
  %arrayidx1135 = getelementptr inbounds [6 x i32]* %arrayidx1134, i32 0, i64 5
  store i32 %426, i32* %arrayidx1135, align 4
  br label %if.end1148

if.else1136:                                      ; preds = %for.end1099
  store i16 -6, i16* %l_1039, align 2
  %arrayidx1137 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 4
  %arrayidx1138 = getelementptr inbounds [3 x i32]* %arrayidx1137, i32 0, i64 1
  %427 = load i32* %arrayidx1138, align 4
  %tobool1139 = icmp ne i32 %427, 0
  br i1 %tobool1139, label %if.then1140, label %if.end1141

if.then1140:                                      ; preds = %if.else1136
  br label %for.end1651

if.end1141:                                       ; preds = %if.else1136
  %428 = load i32* @_ZL5g_396, align 4
  %429 = load i16* %l_688, align 2
  %conv1142 = sext i16 %429 to i32
  %cmp1143 = icmp ult i32 %428, %conv1142
  %conv1144 = zext i1 %cmp1143 to i32
  %430 = load i16* %l_1039, align 2
  %conv1145 = sext i16 %430 to i32
  %and1146 = and i32 %conv1145, %conv1144
  %conv1147 = trunc i32 %and1146 to i16
  store i16 %conv1147, i16* %l_1039, align 2
  br label %if.end1148

if.end1148:                                       ; preds = %if.end1141, %if.then1132
  %431 = load volatile i32* @_ZL5g_778, align 4
  %432 = load i32* @_ZL5g_166, align 4
  %conv1149 = trunc i32 %432 to i16
  %call1150 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv1149)
  %conv1151 = zext i16 %call1150 to i32
  %433 = load i32* @_ZL6g_1021, align 4
  %tobool1152 = icmp ne i32 %433, 0
  br i1 %tobool1152, label %land.lhs.true, label %land.end1211

land.lhs.true:                                    ; preds = %if.end1148
  %434 = load i32* %l_861, align 4
  %435 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %436 = load i32* @_ZL5g_859, align 4
  %tobool1153 = icmp ne i32 %436, 0
  br i1 %tobool1153, label %land.rhs1154, label %land.end1155

land.rhs1154:                                     ; preds = %land.lhs.true
  br label %land.end1155

land.end1155:                                     ; preds = %land.rhs1154, %land.lhs.true
  %437 = phi i1 [ false, %land.lhs.true ], [ true, %land.rhs1154 ]
  %conv1156 = zext i1 %437 to i32
  %cmp1157 = icmp ne i32 %435, %conv1156
  %conv1158 = zext i1 %cmp1157 to i32
  %438 = load i16* @_ZL5g_394, align 2
  %tobool1159 = icmp ne i16 %438, 0
  br i1 %tobool1159, label %land.rhs1160, label %land.end1162

land.rhs1160:                                     ; preds = %land.end1155
  %439 = load i32* %l_703, align 4
  %tobool1161 = icmp ne i32 %439, 0
  br label %land.end1162

land.end1162:                                     ; preds = %land.rhs1160, %land.end1155
  %440 = phi i1 [ false, %land.end1155 ], [ %tobool1161, %land.rhs1160 ]
  %conv1163 = zext i1 %440 to i32
  %441 = load i32* @_ZL5g_489, align 4
  %cmp1164 = icmp sge i32 %conv1163, %441
  %conv1165 = zext i1 %cmp1164 to i32
  store i32 %conv1165, i32* @_ZL4g_36, align 4
  %call1166 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv1158, i32 %conv1165)
  %and1167 = and i32 %call1166, 0
  %conv1168 = trunc i32 %and1167 to i16
  %arrayidx1169 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %442 = load i16* %arrayidx1169, align 2
  %call1170 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1168, i16 zeroext %442)
  %conv1171 = zext i16 %call1170 to i32
  %cmp1172 = icmp sle i32 %conv1171, 16336
  %conv1173 = zext i1 %cmp1172 to i16
  %443 = load i32* @_ZL5g_796, align 4
  %conv1174 = trunc i32 %443 to i16
  %call1175 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1173, i16 zeroext %conv1174)
  %444 = load i16* %l_1030, align 2
  %call1176 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %call1175, i16 zeroext %444)
  %conv1177 = zext i16 %call1176 to i32
  %445 = load i32* %l_730, align 4
  %or1178 = or i32 %445, %conv1177
  store i32 %or1178, i32* %l_730, align 4
  %446 = load i32* %l_826, align 4
  %cmp1179 = icmp ugt i32 %or1178, %446
  %conv1180 = zext i1 %cmp1179 to i32
  %arrayidx1181 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %447 = load i16* %arrayidx1181, align 2
  %conv1182 = sext i16 %447 to i32
  %xor1183 = xor i32 %conv1180, %conv1182
  %neg1184 = xor i32 %xor1183, -1
  store i32 %neg1184, i32* %l_703, align 4
  %cmp1185 = icmp sle i32 %neg1184, 0
  %conv1186 = zext i1 %cmp1185 to i32
  %448 = load i32* @_ZL5g_398, align 4
  %call1187 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv1186, i32 %448)
  %449 = load i16* %l_688, align 2
  %conv1188 = sext i16 %449 to i32
  %cmp1189 = icmp ugt i32 %call1187, %conv1188
  %conv1190 = zext i1 %cmp1189 to i16
  %call1191 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv1190, i16 signext 1)
  %conv1192 = sext i16 %call1191 to i32
  %cmp1193 = icmp sge i32 %434, %conv1192
  %conv1194 = zext i1 %cmp1193 to i32
  %450 = load i32* @_ZL5g_168, align 4
  %cmp1195 = icmp ult i32 %conv1194, %450
  %conv1196 = zext i1 %cmp1195 to i16
  %451 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv1197 = trunc i32 %451 to i16
  %call1198 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv1196, i16 signext %conv1197)
  %452 = load i32* @_ZL3g_2, align 4
  %conv1199 = trunc i32 %452 to i16
  %call1200 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call1198, i16 signext %conv1199)
  %conv1201 = sext i16 %call1200 to i32
  %cmp1202 = icmp eq i32 %conv1201, -1
  %conv1203 = zext i1 %cmp1202 to i16
  %call1204 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv1203, i16 signext -12955)
  %tobool1205 = icmp ne i16 %call1204, 0
  br i1 %tobool1205, label %land.rhs1206, label %land.end1211

land.rhs1206:                                     ; preds = %land.end1162
  %arrayidx1207 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx1208 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx1207, i32 0, i64 4
  %arrayidx1209 = getelementptr inbounds [6 x i32]* %arrayidx1208, i32 0, i64 5
  %453 = load i32* %arrayidx1209, align 4
  %tobool1210 = icmp ne i32 %453, 0
  br label %land.end1211

land.end1211:                                     ; preds = %land.rhs1206, %land.end1162, %if.end1148
  %454 = phi i1 [ false, %land.end1162 ], [ false, %if.end1148 ], [ %tobool1210, %land.rhs1206 ]
  %conv1212 = zext i1 %454 to i32
  %cmp1213 = icmp sgt i32 1451281337, %conv1212
  %conv1214 = zext i1 %cmp1213 to i32
  %cmp1215 = icmp sgt i32 %conv1151, %conv1214
  %conv1216 = zext i1 %cmp1215 to i32
  %455 = load i32* @_ZL5g_796, align 4
  %and1217 = and i32 %conv1216, %455
  %arrayidx1218 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 2
  %456 = load i16* %arrayidx1218, align 2
  %conv1219 = zext i16 %456 to i32
  %cmp1220 = icmp ule i32 %and1217, %conv1219
  %conv1221 = zext i1 %cmp1220 to i32
  %457 = load i16* @_ZL6g_1066, align 2
  %conv1222 = zext i16 %457 to i32
  %or1223 = or i32 %conv1222, %conv1221
  %conv1224 = trunc i32 %or1223 to i16
  store i16 %conv1224, i16* @_ZL6g_1066, align 2
  %call1225 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1224, i16 zeroext -1)
  %conv1226 = zext i16 %call1225 to i32
  %cmp1227 = icmp ne i32 %431, %conv1226
  %conv1228 = zext i1 %cmp1227 to i32
  %cmp1229 = icmp ugt i32 %conv1228, 5
  %conv1230 = zext i1 %cmp1229 to i32
  %458 = load i32* %l_1031, align 4
  %cmp1231 = icmp ugt i32 %conv1230, %458
  br i1 %cmp1231, label %if.then1232, label %if.else1248

if.then1232:                                      ; preds = %land.end1211
  %459 = load i32* @_ZL5g_398, align 4
  %conv1233 = trunc i32 %459 to i16
  store i16 -29456, i16* %l_1073, align 2
  %460 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 2), align 4
  %or1234 = or i32 %460, 28999
  %cmp1235 = icmp uge i32 %or1234, 852903860
  %conv1236 = zext i1 %cmp1235 to i32
  %cmp1237 = icmp sge i32 -29456, %conv1236
  %conv1238 = zext i1 %cmp1237 to i32
  %cmp1239 = icmp sge i32 1, %conv1238
  %conv1240 = zext i1 %cmp1239 to i16
  store i16 %conv1240, i16* @_ZL5g_394, align 2
  %conv1241 = zext i16 %conv1240 to i32
  %461 = load i16* @_ZL4g_46, align 2
  %conv1242 = sext i16 %461 to i32
  %and1243 = and i32 %conv1241, %conv1242
  %conv1244 = trunc i32 %and1243 to i16
  %call1245 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv1233, i16 zeroext %conv1244)
  %conv1246 = zext i16 %call1245 to i32
  %and1247 = and i32 %conv1246, 30461
  store i32 %and1247, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  br label %if.end1386

if.else1248:                                      ; preds = %land.end1211
  store i16 9, i16* %l_1074, align 2
  store i16 0, i16* %l_1074, align 2
  %462 = load volatile i16* @_ZL5g_277, align 2
  %463 = load i32* %l_703, align 4
  %464 = load i32* @_ZL5g_930, align 4
  %tobool1249 = icmp ne i32 %464, 0
  br i1 %tobool1249, label %land.rhs1250, label %land.end1290

land.rhs1250:                                     ; preds = %if.else1248
  %465 = load i32* @_ZL6g_1021, align 4
  %arrayidx1251 = getelementptr inbounds [4 x i32]* %l_1038, i32 0, i64 1
  store i32 %465, i32* %arrayidx1251, align 4
  %call1252 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext 1, i32 %465)
  %call1253 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call1252, i16 signext 1)
  %conv1254 = sext i16 %call1253 to i32
  %466 = load i32* @_ZL4g_48, align 4
  %tobool1255 = icmp ne i32 %466, 0
  br i1 %tobool1255, label %lor.end1271, label %lor.rhs1256

lor.rhs1256:                                      ; preds = %land.rhs1250
  %467 = load i32* %l_1099, align 4
  %conv1257 = trunc i32 %467 to i16
  %arrayidx1258 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %468 = load i16* %arrayidx1258, align 2
  %conv1259 = zext i16 %468 to i32
  %call1260 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv1257, i32 %conv1259)
  %tobool1261 = icmp ne i16 %call1260, 0
  br i1 %tobool1261, label %lor.end1264, label %lor.rhs1262

lor.rhs1262:                                      ; preds = %lor.rhs1256
  %469 = load i32* @_ZL5g_396, align 4
  %tobool1263 = icmp ne i32 %469, 0
  br label %lor.end1264

lor.end1264:                                      ; preds = %lor.rhs1262, %lor.rhs1256
  %470 = phi i1 [ true, %lor.rhs1256 ], [ %tobool1263, %lor.rhs1262 ]
  %conv1265 = zext i1 %470 to i32
  store i32 %conv1265, i32* @_ZL4g_55, align 4
  br i1 %470, label %land.rhs1266, label %land.end1268

land.rhs1266:                                     ; preds = %lor.end1264
  %471 = load i16* @_ZL4g_60, align 2
  %tobool1267 = icmp ne i16 %471, 0
  br label %land.end1268

land.end1268:                                     ; preds = %land.rhs1266, %lor.end1264
  %472 = phi i1 [ false, %lor.end1264 ], [ %tobool1267, %land.rhs1266 ]
  %conv1269 = zext i1 %472 to i32
  %cmp1270 = icmp ule i32 %conv1269, -789080682
  br label %lor.end1271

lor.end1271:                                      ; preds = %land.end1268, %land.rhs1250
  %473 = phi i1 [ true, %land.rhs1250 ], [ %cmp1270, %land.end1268 ]
  %conv1272 = zext i1 %473 to i16
  %474 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv1273 = trunc i32 %474 to i16
  %call1274 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1272, i16 zeroext %conv1273)
  %conv1275 = zext i16 %call1274 to i32
  %475 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 5, i64 4), align 4
  %and1276 = and i32 %conv1275, %475
  %conv1277 = trunc i32 %and1276 to i16
  %476 = load i16* @_ZL6g_1066, align 2
  %call1278 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv1277, i16 signext %476)
  %477 = load i16* %l_1030, align 2
  %call1279 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %call1278, i16 zeroext %477)
  %tobool1280 = icmp ne i16 %call1279, 0
  br i1 %tobool1280, label %land.rhs1281, label %land.end1282

land.rhs1281:                                     ; preds = %lor.end1271
  br label %land.end1282

land.end1282:                                     ; preds = %land.rhs1281, %lor.end1271
  %478 = phi i1 [ false, %lor.end1271 ], [ true, %land.rhs1281 ]
  %conv1283 = zext i1 %478 to i16
  %479 = load i32* %l_1099, align 4
  %conv1284 = trunc i32 %479 to i16
  %call1285 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1283, i16 zeroext %conv1284)
  %conv1286 = zext i16 %call1285 to i32
  %cmp1287 = icmp sle i32 %conv1254, %conv1286
  %conv1288 = zext i1 %cmp1287 to i32
  %480 = load i32* %l_730, align 4
  %cmp1289 = icmp ne i32 %conv1288, %480
  br label %land.end1290

land.end1290:                                     ; preds = %land.end1282, %if.else1248
  %481 = phi i1 [ false, %if.else1248 ], [ %cmp1289, %land.end1282 ]
  %conv1291 = zext i1 %481 to i16
  %call1292 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1291, i16 signext 1)
  %conv1293 = sext i16 %call1292 to i32
  %call1294 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %463, i32 %conv1293)
  %482 = load i16* %l_1074, align 2
  %conv1295 = sext i16 %482 to i32
  %cmp1296 = icmp uge i32 %call1294, %conv1295
  br i1 %cmp1296, label %lor.end1298, label %lor.rhs1297

lor.rhs1297:                                      ; preds = %land.end1290
  br label %lor.end1298

lor.end1298:                                      ; preds = %lor.rhs1297, %land.end1290
  %483 = phi i1 [ true, %land.end1290 ], [ true, %lor.rhs1297 ]
  %conv1299 = zext i1 %483 to i16
  %call1300 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %462, i16 signext %conv1299)
  %conv1301 = sext i16 %call1300 to i32
  %484 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 3), align 4
  %and1302 = and i32 %conv1301, %484
  %485 = load i16* %l_679, align 2
  %conv1303 = zext i16 %485 to i32
  %cmp1304 = icmp ne i32 %and1302, %conv1303
  %conv1305 = zext i1 %cmp1304 to i32
  %486 = load i16* @_ZL4g_46, align 2
  %conv1306 = sext i16 %486 to i32
  %cmp1307 = icmp sgt i32 %conv1305, %conv1306
  %conv1308 = zext i1 %cmp1307 to i32
  %487 = load i16* %l_1030, align 2
  %conv1309 = sext i16 %487 to i32
  %and1310 = and i32 %conv1308, %conv1309
  %cmp1311 = icmp ne i32 %and1310, 2
  %conv1312 = zext i1 %cmp1311 to i32
  %488 = load i16* @_ZL4g_46, align 2
  %conv1313 = sext i16 %488 to i32
  %cmp1314 = icmp ne i32 %conv1312, %conv1313
  %conv1315 = zext i1 %cmp1314 to i32
  %cmp1316 = icmp slt i32 24332, %conv1315
  %conv1317 = zext i1 %cmp1316 to i16
  %call1318 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1317, i16 signext -4184)
  %489 = load i32* @_ZL4g_36, align 4
  %conv1319 = trunc i32 %489 to i16
  %call1320 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %call1318, i16 signext %conv1319)
  %conv1321 = sext i16 %call1320 to i32
  store i32 %conv1321, i32* %l_1100, align 4
  %490 = load i32* %l_1099, align 4
  %conv1322 = trunc i32 %490 to i16
  %call1323 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv1322, i32 6)
  %conv1324 = sext i16 %call1323 to i32
  %491 = load i16* @_ZL5g_394, align 2
  %492 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %493 = load i32* @_ZL3g_2, align 4
  %494 = load i32* %l_1099, align 4
  store i32 %494, i32* @_ZL5g_396, align 4
  %cmp1325 = icmp eq i32 %493, %494
  %conv1326 = zext i1 %cmp1325 to i32
  %495 = load i32* @_ZL4g_55, align 4
  %conv1327 = trunc i32 %495 to i16
  %496 = load i16* @_ZL5g_394, align 2
  %497 = load i32* @_ZL4g_33, align 4
  %conv1328 = trunc i32 %497 to i16
  store i16 %conv1328, i16* %l_1124, align 2
  %conv1329 = sext i16 %conv1328 to i32
  %neg1330 = xor i32 %conv1329, -1
  %498 = load i32* %l_861, align 4
  %or1331 = or i32 %498, %neg1330
  store i32 %or1331, i32* %l_861, align 4
  %arrayidx1332 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %499 = load i16* %arrayidx1332, align 2
  %conv1333 = sext i16 %499 to i32
  %cmp1334 = icmp sge i32 %or1331, %conv1333
  %conv1335 = zext i1 %cmp1334 to i16
  %call1336 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %496, i16 signext %conv1335)
  %call1337 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv1327, i16 signext %call1336)
  %conv1338 = sext i16 %call1337 to i32
  %and1339 = and i32 %conv1338, 20258
  %cmp1340 = icmp sgt i32 %and1339, -1
  %conv1341 = zext i1 %cmp1340 to i32
  %and1342 = and i32 %conv1326, %conv1341
  %conv1343 = trunc i32 %and1342 to i16
  %call1344 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv1343, i32 15)
  %tobool1345 = icmp ne i16 %call1344, 0
  br i1 %tobool1345, label %land.rhs1346, label %land.end1348

land.rhs1346:                                     ; preds = %lor.end1298
  %500 = load i16* %l_1073, align 2
  %tobool1347 = icmp ne i16 %500, 0
  br label %land.end1348

land.end1348:                                     ; preds = %land.rhs1346, %lor.end1298
  %501 = phi i1 [ false, %lor.end1298 ], [ %tobool1347, %land.rhs1346 ]
  %conv1349 = zext i1 %501 to i32
  %502 = load i32* %l_703, align 4
  %or1350 = or i32 %502, %conv1349
  store i32 %or1350, i32* %l_703, align 4
  %xor1351 = xor i32 %or1350, 7
  store i32 %xor1351, i32* %l_1125, align 4
  %cmp1352 = icmp sgt i32 %xor1351, 132324338
  %conv1353 = zext i1 %cmp1352 to i32
  %cmp1354 = icmp uge i32 %492, %conv1353
  %conv1355 = zext i1 %cmp1354 to i16
  %call1356 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1355, i16 zeroext 15888)
  %503 = load volatile i32* @_ZL5g_778, align 4
  %conv1357 = trunc i32 %503 to i16
  %call1358 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call1356, i16 zeroext %conv1357)
  %call1359 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %call1358, i32 2)
  %conv1360 = zext i16 %call1359 to i32
  %call1361 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv1360, i32 -4)
  %conv1362 = trunc i32 %call1361 to i16
  %call1363 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv1362)
  %call1364 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %491, i16 signext %call1363)
  %tobool1365 = icmp ne i16 %call1364, 0
  br i1 %tobool1365, label %lor.end1368, label %lor.rhs1366

lor.rhs1366:                                      ; preds = %land.end1348
  %504 = load i16* %l_1126, align 2
  %tobool1367 = icmp ne i16 %504, 0
  br label %lor.end1368

lor.end1368:                                      ; preds = %lor.rhs1366, %land.end1348
  %505 = phi i1 [ true, %land.end1348 ], [ %tobool1367, %lor.rhs1366 ]
  %conv1369 = zext i1 %505 to i32
  %cmp1370 = icmp sge i32 %conv1369, 0
  %conv1371 = zext i1 %cmp1370 to i16
  %call1372 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -3, i16 zeroext %conv1371)
  %conv1373 = zext i16 %call1372 to i32
  %call1374 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %conv1373)
  %506 = load i16* %l_1030, align 2
  %conv1375 = sext i16 %506 to i32
  %cmp1376 = icmp ugt i32 %call1374, %conv1375
  %conv1377 = zext i1 %cmp1376 to i32
  %cmp1378 = icmp eq i32 %conv1324, %conv1377
  %conv1379 = zext i1 %cmp1378 to i16
  store i16 %conv1379, i16* @_ZL5g_394, align 2
  %conv1380 = zext i16 %conv1379 to i32
  %arrayidx1381 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %507 = load i16* %arrayidx1381, align 2
  %conv1382 = sext i16 %507 to i32
  %cmp1383 = icmp eq i32 %conv1380, %conv1382
  %conv1384 = zext i1 %cmp1383 to i32
  %508 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %and1385 = and i32 %508, %conv1384
  store i32 %and1385, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  br label %if.end1386

if.end1386:                                       ; preds = %lor.end1368, %if.then1232
  %509 = load i32* @_ZL5g_796, align 4
  %510 = load i16* %l_1073, align 2
  %conv1387 = sext i16 %510 to i32
  %cmp1388 = icmp ne i32 %509, %conv1387
  %conv1389 = zext i1 %cmp1388 to i32
  %neg1390 = xor i32 %conv1389, -1
  store i32 %neg1390, i32* %l_1125, align 4
  %cmp1391 = icmp uge i32 -1316798867, %neg1390
  %conv1392 = zext i1 %cmp1391 to i32
  store i32 %conv1392, i32* @_ZL5g_396, align 4
  %511 = load i16* @_ZL5g_394, align 2
  %inc1393 = add i16 %511, 1
  store i16 %inc1393, i16* @_ZL5g_394, align 2
  %512 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 0), align 4
  %or1394 = or i32 %512, 17903
  %call1395 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %inc1393, i32 %or1394)
  %conv1396 = zext i16 %call1395 to i32
  %513 = load i32* @_ZL5g_615, align 4
  %conv1397 = trunc i32 %513 to i16
  %514 = load i16* %l_1126, align 2
  %call1398 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext 0, i16 zeroext %514)
  %conv1399 = zext i16 %call1398 to i32
  %515 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp1400 = icmp uge i32 %conv1399, %515
  %conv1401 = zext i1 %cmp1400 to i16
  %516 = load i16* @_ZL6g_1066, align 2
  %call1402 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv1401, i16 zeroext %516)
  %tobool1403 = icmp ne i16 %call1402, 0
  br i1 %tobool1403, label %lor.end1406, label %lor.rhs1404

lor.rhs1404:                                      ; preds = %if.end1386
  %517 = load i32* @_ZL5g_930, align 4
  %tobool1405 = icmp ne i32 %517, 0
  br label %lor.end1406

lor.end1406:                                      ; preds = %lor.rhs1404, %if.end1386
  %518 = phi i1 [ true, %if.end1386 ], [ %tobool1405, %lor.rhs1404 ]
  %conv1407 = zext i1 %518 to i16
  %519 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 1), align 4
  %conv1408 = trunc i32 %519 to i16
  %call1409 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv1407, i16 signext %conv1408)
  %call1410 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %call1409, i16 signext -1)
  %call1411 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv1397, i16 zeroext %call1410)
  %call1412 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext 1, i16 signext %call1411)
  %520 = load i32* @_ZL5g_398, align 4
  %conv1413 = trunc i32 %520 to i16
  %call1414 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call1412, i16 zeroext %conv1413)
  %conv1415 = zext i16 %call1414 to i32
  store i32 %conv1415, i32* %l_861, align 4
  %cmp1416 = icmp ult i32 %conv1415, -1501214735
  %conv1417 = zext i1 %cmp1416 to i32
  %cmp1418 = icmp sge i32 1672807604, %conv1417
  %conv1419 = zext i1 %cmp1418 to i32
  %and1420 = and i32 %conv1396, %conv1419
  %conv1421 = trunc i32 %and1420 to i16
  %521 = load i32* @_ZL4g_55, align 4
  %conv1422 = trunc i32 %521 to i16
  %call1423 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv1421, i16 zeroext %conv1422)
  %conv1424 = zext i16 %call1423 to i32
  %522 = load i32* @_ZL6g_1021, align 4
  %cmp1425 = icmp eq i32 %conv1424, %522
  %conv1426 = zext i1 %cmp1425 to i32
  %cmp1427 = icmp ne i32 %conv1426, -7
  %conv1428 = zext i1 %cmp1427 to i16
  %call1429 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1428, i16 zeroext 24374)
  %tobool1430 = icmp ne i16 %call1429, 0
  br i1 %tobool1430, label %land.rhs1431, label %land.end1432

land.rhs1431:                                     ; preds = %lor.end1406
  br label %land.end1432

land.end1432:                                     ; preds = %land.rhs1431, %lor.end1406
  %523 = phi i1 [ false, %lor.end1406 ], [ true, %land.rhs1431 ]
  %conv1433 = zext i1 %523 to i32
  %cmp1434 = icmp ugt i32 %conv1392, %conv1433
  %conv1435 = zext i1 %cmp1434 to i16
  %call1436 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv1435, i16 zeroext 19683)
  %conv1437 = zext i16 %call1436 to i32
  store i32 %conv1437, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 2), align 4
  store i16 0, i16* %l_1030, align 2
  br label %for.cond1438

for.cond1438:                                     ; preds = %for.inc1503, %land.end1432
  %524 = load i16* %l_1030, align 2
  %conv1439 = sext i16 %524 to i32
  %cmp1440 = icmp sge i32 %conv1439, 0
  br i1 %cmp1440, label %for.body1441, label %for.end1507

for.body1441:                                     ; preds = %for.cond1438
  store i32 1325866351, i32* %l_1156, align 4
  %525 = bitcast [8 x i32]* %l_1165 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %525, i8* bitcast ([8 x i32]* @_ZZL6func_1vE6l_1165 to i8*), i64 32, i32 16, i1 false)
  store i32 6, i32* %l_1167, align 4
  %526 = load i16* @_ZL4g_60, align 2
  %idxprom1445 = zext i16 %526 to i64
  %527 = load i16* @_ZL4g_60, align 2
  %idxprom1446 = zext i16 %527 to i64
  %528 = load i16* @_ZL4g_60, align 2
  %conv1447 = zext i16 %528 to i32
  %add1448 = add nsw i32 %conv1447, 4
  %idxprom1449 = sext i32 %add1448 to i64
  %arrayidx1450 = getelementptr inbounds [5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 %idxprom1449
  %arrayidx1451 = getelementptr inbounds [1 x [2 x i32]]* %arrayidx1450, i32 0, i64 %idxprom1446
  %arrayidx1452 = getelementptr inbounds [2 x i32]* %arrayidx1451, i32 0, i64 %idxprom1445
  %529 = load volatile i32* %arrayidx1452, align 4
  store i32 %529, i32* %l_1156, align 4
  %arrayidx1453 = getelementptr inbounds [4 x i32]* %l_1038, i32 0, i64 3
  %530 = load i32* %arrayidx1453, align 4
  %tobool1454 = icmp ne i32 %530, 0
  br i1 %tobool1454, label %lor.end1484, label %lor.rhs1455

lor.rhs1455:                                      ; preds = %for.body1441
  %531 = load i32* @_ZL5g_396, align 4
  %conv1456 = trunc i32 %531 to i16
  %532 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 1), align 4
  %arrayidx1457 = getelementptr inbounds [8 x i32]* %l_1165, i32 0, i64 2
  %533 = load i32* %arrayidx1457, align 4
  %534 = load i32* @_ZL5g_166, align 4
  %cmp1458 = icmp slt i32 %533, %534
  %conv1459 = zext i1 %cmp1458 to i32
  store i32 %conv1459, i32* %l_730, align 4
  %xor1460 = xor i32 8, %conv1459
  %535 = load i32* @_ZL4g_48, align 4
  %536 = load i32* @_ZL5g_489, align 4
  %and1461 = and i32 %535, %536
  %cmp1462 = icmp sle i32 %xor1460, %and1461
  %conv1463 = zext i1 %cmp1462 to i32
  %537 = load i16* @_ZL6g_1066, align 2
  %conv1464 = zext i16 %537 to i32
  %cmp1465 = icmp ne i32 %conv1463, %conv1464
  %conv1466 = zext i1 %cmp1465 to i32
  %arrayidx1467 = getelementptr inbounds [8 x i32]* %l_1165, i32 0, i64 2
  %538 = load i32* %arrayidx1467, align 4
  %cmp1468 = icmp sgt i32 %conv1466, %538
  %conv1469 = zext i1 %cmp1468 to i16
  %539 = load i32* %l_861, align 4
  %conv1470 = trunc i32 %539 to i16
  %call1471 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv1469, i16 signext %conv1470)
  %conv1472 = sext i16 %call1471 to i32
  %call1473 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 -1, i32 %conv1472)
  store i32 %call1473, i32* @_ZL6g_1021, align 4
  %cmp1474 = icmp ne i32 %532, %call1473
  %conv1475 = zext i1 %cmp1474 to i32
  %540 = load i16* @_ZL4g_56, align 2
  %conv1476 = sext i16 %540 to i32
  %cmp1477 = icmp ne i32 %conv1475, %conv1476
  %conv1478 = zext i1 %cmp1477 to i16
  store i16 %conv1478, i16* @_ZL5g_394, align 2
  %arrayidx1479 = getelementptr inbounds [8 x i32]* %l_1165, i32 0, i64 2
  %541 = load i32* %arrayidx1479, align 4
  %conv1480 = trunc i32 %541 to i16
  %call1481 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv1478, i16 zeroext %conv1480)
  %call1482 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1456, i16 signext %call1481)
  %tobool1483 = icmp ne i16 %call1482, 0
  br label %lor.end1484

lor.end1484:                                      ; preds = %lor.rhs1455, %for.body1441
  %542 = phi i1 [ true, %for.body1441 ], [ %tobool1483, %lor.rhs1455 ]
  %conv1485 = zext i1 %542 to i32
  %543 = load i32* %l_1166, align 4
  %or1486 = or i32 %543, %conv1485
  store i32 %or1486, i32* %l_1166, align 4
  %cmp1487 = icmp eq i32 %529, %or1486
  %conv1488 = zext i1 %cmp1487 to i32
  %544 = load i32* %l_826, align 4
  %cmp1489 = icmp ne i32 %conv1488, %544
  %conv1490 = zext i1 %cmp1489 to i32
  store i32 %conv1490, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 1, i64 2), align 4
  %545 = load i32* %l_1167, align 4
  %inc1491 = add i32 %545, 1
  store i32 %inc1491, i32* %l_1167, align 4
  %546 = load i32* %l_1197, align 4
  %xor1492 = xor i32 1, %546
  %tobool1493 = icmp ne i32 %xor1492, 0
  br i1 %tobool1493, label %lor.end1496, label %lor.rhs1494

lor.rhs1494:                                      ; preds = %lor.end1484
  %547 = load i32* %l_1196, align 4
  %tobool1495 = icmp ne i32 %547, 0
  br label %lor.end1496

lor.end1496:                                      ; preds = %lor.rhs1494, %lor.end1484
  %548 = phi i1 [ true, %lor.end1484 ], [ %tobool1495, %lor.rhs1494 ]
  %conv1497 = zext i1 %548 to i16
  %call1498 = call zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %conv1497)
  %conv1499 = zext i16 %call1498 to i32
  store i32 %conv1499, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 3, i64 4), align 4
  %549 = load volatile i32* @_ZL6g_1020, align 4
  %tobool1500 = icmp ne i32 %549, 0
  br i1 %tobool1500, label %if.then1501, label %if.end1502

if.then1501:                                      ; preds = %lor.end1496
  br label %for.end1507

if.end1502:                                       ; preds = %lor.end1496
  br label %for.inc1503

for.inc1503:                                      ; preds = %if.end1502
  %550 = load i16* %l_1030, align 2
  %conv1504 = sext i16 %550 to i32
  %sub1505 = sub nsw i32 %conv1504, 1
  %conv1506 = trunc i32 %sub1505 to i16
  store i16 %conv1506, i16* %l_1030, align 2
  br label %for.cond1438

for.end1507:                                      ; preds = %if.then1501, %for.cond1438
  br label %if.end1645

if.else1508:                                      ; preds = %lor.end1078
  store i32 -1394963803, i32* %l_1200, align 4
  store i32 -1008108614, i32* %l_1248, align 4
  %551 = load i32* %l_1200, align 4
  %552 = load i32* @_ZL5g_489, align 4
  %553 = load i16* @_ZL4g_60, align 2
  %554 = load i32* %l_826, align 4
  %tobool1509 = icmp ne i32 %554, 0
  br i1 %tobool1509, label %land.rhs1510, label %land.end1530

land.rhs1510:                                     ; preds = %if.else1508
  %555 = load i32* %l_1125, align 4
  %556 = load i32* %l_1200, align 4
  %557 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call1511 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 1, i32 %557)
  %conv1512 = trunc i32 %call1511 to i16
  %558 = load i32* %l_1200, align 4
  %conv1513 = trunc i32 %558 to i16
  %call1514 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv1512, i16 signext %conv1513)
  %conv1515 = sext i16 %call1514 to i32
  %559 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %xor1516 = xor i32 %conv1515, %559
  %560 = load i32* @_ZL5g_796, align 4
  %cmp1517 = icmp eq i32 %xor1516, %560
  %conv1518 = zext i1 %cmp1517 to i16
  %561 = load i16* %l_1193, align 2
  %call1519 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1518, i16 signext %561)
  %conv1520 = sext i16 %call1519 to i32
  %arrayidx1521 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 2
  %562 = load i16* %arrayidx1521, align 2
  %conv1522 = zext i16 %562 to i32
  %call1523 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv1520, i32 %conv1522)
  %and1524 = and i32 %call1523, 65535
  %cmp1525 = icmp uge i32 %556, %and1524
  %conv1526 = zext i1 %cmp1525 to i32
  %cmp1527 = icmp slt i32 -1, %conv1526
  %conv1528 = zext i1 %cmp1527 to i32
  %cmp1529 = icmp sgt i32 %555, %conv1528
  br label %land.end1530

land.end1530:                                     ; preds = %land.rhs1510, %if.else1508
  %563 = phi i1 [ false, %if.else1508 ], [ %cmp1529, %land.rhs1510 ]
  %conv1531 = zext i1 %563 to i32
  %564 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 3), align 4
  %call1532 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv1531, i32 %564)
  %565 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 1), align 4
  %or1533 = or i32 %call1532, %565
  %566 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %cmp1534 = icmp eq i32 %or1533, %566
  %conv1535 = zext i1 %cmp1534 to i16
  %call1536 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %553, i16 signext %conv1535)
  %conv1537 = sext i16 %call1536 to i32
  %cmp1538 = icmp eq i32 %552, %conv1537
  %conv1539 = zext i1 %cmp1538 to i32
  %call1540 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %551, i32 %conv1539)
  %tobool1541 = icmp ne i32 %call1540, 0
  br i1 %tobool1541, label %if.then1542, label %if.else1546

if.then1542:                                      ; preds = %land.end1530
  %567 = load i16* %l_1124, align 2
  %tobool1543 = icmp ne i16 %567, 0
  br i1 %tobool1543, label %if.then1544, label %if.end1545

if.then1544:                                      ; preds = %if.then1542
  br label %for.end1651

if.end1545:                                       ; preds = %if.then1542
  br label %if.end1549

if.else1546:                                      ; preds = %land.end1530
  store i32 -664664634, i32* %l_1223, align 4
  %568 = load i32* %l_1223, align 4
  %inc1547 = add i32 %568, 1
  store i32 %inc1547, i32* %l_1223, align 4
  %569 = load i16* @_ZL4g_60, align 2
  %conv1548 = zext i16 %569 to i32
  store i32 %conv1548, i32* %retval
  br label %return

if.end1549:                                       ; preds = %if.end1545
  store i32 -19, i32* @_ZL5g_396, align 4
  br label %for.cond1550

for.cond1550:                                     ; preds = %for.inc1642, %if.end1549
  %570 = load i32* @_ZL5g_396, align 4
  %cmp1551 = icmp ne i32 %570, 8
  br i1 %cmp1551, label %for.body1552, label %for.end1644

for.body1552:                                     ; preds = %for.cond1550
  store i16 1487, i16* %l_1245, align 2
  %571 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %tobool1553 = icmp ne i32 %571, 0
  br i1 %tobool1553, label %if.then1554, label %if.end1555

if.then1554:                                      ; preds = %for.body1552
  br label %for.end1644

if.end1555:                                       ; preds = %for.body1552
  %572 = load i32* @_ZL6g_1021, align 4
  store i32 %572, i32* %l_1125, align 4
  store i32 %572, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 3), align 4
  store i32 %572, i32* @_ZL5g_859, align 4
  %573 = load i32* %l_1200, align 4
  store i32 %573, i32* %l_1200, align 4
  %tobool1556 = icmp ne i32 %573, 0
  br i1 %tobool1556, label %land.rhs1557, label %land.end1606

land.rhs1557:                                     ; preds = %if.end1555
  %call1558 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext 24521, i32 1)
  %conv1559 = sext i16 %call1558 to i32
  %or1560 = or i32 255922099, %conv1559
  %arrayidx1561 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 2
  %574 = load i16* %arrayidx1561, align 2
  %conv1562 = zext i16 %574 to i32
  %and1563 = and i32 %or1560, %conv1562
  %575 = load i16* %l_1245, align 2
  %conv1564 = sext i16 %575 to i32
  store i32 0, i32* %l_1200, align 4
  %cmp1565 = icmp sge i32 %conv1564, 0
  br i1 %cmp1565, label %land.lhs.true1566, label %lor.rhs1568

land.lhs.true1566:                                ; preds = %land.rhs1557
  %576 = load i32* %l_861, align 4
  %tobool1567 = icmp ne i32 %576, 0
  br i1 %tobool1567, label %lor.end1590, label %lor.rhs1568

lor.rhs1568:                                      ; preds = %land.lhs.true1566, %land.rhs1557
  %577 = load i32* %l_1190, align 4
  store i32 %577, i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %tobool1569 = icmp ne i32 %577, 0
  br i1 %tobool1569, label %land.lhs.true1570, label %lor.lhs.false1572

land.lhs.true1570:                                ; preds = %lor.rhs1568
  %578 = load i32* %l_1248, align 4
  %tobool1571 = icmp ne i32 %578, 0
  br i1 %tobool1571, label %land.rhs1573, label %lor.lhs.false1572

lor.lhs.false1572:                                ; preds = %land.lhs.true1570, %lor.rhs1568
  br i1 true, label %land.rhs1573, label %land.end1576

land.rhs1573:                                     ; preds = %lor.lhs.false1572, %land.lhs.true1570
  %arrayidx1574 = getelementptr inbounds [3 x i16]* %l_904, i32 0, i64 1
  %579 = load i16* %arrayidx1574, align 2
  %tobool1575 = icmp ne i16 %579, 0
  br label %land.end1576

land.end1576:                                     ; preds = %land.rhs1573, %lor.lhs.false1572
  %580 = phi i1 [ false, %lor.lhs.false1572 ], [ %tobool1575, %land.rhs1573 ]
  %conv1577 = zext i1 %580 to i32
  %cmp1578 = icmp eq i32 %conv1577, -1552704178
  %conv1579 = zext i1 %cmp1578 to i32
  %cmp1580 = icmp sge i32 %conv1579, 21853
  %conv1581 = zext i1 %cmp1580 to i16
  %call1582 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv1581, i16 signext 2)
  %conv1583 = sext i16 %call1582 to i32
  %581 = load i32* @_ZL5g_489, align 4
  %and1584 = and i32 %conv1583, %581
  %582 = load i16* @_ZL4g_60, align 2
  %conv1585 = zext i16 %582 to i32
  %cmp1586 = icmp sgt i32 %and1584, %conv1585
  %conv1587 = zext i1 %cmp1586 to i32
  %583 = load i32* %l_1196, align 4
  %and1588 = and i32 %conv1587, %583
  %tobool1589 = icmp ne i32 %and1588, 0
  br label %lor.end1590

lor.end1590:                                      ; preds = %land.end1576, %land.lhs.true1566
  %584 = phi i1 [ true, %land.lhs.true1566 ], [ %tobool1589, %land.end1576 ]
  %conv1591 = zext i1 %584 to i32
  %585 = load i16* %l_662, align 2
  %conv1592 = sext i16 %585 to i32
  %and1593 = and i32 %conv1591, %conv1592
  %586 = load i32* %l_1099, align 4
  %call1594 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %and1593, i32 %586)
  %tobool1595 = icmp ne i32 %call1594, 0
  br i1 %tobool1595, label %land.rhs1596, label %land.end1598

land.rhs1596:                                     ; preds = %lor.end1590
  %587 = load i32* %l_1099, align 4
  %tobool1597 = icmp ne i32 %587, 0
  br label %land.end1598

land.end1598:                                     ; preds = %land.rhs1596, %lor.end1590
  %588 = phi i1 [ false, %lor.end1590 ], [ %tobool1597, %land.rhs1596 ]
  %conv1599 = zext i1 %588 to i32
  %call1600 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %and1563, i32 %conv1599)
  %589 = load i32* %l_660, align 4
  %cmp1601 = icmp ule i32 %call1600, %589
  %conv1602 = zext i1 %cmp1601 to i16
  %590 = load i32* @_ZL4g_55, align 4
  %conv1603 = trunc i32 %590 to i16
  %call1604 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1602, i16 signext %conv1603)
  %tobool1605 = icmp ne i16 %call1604, 0
  br label %land.end1606

land.end1606:                                     ; preds = %land.end1598, %if.end1555
  %591 = phi i1 [ false, %if.end1555 ], [ %tobool1605, %land.end1598 ]
  %conv1607 = zext i1 %591 to i32
  %592 = load i16* @_ZL4g_56, align 2
  %conv1608 = sext i16 %592 to i32
  %cmp1609 = icmp eq i32 %conv1607, %conv1608
  %conv1610 = zext i1 %cmp1609 to i32
  %593 = load i32* @_ZL5g_615, align 4
  %call1611 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv1610, i32 %593)
  %cmp1612 = icmp ule i32 %call1611, 2
  br i1 %cmp1612, label %land.rhs1613, label %land.end1615

land.rhs1613:                                     ; preds = %land.end1606
  %594 = load i16* %l_1193, align 2
  %tobool1614 = icmp ne i16 %594, 0
  br label %land.end1615

land.end1615:                                     ; preds = %land.rhs1613, %land.end1606
  %595 = phi i1 [ false, %land.end1606 ], [ %tobool1614, %land.rhs1613 ]
  %conv1616 = zext i1 %595 to i16
  %596 = load i32* @_ZL3g_2, align 4
  %conv1617 = trunc i32 %596 to i16
  %call1618 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1616, i16 signext %conv1617)
  %conv1619 = sext i16 %call1618 to i32
  store i32 %conv1619, i32* @_ZL5g_622, align 4
  %597 = load i16* @_ZL4g_60, align 2
  %conv1620 = zext i16 %597 to i32
  %cmp1621 = icmp ult i32 %conv1619, %conv1620
  %lnot1622 = xor i1 %cmp1621, true
  %conv1623 = zext i1 %lnot1622 to i32
  %cmp1624 = icmp sge i32 %572, %conv1623
  %conv1625 = zext i1 %cmp1624 to i32
  %cmp1626 = icmp ult i32 %conv1625, -351615692
  %conv1627 = zext i1 %cmp1626 to i32
  %and1628 = and i32 %conv1627, 4
  %598 = load i32* %l_1099, align 4
  %cmp1629 = icmp ule i32 %and1628, %598
  %conv1630 = zext i1 %cmp1629 to i16
  %call1631 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1630, i16 signext 0)
  %conv1632 = sext i16 %call1631 to i32
  %599 = load i32* @_ZL4g_36, align 4
  %call1633 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv1632, i32 %599)
  %600 = load i32* @_ZL5g_166, align 4
  %cmp1634 = icmp ule i32 %call1633, %600
  %conv1635 = zext i1 %cmp1634 to i32
  store i32 %conv1635, i32* %l_1197, align 4
  %cmp1636 = icmp sle i32 %conv1635, 9791
  %conv1637 = zext i1 %cmp1636 to i32
  %601 = load i32* @_ZL4g_48, align 4
  %xor1638 = xor i32 %601, %conv1637
  store i32 %xor1638, i32* @_ZL4g_48, align 4
  %602 = load i16* @_ZL6g_1066, align 2
  %tobool1639 = icmp ne i16 %602, 0
  br i1 %tobool1639, label %if.then1640, label %if.end1641

if.then1640:                                      ; preds = %land.end1615
  br label %for.end1644

if.end1641:                                       ; preds = %land.end1615
  br label %for.inc1642

for.inc1642:                                      ; preds = %if.end1641
  %603 = load i32* @_ZL5g_396, align 4
  %inc1643 = add i32 %603, 1
  store i32 %inc1643, i32* @_ZL5g_396, align 4
  br label %for.cond1550

for.end1644:                                      ; preds = %if.then1640, %if.then1554, %for.cond1550
  br label %if.end1645

if.end1645:                                       ; preds = %for.end1644, %for.end1507
  %604 = load i32* %l_1258, align 4
  %inc1646 = add i32 %604, 1
  store i32 %inc1646, i32* %l_1258, align 4
  br label %for.inc1647

for.inc1647:                                      ; preds = %if.end1645
  %605 = load i16* @_ZL4g_60, align 2
  %conv1648 = zext i16 %605 to i32
  %add1649 = add nsw i32 %conv1648, 1
  %conv1650 = trunc i32 %add1649 to i16
  store i16 %conv1650, i16* @_ZL4g_60, align 2
  br label %for.cond997

for.end1651:                                      ; preds = %if.then1544, %if.then1140, %for.cond997
  br label %for.inc1652

for.inc1652:                                      ; preds = %for.end1651
  %606 = load i32* %l_676, align 4
  %add1653 = add nsw i32 %606, 1
  store i32 %add1653, i32* %l_676, align 4
  br label %for.cond212

for.end1654:                                      ; preds = %if.then822, %if.then718, %for.cond212
  store i32 0, i32* %l_1197, align 4
  br label %for.cond1655

for.cond1655:                                     ; preds = %for.inc2641, %for.end1654
  %607 = load i32* %l_1197, align 4
  %cmp1656 = icmp slt i32 %607, -17
  br i1 %cmp1656, label %for.body1657, label %for.end2645

for.body1657:                                     ; preds = %for.cond1655
  store i32 -486011207, i32* %l_1263, align 4
  store i32 1020840692, i32* %l_1293, align 4
  %608 = bitcast [5 x [2 x [1 x i32]]]* %l_1336 to i8*
  call void @llvm.memset.p0i8.i64(i8* %608, i8 0, i64 40, i32 16, i1 false)
  %609 = bitcast i8* %608 to [5 x [2 x [1 x i32]]]*
  %610 = getelementptr [5 x [2 x [1 x i32]]]* %609, i32 0, i32 0
  %611 = getelementptr [2 x [1 x i32]]* %610, i32 0, i32 0
  %612 = getelementptr [1 x i32]* %611, i32 0, i32 0
  store i32 786100165, i32* %612
  %613 = getelementptr [5 x [2 x [1 x i32]]]* %609, i32 0, i32 1
  %614 = getelementptr [2 x [1 x i32]]* %613, i32 0, i32 0
  %615 = getelementptr [1 x i32]* %614, i32 0, i32 0
  store i32 786100165, i32* %615
  %616 = getelementptr [5 x [2 x [1 x i32]]]* %609, i32 0, i32 2
  %617 = getelementptr [2 x [1 x i32]]* %616, i32 0, i32 0
  %618 = getelementptr [1 x i32]* %617, i32 0, i32 0
  store i32 786100165, i32* %618
  %619 = getelementptr [5 x [2 x [1 x i32]]]* %609, i32 0, i32 3
  %620 = getelementptr [2 x [1 x i32]]* %619, i32 0, i32 0
  %621 = getelementptr [1 x i32]* %620, i32 0, i32 0
  store i32 786100165, i32* %621
  %622 = getelementptr [5 x [2 x [1 x i32]]]* %609, i32 0, i32 4
  %623 = getelementptr [2 x [1 x i32]]* %622, i32 0, i32 0
  %624 = getelementptr [1 x i32]* %623, i32 0, i32 0
  store i32 786100165, i32* %624
  store i16 19591, i16* %l_1561, align 2
  %625 = load i32* %l_1263, align 4
  %626 = load i32* %l_704, align 4
  store i32 %626, i32* %l_1266, align 4
  %arrayidx1661 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %627 = load i16* %arrayidx1661, align 2
  %tobool1662 = icmp ne i16 %627, 0
  br i1 %tobool1662, label %lor.end1667, label %lor.rhs1663

lor.rhs1663:                                      ; preds = %for.body1657
  %628 = load volatile i16* @_ZL5g_277, align 2
  %conv1664 = zext i16 %628 to i32
  %629 = load i32* @_ZL5g_166, align 4
  %and1665 = and i32 %conv1664, %629
  %tobool1666 = icmp ne i32 %and1665, 0
  br label %lor.end1667

lor.end1667:                                      ; preds = %lor.rhs1663, %for.body1657
  %630 = phi i1 [ true, %for.body1657 ], [ %tobool1666, %lor.rhs1663 ]
  %conv1668 = zext i1 %630 to i16
  %631 = load i32* %l_660, align 4
  store i32 %631, i32* %l_730, align 4
  %632 = load i32* @_ZL6g_1021, align 4
  %call1669 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 1, i32 %632)
  %cmp1670 = icmp ne i32 %631, %call1669
  %conv1671 = zext i1 %cmp1670 to i32
  %633 = load i32* %l_660, align 4
  %cmp1672 = icmp slt i32 %conv1671, %633
  %conv1673 = zext i1 %cmp1672 to i32
  %634 = load i32* %l_1190, align 4
  %and1674 = and i32 %conv1673, %634
  %conv1675 = trunc i32 %and1674 to i16
  %call1676 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1668, i16 signext %conv1675)
  %conv1677 = sext i16 %call1676 to i32
  %call1678 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %626, i32 %conv1677)
  %635 = load i32* @_ZL4g_33, align 4
  %cmp1679 = icmp ule i32 %call1678, %635
  %conv1680 = zext i1 %cmp1679 to i32
  %cmp1681 = icmp ugt i32 %625, %conv1680
  br i1 %cmp1681, label %if.then1684, label %lor.lhs.false1682

lor.lhs.false1682:                                ; preds = %lor.end1667
  %636 = load i32* %l_704, align 4
  %tobool1683 = icmp ne i32 %636, 0
  br i1 %tobool1683, label %if.then1684, label %if.else1734

if.then1684:                                      ; preds = %lor.lhs.false1682, %lor.end1667
  store i32 0, i32* %l_1292, align 4
  %637 = load i32* @_ZL5g_396, align 4
  %tobool1685 = icmp ne i32 %637, 0
  br i1 %tobool1685, label %lor.end1731, label %lor.rhs1686

lor.rhs1686:                                      ; preds = %if.then1684
  %arrayidx1687 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 1
  %638 = load i16* %arrayidx1687, align 2
  %639 = load i32* @_ZL5g_622, align 4
  %conv1688 = trunc i32 %639 to i16
  %call1689 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %638, i16 signext %conv1688)
  %conv1690 = sext i16 %call1689 to i32
  %640 = load volatile i32* @_ZL5g_778, align 4
  %641 = load i32* @_ZL6g_1021, align 4
  %642 = load i32* @_ZL5g_166, align 4
  %cmp1691 = icmp ugt i32 %641, %642
  %conv1692 = zext i1 %cmp1691 to i32
  %cmp1693 = icmp ult i32 -1735947495, %conv1692
  br i1 %cmp1693, label %lor.end1712, label %lor.rhs1694

lor.rhs1694:                                      ; preds = %lor.rhs1686
  %643 = load i32* @_ZL4g_36, align 4
  %conv1695 = trunc i32 %643 to i16
  %call1696 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv1695)
  %conv1697 = sext i16 %call1696 to i32
  %arrayidx1698 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx1699 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx1698, i32 0, i64 4
  %arrayidx1700 = getelementptr inbounds [6 x i32]* %arrayidx1699, i32 0, i64 5
  %644 = load i32* %arrayidx1700, align 4
  %or1701 = or i32 %conv1697, %644
  %645 = load i32* %l_1292, align 4
  %call1702 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %or1701, i32 %645)
  %646 = load i32* %l_1292, align 4
  %cmp1703 = icmp sle i32 %call1702, %646
  %conv1704 = zext i1 %cmp1703 to i32
  %647 = load i32* %l_1292, align 4
  %cmp1705 = icmp ne i32 %conv1704, %647
  %conv1706 = zext i1 %cmp1705 to i32
  store i32 %conv1706, i32* @_ZL4g_48, align 4
  %call1707 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv1706, i32 -1)
  %648 = load i32* %l_1263, align 4
  %cmp1708 = icmp ne i32 %call1707, %648
  %conv1709 = zext i1 %cmp1708 to i32
  %call1710 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv1709, i32 -9)
  %649 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 0), align 4
  %cmp1711 = icmp eq i32 %call1710, %649
  br label %lor.end1712

lor.end1712:                                      ; preds = %lor.rhs1694, %lor.rhs1686
  %650 = phi i1 [ true, %lor.rhs1686 ], [ %cmp1711, %lor.rhs1694 ]
  %conv1713 = zext i1 %650 to i32
  %cmp1714 = icmp sle i32 %640, %conv1713
  %conv1715 = zext i1 %cmp1714 to i32
  %cmp1716 = icmp ne i32 1641437655, %conv1715
  %conv1717 = zext i1 %cmp1716 to i32
  %651 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 5), align 4
  %cmp1718 = icmp ugt i32 %conv1717, %651
  %conv1719 = zext i1 %cmp1718 to i32
  %cmp1720 = icmp ult i32 %conv1719, 1
  %conv1721 = zext i1 %cmp1720 to i16
  %call1722 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv1721, i32 8)
  %conv1723 = sext i16 %call1722 to i32
  %call1724 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv1690, i32 %conv1723)
  store i32 %call1724, i32* %l_1293, align 4
  %652 = load i32* %l_1197, align 4
  %call1725 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %call1724, i32 %652)
  %653 = load i32* @_ZL5g_489, align 4
  %or1726 = or i32 %call1725, %653
  %conv1727 = trunc i32 %or1726 to i16
  store i16 %conv1727, i16* @_ZL4g_46, align 2
  %conv1728 = sext i16 %conv1727 to i32
  %654 = load i16* %l_662, align 2
  %conv1729 = sext i16 %654 to i32
  %cmp1730 = icmp sgt i32 %conv1728, %conv1729
  br label %lor.end1731

lor.end1731:                                      ; preds = %lor.end1712, %if.then1684
  %655 = phi i1 [ true, %if.then1684 ], [ %cmp1730, %lor.end1712 ]
  %conv1732 = zext i1 %655 to i32
  store i32 %conv1732, i32* %l_730, align 4
  %656 = load i16* @_ZL6g_1066, align 2
  %conv1733 = zext i16 %656 to i32
  store i32 %conv1733, i32* %retval
  br label %return

if.else1734:                                      ; preds = %lor.lhs.false1682
  store i16 28533, i16* %l_1294, align 2
  %657 = load i16* %l_1294, align 2
  %conv1735 = sext i16 %657 to i32
  store i32 %conv1735, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %658 = load i32* @_ZL6g_1295, align 4
  store i32 %658, i32* @_ZL4g_48, align 4
  %659 = load i32* %l_1173, align 4
  %tobool1736 = icmp ne i32 %659, 0
  br i1 %tobool1736, label %if.then1737, label %if.end1738

if.then1737:                                      ; preds = %if.else1734
  br label %lbl_873

if.end1738:                                       ; preds = %if.else1734
  br label %if.end1739

if.end1739:                                       ; preds = %if.end1738
  store i16 -14, i16* %l_679, align 2
  br label %for.cond1740

for.cond1740:                                     ; preds = %for.inc1979, %if.end1739
  %660 = load i16* %l_679, align 2
  %conv1741 = zext i16 %660 to i32
  %cmp1742 = icmp ne i32 %conv1741, 53
  br i1 %cmp1742, label %for.body1743, label %for.end1981

for.body1743:                                     ; preds = %for.cond1740
  store i32 1, i32* %l_1306, align 4
  store i32 2053889505, i32* %l_1309, align 4
  store i32 -1230339688, i32* %l_1310, align 4
  store i16 0, i16* %l_1384, align 2
  store i32 0, i32* %i1744, align 4
  br label %for.cond1745

for.cond1745:                                     ; preds = %for.inc1750, %for.body1743
  %661 = load i32* %i1744, align 4
  %cmp1746 = icmp slt i32 %661, 4
  br i1 %cmp1746, label %for.body1747, label %for.end1752

for.body1747:                                     ; preds = %for.cond1745
  %662 = load i32* %i1744, align 4
  %idxprom1748 = sext i32 %662 to i64
  %arrayidx1749 = getelementptr inbounds [4 x i16]* %l_1352, i32 0, i64 %idxprom1748
  store i16 -6060, i16* %arrayidx1749, align 2
  br label %for.inc1750

for.inc1750:                                      ; preds = %for.body1747
  %663 = load i32* %i1744, align 4
  %inc1751 = add nsw i32 %663, 1
  store i32 %inc1751, i32* %i1744, align 4
  br label %for.cond1745

for.end1752:                                      ; preds = %for.cond1745
  store i32 0, i32* %l_659, align 4
  br label %for.cond1753

for.cond1753:                                     ; preds = %for.inc1880, %for.end1752
  %664 = load i32* %l_659, align 4
  %cmp1754 = icmp slt i32 %664, 3
  br i1 %cmp1754, label %for.body1755, label %for.end1882

for.body1755:                                     ; preds = %for.cond1753
  %665 = bitcast [7 x [6 x [5 x i32]]]* %l_1351 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %665, i8* bitcast ([7 x [6 x [5 x i32]]]* @_ZZL6func_1vE6l_1351 to i8*), i64 840, i32 16, i1 false)
  %666 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 7, i64 0), align 4
  %667 = load i32* @_ZL4g_48, align 4
  %xor1759 = xor i32 %667, %666
  store i32 %xor1759, i32* @_ZL4g_48, align 4
  %arrayidx1760 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 0
  %arrayidx1761 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx1760, i32 0, i64 4
  %arrayidx1762 = getelementptr inbounds [5 x i32]* %arrayidx1761, i32 0, i64 0
  %668 = load i32* %arrayidx1762, align 4
  %inc1763 = add i32 %668, 1
  store i32 %inc1763, i32* %arrayidx1762, align 4
  store i16 -11, i16* @_ZL4g_46, align 2
  br label %for.cond1764

for.cond1764:                                     ; preds = %for.inc1877, %for.body1755
  %669 = load i16* @_ZL4g_46, align 2
  %conv1765 = sext i16 %669 to i32
  %cmp1766 = icmp slt i32 %conv1765, -5
  br i1 %cmp1766, label %for.body1767, label %for.end1879

for.body1767:                                     ; preds = %for.cond1764
  store i32 7, i32* %l_1307, align 4
  %670 = bitcast [4 x i32]* %l_1308 to i8*
  call void @llvm.memset.p0i8.i64(i8* %670, i8 0, i64 16, i32 16, i1 false)
  store i32 -4, i32* %l_1334, align 4
  %671 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  store i32 %671, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 1), align 4
  %672 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %dec1769 = add i32 %672, -1
  store i32 %dec1769, i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %673 = load i16* @_ZL4g_60, align 2
  %conv1770 = zext i16 %673 to i32
  %674 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %tobool1771 = icmp ne i32 %674, 0
  br i1 %tobool1771, label %land.rhs1772, label %land.end1809

land.rhs1772:                                     ; preds = %for.body1767
  %call1773 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext 0, i32 2)
  %conv1774 = sext i16 %call1773 to i32
  %675 = load i16* @_ZL4g_56, align 2
  %conv1775 = sext i16 %675 to i32
  %or1776 = or i32 %conv1774, %conv1775
  %conv1777 = trunc i32 %or1776 to i16
  %call1778 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv1777, i32 1)
  %conv1779 = zext i16 %call1778 to i32
  %676 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv1780 = trunc i32 %676 to i16
  %677 = load i32* @_ZL5g_396, align 4
  %678 = load i32* %l_1031, align 4
  %679 = load i32* %l_1334, align 4
  %or1781 = or i32 %679, %678
  store i32 %or1781, i32* %l_1334, align 4
  %conv1782 = trunc i32 %or1781 to i16
  %call1783 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv1782, i32 0)
  %conv1784 = sext i16 %call1783 to i32
  %call1785 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %677, i32 %conv1784)
  %cmp1786 = icmp ugt i32 %call1785, -2
  %conv1787 = zext i1 %cmp1786 to i32
  %call1788 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv1780, i32 %conv1787)
  %conv1789 = zext i16 %call1788 to i32
  %or1790 = or i32 %conv1779, %conv1789
  %tobool1791 = icmp ne i32 %or1790, 0
  %lnot1792 = xor i1 %tobool1791, true
  %conv1793 = zext i1 %lnot1792 to i16
  %680 = load i32* %l_987, align 4
  %call1794 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv1793, i32 %680)
  %tobool1795 = icmp ne i16 %call1794, 0
  %lnot1796 = xor i1 %tobool1795, true
  %conv1797 = zext i1 %lnot1796 to i32
  %681 = load i32* %l_1293, align 4
  %call1798 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv1797, i32 %681)
  %tobool1799 = icmp ne i32 %call1798, 0
  br i1 %tobool1799, label %lor.end1802, label %lor.rhs1800

lor.rhs1800:                                      ; preds = %land.rhs1772
  %682 = load i32* %l_1306, align 4
  %tobool1801 = icmp ne i32 %682, 0
  br label %lor.end1802

lor.end1802:                                      ; preds = %lor.rhs1800, %land.rhs1772
  %683 = phi i1 [ true, %land.rhs1772 ], [ %tobool1801, %lor.rhs1800 ]
  %conv1803 = zext i1 %683 to i32
  %arrayidx1804 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 0
  %arrayidx1805 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx1804, i32 0, i64 7
  %arrayidx1806 = getelementptr inbounds [5 x i32]* %arrayidx1805, i32 0, i64 4
  %684 = load i32* %arrayidx1806, align 4
  %call1807 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv1803, i32 %684)
  %685 = load i32* %l_1307, align 4
  %cmp1808 = icmp sgt i32 %call1807, %685
  br label %land.end1809

land.end1809:                                     ; preds = %lor.end1802, %for.body1767
  %686 = phi i1 [ false, %for.body1767 ], [ %cmp1808, %lor.end1802 ]
  %conv1810 = zext i1 %686 to i32
  %cmp1811 = icmp ne i32 %conv1770, %conv1810
  %conv1812 = zext i1 %cmp1811 to i32
  %687 = load volatile i16* @_ZL5g_277, align 2
  %conv1813 = zext i16 %687 to i32
  %or1814 = or i32 %conv1812, %conv1813
  %call1815 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext 3465, i32 %or1814)
  %conv1816 = sext i16 %call1815 to i32
  %arrayidx1817 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx1818 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx1817, i32 0, i64 1
  %arrayidx1819 = getelementptr inbounds [1 x i32]* %arrayidx1818, i32 0, i64 0
  %688 = load i32* %arrayidx1819, align 4
  %xor1820 = xor i32 %688, %conv1816
  store i32 %xor1820, i32* %arrayidx1819, align 4
  %689 = load i32* %l_730, align 4
  %cmp1821 = icmp slt i32 %xor1820, %689
  %conv1822 = zext i1 %cmp1821 to i32
  %cmp1823 = icmp sgt i32 %conv1822, -5
  %conv1824 = zext i1 %cmp1823 to i32
  store i32 %conv1824, i32* @_ZL5g_859, align 4
  %690 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 1), align 4
  %conv1825 = trunc i32 %690 to i16
  %691 = load i32* %l_1258, align 4
  %or1826 = or i32 %691, 34363
  %call1827 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv1825, i32 %or1826)
  %692 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %693 = load i16* @_ZL4g_56, align 2
  %conv1828 = sext i16 %693 to i32
  %694 = load i16* %l_1193, align 2
  %conv1829 = zext i16 %694 to i32
  %695 = load i32* @_ZL3g_2, align 4
  %arrayidx1830 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx1831 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx1830, i32 0, i64 1
  %arrayidx1832 = getelementptr inbounds [6 x i32]* %arrayidx1831, i32 0, i64 5
  %696 = load i32* %arrayidx1832, align 4
  store i32 %696, i32* @_ZL5g_622, align 4
  %697 = load volatile i16* @_ZL5g_277, align 2
  %conv1833 = zext i16 %697 to i32
  %698 = load i32* %l_1293, align 4
  %call1834 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv1833, i32 %698)
  %cmp1835 = icmp uge i32 %696, %call1834
  %conv1836 = zext i1 %cmp1835 to i32
  %arrayidx1837 = getelementptr inbounds [7 x [6 x [5 x i32]]]* %l_1351, i32 0, i64 1
  %arrayidx1838 = getelementptr inbounds [6 x [5 x i32]]* %arrayidx1837, i32 0, i64 4
  %arrayidx1839 = getelementptr inbounds [5 x i32]* %arrayidx1838, i32 0, i64 2
  %699 = load i32* %arrayidx1839, align 4
  %cmp1840 = icmp sle i32 %conv1836, %699
  %conv1841 = zext i1 %cmp1840 to i32
  %cmp1842 = icmp sle i32 %695, %conv1841
  %conv1843 = zext i1 %cmp1842 to i32
  %700 = load i32* %l_1263, align 4
  %cmp1844 = icmp ne i32 %conv1843, %700
  %conv1845 = zext i1 %cmp1844 to i16
  %701 = load i32* %l_1310, align 4
  %conv1846 = trunc i32 %701 to i16
  %call1847 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv1845, i16 signext %conv1846)
  %conv1848 = sext i16 %call1847 to i32
  %cmp1849 = icmp eq i32 %conv1829, %conv1848
  %conv1850 = zext i1 %cmp1849 to i32
  %and1851 = and i32 %conv1828, %conv1850
  %arrayidx1852 = getelementptr inbounds [7 x [6 x [5 x i32]]]* %l_1351, i32 0, i64 2
  %arrayidx1853 = getelementptr inbounds [6 x [5 x i32]]* %arrayidx1852, i32 0, i64 0
  %arrayidx1854 = getelementptr inbounds [5 x i32]* %arrayidx1853, i32 0, i64 0
  store i32 %and1851, i32* %arrayidx1854, align 4
  %conv1855 = trunc i32 %and1851 to i16
  %702 = load i32* %l_1334, align 4
  %conv1856 = trunc i32 %702 to i16
  %call1857 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1855, i16 signext %conv1856)
  %703 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %conv1858 = trunc i32 %703 to i16
  %call1859 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call1857, i16 zeroext %conv1858)
  %conv1860 = zext i16 %call1859 to i32
  %704 = load i32* @_ZL5g_930, align 4
  %cmp1861 = icmp ne i32 %conv1860, %704
  %conv1862 = zext i1 %cmp1861 to i16
  store i16 %conv1862, i16* @_ZL4g_56, align 2
  %call1863 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv1862, i32 2)
  %conv1864 = sext i16 %call1863 to i32
  %705 = load i32* %l_1306, align 4
  %cmp1865 = icmp sle i32 %conv1864, %705
  %conv1866 = zext i1 %cmp1865 to i32
  %706 = load i16* @_ZL6g_1066, align 2
  %conv1867 = zext i16 %706 to i32
  %cmp1868 = icmp sle i32 %conv1866, %conv1867
  %conv1869 = zext i1 %cmp1868 to i32
  %707 = load i32* @_ZL5g_168, align 4
  %or1870 = or i32 %conv1869, %707
  %xor1871 = xor i32 %692, %or1870
  %conv1872 = trunc i32 %xor1871 to i16
  %call1873 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call1827, i16 signext %conv1872)
  %arrayidx1874 = getelementptr inbounds [4 x i16]* %l_1352, i32 0, i64 2
  store i16 %call1873, i16* %arrayidx1874, align 2
  %conv1875 = sext i16 %call1873 to i32
  %708 = load i32* @_ZL4g_48, align 4
  %or1876 = or i32 %708, %conv1875
  store i32 %or1876, i32* @_ZL4g_48, align 4
  br label %for.inc1877

for.inc1877:                                      ; preds = %land.end1809
  %709 = load i16* @_ZL4g_46, align 2
  %call1878 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %709, i16 signext 8)
  store i16 %call1878, i16* @_ZL4g_46, align 2
  br label %for.cond1764

for.end1879:                                      ; preds = %for.cond1764
  br label %for.inc1880

for.inc1880:                                      ; preds = %for.end1879
  %710 = load i32* %l_659, align 4
  %inc1881 = add nsw i32 %710, 1
  store i32 %inc1881, i32* %l_659, align 4
  br label %for.cond1753

for.end1882:                                      ; preds = %for.cond1753
  %711 = load i16* %l_662, align 2
  %conv1883 = sext i16 %711 to i32
  %712 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 4, i64 3), align 4
  %call1884 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 1)
  %cmp1885 = icmp ugt i32 %712, %call1884
  br i1 %cmp1885, label %lor.end1888, label %lor.rhs1886

lor.rhs1886:                                      ; preds = %for.end1882
  %713 = load i32* @_ZL5g_166, align 4
  %tobool1887 = icmp ne i32 %713, 0
  br label %lor.end1888

lor.end1888:                                      ; preds = %lor.rhs1886, %for.end1882
  %714 = phi i1 [ true, %for.end1882 ], [ %tobool1887, %lor.rhs1886 ]
  %conv1889 = zext i1 %714 to i16
  %arrayidx1890 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 4
  %arrayidx1891 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx1890, i32 0, i64 2
  %arrayidx1892 = getelementptr inbounds [6 x i32]* %arrayidx1891, i32 0, i64 2
  %715 = load i32* %arrayidx1892, align 4
  %or1893 = or i32 %715, 12067
  store i32 %or1893, i32* %arrayidx1892, align 4
  %conv1894 = trunc i32 %or1893 to i16
  %716 = load i32* %l_1031, align 4
  %717 = load i32* %l_1266, align 4
  %and1895 = and i32 %716, %717
  %conv1896 = trunc i32 %and1895 to i16
  %arrayidx1897 = getelementptr inbounds [4 x i16]* %l_858, i32 0, i64 3
  %718 = load i16* %arrayidx1897, align 2
  %conv1898 = sext i16 %718 to i32
  %call1899 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv1896, i32 %conv1898)
  %conv1900 = zext i16 %call1899 to i32
  %cmp1901 = icmp sge i32 8545, %conv1900
  %conv1902 = zext i1 %cmp1901 to i16
  %call1903 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv1902, i16 signext -23841)
  %conv1904 = sext i16 %call1903 to i32
  %719 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %cmp1905 = icmp ule i32 %conv1904, %719
  %conv1906 = zext i1 %cmp1905 to i32
  %720 = load i32* @_ZL6g_1295, align 4
  %and1907 = and i32 %conv1906, %720
  %arrayidx1908 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx1909 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx1908, i32 0, i64 1
  %arrayidx1910 = getelementptr inbounds [1 x i32]* %arrayidx1909, i32 0, i64 0
  %721 = load i32* %arrayidx1910, align 4
  %call1911 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %and1907, i32 %721)
  %conv1912 = trunc i32 %call1911 to i16
  %call1913 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1894, i16 signext %conv1912)
  %conv1914 = sext i16 %call1913 to i32
  %722 = load i32* @_ZL4g_48, align 4
  %cmp1915 = icmp eq i32 %conv1914, %722
  %conv1916 = zext i1 %cmp1915 to i32
  %call1917 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv1889, i32 %conv1916)
  %conv1918 = sext i16 %call1917 to i32
  %723 = load i32* @_ZL5g_166, align 4
  %cmp1919 = icmp eq i32 %conv1918, %723
  %conv1920 = zext i1 %cmp1919 to i16
  %call1921 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -10, i16 zeroext %conv1920)
  %conv1922 = zext i16 %call1921 to i32
  %724 = load i32* @_ZL6g_1021, align 4
  %call1923 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv1922, i32 %724)
  %cmp1924 = icmp sgt i32 %conv1883, %call1923
  br i1 %cmp1924, label %land.rhs1925, label %land.end1927

land.rhs1925:                                     ; preds = %lor.end1888
  %725 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 1), align 4
  %tobool1926 = icmp ne i32 %725, 0
  br label %land.end1927

land.end1927:                                     ; preds = %land.rhs1925, %lor.end1888
  %726 = phi i1 [ false, %lor.end1888 ], [ %tobool1926, %land.rhs1925 ]
  %conv1928 = zext i1 %726 to i16
  %call1929 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv1928, i16 zeroext -1120)
  %conv1930 = zext i16 %call1929 to i32
  %arrayidx1931 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 0
  store i32 %conv1930, i32* %arrayidx1931, align 4
  %727 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %conv1932 = trunc i32 %727 to i16
  %728 = load i16* @_ZL4g_46, align 2
  %conv1933 = sext i16 %728 to i32
  %729 = load i32* @_ZL5g_398, align 4
  %arrayidx1934 = getelementptr inbounds [4 x i16]* %l_1352, i32 0, i64 0
  %730 = load i16* %arrayidx1934, align 2
  %conv1935 = sext i16 %730 to i32
  %731 = load i32* @_ZL4g_55, align 4
  %xor1936 = xor i32 %conv1935, %731
  %arrayidx1937 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 1
  %arrayidx1938 = getelementptr inbounds [3 x i32]* %arrayidx1937, i32 0, i64 1
  %732 = load i32* %arrayidx1938, align 4
  %cmp1939 = icmp ne i32 %xor1936, %732
  %conv1940 = zext i1 %cmp1939 to i32
  %cmp1941 = icmp ne i32 %729, %conv1940
  %conv1942 = zext i1 %cmp1941 to i16
  %733 = load i16* %l_1384, align 2
  %conv1943 = sext i16 %733 to i32
  %call1944 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv1942, i32 %conv1943)
  %conv1945 = zext i16 %call1944 to i32
  %cmp1946 = icmp sle i32 -1, %conv1945
  %conv1947 = zext i1 %cmp1946 to i32
  %arrayidx1948 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 4
  %arrayidx1949 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx1948, i32 0, i64 1
  %arrayidx1950 = getelementptr inbounds [6 x i32]* %arrayidx1949, i32 0, i64 5
  %734 = load i32* %arrayidx1950, align 4
  %or1951 = or i32 %734, %conv1947
  store i32 %or1951, i32* %arrayidx1950, align 4
  %tobool1952 = icmp ne i32 %or1951, 0
  br i1 %tobool1952, label %land.rhs1953, label %land.end1955

land.rhs1953:                                     ; preds = %land.end1927
  %735 = load i16* @_ZL6g_1066, align 2
  %tobool1954 = icmp ne i16 %735, 0
  br label %land.end1955

land.end1955:                                     ; preds = %land.rhs1953, %land.end1927
  %736 = phi i1 [ false, %land.end1927 ], [ %tobool1954, %land.rhs1953 ]
  %conv1956 = zext i1 %736 to i32
  store i32 %conv1956, i32* %l_1293, align 4
  %and1957 = and i32 %conv1933, %conv1956
  %call1958 = call i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %and1957)
  %conv1959 = trunc i32 %call1958 to i16
  %call1960 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext 12963, i16 signext %conv1959)
  %conv1961 = sext i16 %call1960 to i32
  %cmp1962 = icmp sle i32 0, %conv1961
  %conv1963 = zext i1 %cmp1962 to i32
  %737 = load i32* %l_1306, align 4
  %cmp1964 = icmp sgt i32 %conv1963, %737
  %conv1965 = zext i1 %cmp1964 to i32
  %738 = load i32* @_ZL5g_930, align 4
  %cmp1966 = icmp ne i32 %conv1965, %738
  %conv1967 = zext i1 %cmp1966 to i32
  %cmp1968 = icmp ne i32 %conv1967, 4
  %conv1969 = zext i1 %cmp1968 to i32
  %cmp1970 = icmp sle i32 791716243, %conv1969
  %conv1971 = zext i1 %cmp1970 to i16
  %call1972 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv1971, i32 4)
  %call1973 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %call1972, i16 zeroext -16450)
  %arrayidx1974 = getelementptr inbounds [4 x i16]* %l_1352, i32 0, i64 0
  %739 = load i16* %arrayidx1974, align 2
  %conv1975 = sext i16 %739 to i32
  %call1976 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %call1973, i32 %conv1975)
  %call1977 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv1932, i16 signext %call1976)
  %conv1978 = sext i16 %call1977 to i32
  store i32 %conv1978, i32* %l_1166, align 4
  br label %for.inc1979

for.inc1979:                                      ; preds = %land.end1955
  %740 = load i16* %l_679, align 2
  %inc1980 = add i16 %740, 1
  store i16 %inc1980, i16* %l_679, align 2
  br label %for.cond1740

for.end1981:                                      ; preds = %for.cond1740
  %741 = load i32* @_ZL4g_33, align 4
  %742 = load i16* @_ZL5g_394, align 2
  %conv1982 = zext i16 %742 to i32
  %or1983 = or i32 %741, %conv1982
  store i32 %or1983, i32* @_ZL6g_1295, align 4
  store i32 0, i32* @_ZL5g_622, align 4
  br label %for.cond1984

for.cond1984:                                     ; preds = %for.inc2638, %for.end1981
  %743 = load i32* @_ZL5g_622, align 4
  %cmp1985 = icmp eq i32 %743, 1
  br i1 %cmp1985, label %for.body1986, label %for.end2640

for.body1986:                                     ; preds = %for.cond1984
  store i32 -4, i32* %l_1428, align 4
  store i16 2187, i16* %l_1465, align 2
  store i32 -3, i32* %l_1470, align 4
  store i32 0, i32* %l_1486, align 4
  store i32 656466666, i32* %l_1532, align 4
  store i32 -1, i32* %l_1590, align 4
  store i32 10, i32* @_ZL4g_33, align 4
  br label %for.cond1987

for.cond1987:                                     ; preds = %for.inc2143, %for.body1986
  %744 = load i32* @_ZL4g_33, align 4
  %cmp1988 = icmp ult i32 %744, 17
  br i1 %cmp1988, label %for.body1989, label %for.end2145

for.body1989:                                     ; preds = %for.cond1987
  store i16 -10, i16* %l_1429, align 2
  store i32 -849698366, i32* %l_1433, align 4
  %745 = bitcast [10 x [6 x [1 x i32]]]* %l_1451 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %745, i8* bitcast ([10 x [6 x [1 x i32]]]* @_ZZL6func_1vE6l_1451 to i8*), i64 240, i32 16, i1 false)
  %746 = load i32* @_ZL6g_1021, align 4
  %747 = load i32* @_ZL4g_33, align 4
  %748 = load i16* @_ZL6g_1066, align 2
  %dec1993 = add i16 %748, -1
  store i16 %dec1993, i16* @_ZL6g_1066, align 2
  %749 = load i16* %l_679, align 2
  %conv1994 = zext i16 %749 to i32
  %call1995 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %dec1993, i32 %conv1994)
  %750 = load i32* %l_704, align 4
  %751 = load i32* %l_730, align 4
  %752 = load i32* @_ZL6g_1295, align 4
  %cmp1996 = icmp eq i32 %751, %752
  %conv1997 = zext i1 %cmp1996 to i32
  %cmp1998 = icmp ne i32 1, %conv1997
  %conv1999 = zext i1 %cmp1998 to i16
  %753 = load i32* @_ZL5g_166, align 4
  %conv2000 = trunc i32 %753 to i16
  %call2001 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv1999, i16 signext %conv2000)
  %conv2002 = sext i16 %call2001 to i32
  %call2003 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %750, i32 %conv2002)
  %754 = load i32* %l_1428, align 4
  %cmp2004 = icmp ult i32 %call2003, %754
  %lnot2005 = xor i1 %cmp2004, true
  %conv2006 = zext i1 %lnot2005 to i32
  store i32 %conv2006, i32* %l_660, align 4
  %conv2007 = trunc i32 %conv2006 to i16
  %755 = load i16* @_ZL4g_56, align 2
  %call2008 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2007, i16 zeroext %755)
  %call2009 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %call2008, i16 signext 18417)
  %conv2010 = sext i16 %call2009 to i32
  %756 = load i32* @_ZL5g_166, align 4
  %call2011 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv2010, i32 %756)
  %757 = load i32* %l_1428, align 4
  %xor2012 = xor i32 %call2011, %757
  %tobool2013 = icmp ne i32 %xor2012, 0
  br i1 %tobool2013, label %lor.end2016, label %lor.rhs2014

lor.rhs2014:                                      ; preds = %for.body1989
  %758 = load i32* @_ZL5g_398, align 4
  %tobool2015 = icmp ne i32 %758, 0
  br label %lor.end2016

lor.end2016:                                      ; preds = %lor.rhs2014, %for.body1989
  %759 = phi i1 [ true, %for.body1989 ], [ %tobool2015, %lor.rhs2014 ]
  %conv2017 = zext i1 %759 to i16
  %760 = load i16* %l_662, align 2
  %conv2018 = sext i16 %760 to i32
  %call2019 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv2017, i32 %conv2018)
  %arrayidx2020 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 6
  %761 = load i32* %arrayidx2020, align 4
  %call2021 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %call2019, i32 %761)
  %762 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 3, i64 0, i64 0), align 4
  %conv2022 = trunc i32 %762 to i16
  %call2023 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call2021, i16 zeroext %conv2022)
  %763 = load i16* %l_1429, align 2
  %conv2024 = sext i16 %763 to i32
  %call2025 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %call2023, i32 %conv2024)
  %call2026 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call1995, i16 signext %call2025)
  %conv2027 = sext i16 %call2026 to i32
  %764 = load i16* @_ZL6g_1430, align 2
  %conv2028 = sext i16 %764 to i32
  %xor2029 = xor i32 %conv2027, %conv2028
  %arrayidx2030 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 1
  %arrayidx2031 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2030, i32 0, i64 0
  %arrayidx2032 = getelementptr inbounds [1 x i32]* %arrayidx2031, i32 0, i64 0
  %765 = load i32* %arrayidx2032, align 4
  %cmp2033 = icmp sgt i32 %xor2029, %765
  %conv2034 = zext i1 %cmp2033 to i16
  %766 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 4, i64 4), align 4
  %call2035 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv2034, i32 %766)
  %conv2036 = sext i16 %call2035 to i32
  %cmp2037 = icmp ugt i32 %747, %conv2036
  %conv2038 = zext i1 %cmp2037 to i32
  %767 = load i32* %l_1300, align 4
  %cmp2039 = icmp sgt i32 %conv2038, %767
  %conv2040 = zext i1 %cmp2039 to i32
  %arrayidx2041 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 0
  %arrayidx2042 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2041, i32 0, i64 1
  %arrayidx2043 = getelementptr inbounds [1 x i32]* %arrayidx2042, i32 0, i64 0
  %768 = load i32* %arrayidx2043, align 4
  %cmp2044 = icmp sle i32 %conv2040, %768
  br i1 %cmp2044, label %lor.end2047, label %lor.rhs2045

lor.rhs2045:                                      ; preds = %lor.end2016
  %769 = load i32* %l_1428, align 4
  %tobool2046 = icmp ne i32 %769, 0
  br label %lor.end2047

lor.end2047:                                      ; preds = %lor.rhs2045, %lor.end2016
  %770 = phi i1 [ true, %lor.end2016 ], [ %tobool2046, %lor.rhs2045 ]
  %conv2048 = zext i1 %770 to i32
  %771 = load i32* %l_1258, align 4
  %call2049 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv2048, i32 %771)
  %cmp2050 = icmp ne i32 %746, %call2049
  %conv2051 = zext i1 %cmp2050 to i32
  %or2052 = or i32 %conv2051, -1
  %772 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 2), align 4
  %call2053 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %or2052, i32 %772)
  %arrayidx2054 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx2055 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2054, i32 0, i64 1
  %arrayidx2056 = getelementptr inbounds [1 x i32]* %arrayidx2055, i32 0, i64 0
  %773 = load i32* %arrayidx2056, align 4
  %and2057 = and i32 %call2053, %773
  %conv2058 = trunc i32 %and2057 to i16
  %call2059 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv2058, i32 13)
  %774 = load i16* %l_1429, align 2
  %call2060 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call2059, i16 zeroext %774)
  %tobool2061 = icmp ne i16 %call2060, 0
  br i1 %tobool2061, label %lor.end2063, label %lor.rhs2062

lor.rhs2062:                                      ; preds = %lor.end2047
  br label %lor.end2063

lor.end2063:                                      ; preds = %lor.rhs2062, %lor.end2047
  %775 = phi i1 [ true, %lor.end2047 ], [ true, %lor.rhs2062 ]
  %conv2064 = zext i1 %775 to i16
  %call2065 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv2064, i16 zeroext 0)
  %call2066 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %call2065, i16 zeroext 1)
  %conv2067 = zext i16 %call2066 to i32
  %and2068 = and i32 -1320747191, %conv2067
  %cmp2069 = icmp ugt i32 -7, %and2068
  br i1 %cmp2069, label %if.then2070, label %if.else2071

if.then2070:                                      ; preds = %lor.end2063
  %776 = load i32* @_ZL4g_36, align 4
  store i32 %776, i32* %retval
  br label %return

if.else2071:                                      ; preds = %lor.end2063
  %777 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %tobool2072 = icmp ne i32 %777, 0
  br i1 %tobool2072, label %if.then2073, label %if.end2074

if.then2073:                                      ; preds = %if.else2071
  br label %for.end2145

if.end2074:                                       ; preds = %if.else2071
  %778 = load i32* @_ZL4g_33, align 4
  %tobool2075 = icmp ne i32 %778, 0
  br i1 %tobool2075, label %if.then2076, label %if.end2077

if.then2076:                                      ; preds = %if.end2074
  br label %for.inc2143

if.end2077:                                       ; preds = %if.end2074
  br label %if.end2078

if.end2078:                                       ; preds = %if.end2077
  store i16 -7, i16* @_ZL6g_1430, align 2
  br label %for.cond2079

for.cond2079:                                     ; preds = %for.inc2087, %if.end2078
  %779 = load i16* @_ZL6g_1430, align 2
  %conv2080 = sext i16 %779 to i32
  %cmp2081 = icmp sle i32 %conv2080, 1
  br i1 %cmp2081, label %for.body2082, label %for.end2089

for.body2082:                                     ; preds = %for.cond2079
  %arrayidx2083 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 8
  %780 = load i32* %arrayidx2083, align 4
  %tobool2084 = icmp ne i32 %780, 0
  br i1 %tobool2084, label %if.then2085, label %if.end2086

if.then2085:                                      ; preds = %for.body2082
  br label %for.end2089

if.end2086:                                       ; preds = %for.body2082
  br label %for.inc2087

for.inc2087:                                      ; preds = %if.end2086
  %781 = load i16* @_ZL6g_1430, align 2
  %inc2088 = add i16 %781, 1
  store i16 %inc2088, i16* @_ZL6g_1430, align 2
  br label %for.cond2079

for.end2089:                                      ; preds = %if.then2085, %for.cond2079
  %782 = load i32* %l_1433, align 4
  %xor2090 = xor i32 %782, 9
  store i32 %xor2090, i32* %l_1433, align 4
  %783 = load volatile i16* @_ZL6g_1442, align 2
  %conv2091 = zext i16 %783 to i32
  %784 = load i32* %l_1197, align 4
  %tobool2092 = icmp ne i32 %784, 0
  br i1 %tobool2092, label %lor.end2095, label %lor.rhs2093

lor.rhs2093:                                      ; preds = %for.end2089
  %785 = load i32* %l_1428, align 4
  %tobool2094 = icmp ne i32 %785, 0
  br label %lor.end2095

lor.end2095:                                      ; preds = %lor.rhs2093, %for.end2089
  %786 = phi i1 [ true, %for.end2089 ], [ %tobool2094, %lor.rhs2093 ]
  %conv2096 = zext i1 %786 to i32
  %call2097 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv2091, i32 %conv2096)
  %arrayidx2098 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 2
  %787 = load i32* %arrayidx2098, align 4
  %conv2099 = trunc i32 %787 to i16
  %788 = load i32* %l_1173, align 4
  %conv2100 = trunc i32 %788 to i16
  %call2101 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2099, i16 zeroext %conv2100)
  %conv2102 = zext i16 %call2101 to i32
  %789 = load i16* @_ZL6g_1430, align 2
  %conv2103 = sext i16 %789 to i32
  %790 = load i32* %l_1433, align 4
  %791 = load i16* @_ZL4g_60, align 2
  %conv2104 = zext i16 %791 to i32
  %and2105 = and i32 %conv2104, %790
  %conv2106 = trunc i32 %and2105 to i16
  store i16 %conv2106, i16* @_ZL4g_60, align 2
  %conv2107 = zext i16 %conv2106 to i32
  %cmp2108 = icmp sgt i32 %conv2103, %conv2107
  br i1 %cmp2108, label %land.rhs2109, label %land.end2111

land.rhs2109:                                     ; preds = %lor.end2095
  %792 = load i16* @_ZL6g_1430, align 2
  %tobool2110 = icmp ne i16 %792, 0
  br label %land.end2111

land.end2111:                                     ; preds = %land.rhs2109, %lor.end2095
  %793 = phi i1 [ false, %lor.end2095 ], [ %tobool2110, %land.rhs2109 ]
  %conv2112 = zext i1 %793 to i32
  %cmp2113 = icmp ule i32 %conv2112, -1446870343
  %conv2114 = zext i1 %cmp2113 to i32
  %cmp2115 = icmp sle i32 %conv2102, %conv2114
  %conv2116 = zext i1 %cmp2115 to i32
  %arrayidx2117 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 2
  %arrayidx2118 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx2117, i32 0, i64 1
  %arrayidx2119 = getelementptr inbounds [6 x i32]* %arrayidx2118, i32 0, i64 1
  %794 = load i32* %arrayidx2119, align 4
  %xor2120 = xor i32 %794, %conv2116
  store i32 %xor2120, i32* %arrayidx2119, align 4
  %conv2121 = trunc i32 %xor2120 to i16
  %call2122 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv2121, i32 6)
  %conv2123 = sext i16 %call2122 to i32
  %795 = load i32* @_ZL4g_48, align 4
  %call2124 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv2123, i32 %795)
  %cmp2125 = icmp sgt i32 %call2097, %call2124
  %conv2126 = zext i1 %cmp2125 to i32
  %796 = load i32* @_ZL4g_33, align 4
  %call2127 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv2126, i32 %796)
  %797 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp2128 = icmp ult i32 %call2127, %797
  %conv2129 = zext i1 %cmp2128 to i32
  %798 = load i32* %l_1428, align 4
  %call2130 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv2129, i32 %798)
  %cmp2131 = icmp ne i32 5, %call2130
  br i1 %cmp2131, label %land.rhs2132, label %land.end2134

land.rhs2132:                                     ; preds = %land.end2111
  %799 = load i32* @_ZL5g_930, align 4
  %tobool2133 = icmp ne i32 %799, 0
  br label %land.end2134

land.end2134:                                     ; preds = %land.rhs2132, %land.end2111
  %800 = phi i1 [ false, %land.end2111 ], [ %tobool2133, %land.rhs2132 ]
  %conv2135 = zext i1 %800 to i32
  %arrayidx2136 = getelementptr inbounds [10 x [6 x [1 x i32]]]* %l_1451, i32 0, i64 3
  %arrayidx2137 = getelementptr inbounds [6 x [1 x i32]]* %arrayidx2136, i32 0, i64 3
  %arrayidx2138 = getelementptr inbounds [1 x i32]* %arrayidx2137, i32 0, i64 0
  %801 = load i32* %arrayidx2138, align 4
  %and2139 = and i32 %801, %conv2135
  store i32 %and2139, i32* %arrayidx2138, align 4
  %conv2140 = trunc i32 %and2139 to i16
  %call2141 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv2140, i16 zeroext -28657)
  %conv2142 = zext i16 %call2141 to i32
  store i32 %conv2142, i32* @_ZL6g_1295, align 4
  br label %for.inc2143

for.inc2143:                                      ; preds = %land.end2134, %if.then2076
  %802 = load i32* @_ZL4g_33, align 4
  %call2144 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %802, i32 5)
  store i32 %call2144, i32* @_ZL4g_33, align 4
  br label %for.cond1987

for.end2145:                                      ; preds = %if.then2073, %for.cond1987
  %arrayidx2146 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 6
  %803 = load i32* %arrayidx2146, align 4
  %call2147 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext -10, i32 15)
  %conv2148 = zext i16 %call2147 to i32
  %and2149 = and i32 %803, %conv2148
  %conv2150 = trunc i32 %and2149 to i16
  %804 = load i16* @_ZL5g_394, align 2
  store i16 %804, i16* %l_1465, align 2
  %conv2151 = sext i16 %804 to i32
  %805 = load i32* @_ZL4g_33, align 4
  %cmp2152 = icmp ult i32 %conv2151, %805
  %conv2153 = zext i1 %cmp2152 to i32
  %806 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 0), align 4
  %807 = load i32* @_ZL5g_168, align 4
  %arrayidx2154 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx2155 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2154, i32 0, i64 1
  %arrayidx2156 = getelementptr inbounds [1 x i32]* %arrayidx2155, i32 0, i64 0
  %808 = load i32* %arrayidx2156, align 4
  %cmp2157 = icmp ult i32 %807, %808
  %conv2158 = zext i1 %cmp2157 to i32
  %809 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 4), align 4
  %cmp2159 = icmp eq i32 %conv2158, %809
  %conv2160 = zext i1 %cmp2159 to i32
  %or2161 = or i32 %806, %conv2160
  %810 = load i32* @_ZL5g_168, align 4
  %cmp2162 = icmp eq i32 %or2161, %810
  %conv2163 = zext i1 %cmp2162 to i32
  %or2164 = or i32 -2, %conv2163
  %cmp2165 = icmp sle i32 %conv2153, %or2164
  %conv2166 = zext i1 %cmp2165 to i32
  %811 = load i32* %l_1428, align 4
  %or2167 = or i32 %811, %conv2166
  store i32 %or2167, i32* %l_1428, align 4
  %conv2168 = trunc i32 %or2167 to i16
  %812 = load i16* @_ZL4g_60, align 2
  %call2169 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv2168, i16 signext %812)
  %conv2170 = sext i16 %call2169 to i32
  store i32 %conv2170, i32* %l_820, align 4
  %813 = load i32* %l_1470, align 4
  %and2171 = and i32 %conv2170, %813
  %xor2172 = xor i32 %and2171, -9
  %conv2173 = trunc i32 %xor2172 to i16
  %call2174 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv2173)
  %814 = load i16* @_ZL6g_1430, align 2
  %call2175 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %call2174, i16 signext %814)
  %conv2176 = sext i16 %call2175 to i32
  %815 = load i32* %l_676, align 4
  %cmp2177 = icmp sge i32 %conv2176, %815
  %conv2178 = zext i1 %cmp2177 to i16
  %call2179 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext -23638, i16 signext %conv2178)
  %conv2180 = sext i16 %call2179 to i32
  %conv2181 = trunc i32 %conv2180 to i16
  %call2182 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv2150, i16 signext %conv2181)
  %conv2183 = sext i16 %call2182 to i32
  %or2184 = or i32 %conv2183, 1
  %816 = load i32* @_ZL6g_1021, align 4
  %cmp2185 = icmp eq i32 %or2184, %816
  %conv2186 = zext i1 %cmp2185 to i32
  %817 = load i32* %l_1263, align 4
  %cmp2187 = icmp ne i32 %conv2186, %817
  %conv2188 = zext i1 %cmp2187 to i32
  %cmp2189 = icmp eq i32 %conv2188, 961873182
  %conv2190 = zext i1 %cmp2189 to i32
  %818 = load i32* @_ZL5g_398, align 4
  %xor2191 = xor i32 %conv2190, %818
  %arrayidx2192 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 1
  %arrayidx2193 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2192, i32 0, i64 0
  %arrayidx2194 = getelementptr inbounds [1 x i32]* %arrayidx2193, i32 0, i64 0
  %819 = load i32* %arrayidx2194, align 4
  %and2195 = and i32 %xor2191, %819
  store i32 %and2195, i32* @_ZL3g_2, align 4
  store i32 7, i32* %l_1293, align 4
  br i1 true, label %if.then2196, label %if.else2292

if.then2196:                                      ; preds = %for.end2145
  store i32 -1, i32* %l_1478, align 4
  %820 = load i16* @_ZL4g_46, align 2
  %conv2197 = sext i16 %820 to i32
  %821 = load i16* @_ZL4g_46, align 2
  %conv2198 = sext i16 %821 to i32
  %or2199 = or i32 %conv2198, 1
  %822 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 3), align 4
  %conv2200 = trunc i32 %822 to i16
  %call2201 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv2200, i32 14)
  %conv2202 = zext i16 %call2201 to i32
  %823 = load i16* @_ZL4g_60, align 2
  %conv2203 = zext i16 %823 to i32
  %cmp2204 = icmp slt i32 %conv2202, %conv2203
  %conv2205 = zext i1 %cmp2204 to i32
  %and2206 = and i32 %or2199, %conv2205
  %cmp2207 = icmp sgt i32 %conv2197, %and2206
  %conv2208 = zext i1 %cmp2207 to i16
  %824 = load i32* @_ZL6g_1295, align 4
  %conv2209 = trunc i32 %824 to i16
  %call2210 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext 1, i16 signext %conv2209)
  %conv2211 = sext i16 %call2210 to i32
  %825 = load i32* @_ZL5g_168, align 4
  %cmp2212 = icmp ult i32 %conv2211, %825
  %conv2213 = zext i1 %cmp2212 to i32
  %826 = load i32* %l_1428, align 4
  %cmp2214 = icmp eq i32 %conv2213, %826
  %conv2215 = zext i1 %cmp2214 to i32
  %827 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp2216 = icmp ult i32 %conv2215, %827
  %lnot2217 = xor i1 %cmp2216, true
  %conv2218 = zext i1 %lnot2217 to i16
  %828 = load i32* %l_1293, align 4
  %conv2219 = trunc i32 %828 to i16
  %call2220 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2218, i16 zeroext %conv2219)
  %conv2221 = zext i16 %call2220 to i32
  %call2222 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv2208, i32 %conv2221)
  %829 = load i32* %l_1470, align 4
  %conv2223 = trunc i32 %829 to i16
  %call2224 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %call2222, i16 signext %conv2223)
  %conv2225 = sext i16 %call2224 to i32
  %830 = load i32* %l_1486, align 4
  %call2226 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv2225, i32 %830)
  store i32 %call2226, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call2227 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext 352, i32 3)
  %831 = load i32* %l_1478, align 4
  %832 = load i32* %l_1478, align 4
  %conv2228 = trunc i32 %832 to i16
  %833 = load i32* @_ZL4g_48, align 4
  %conv2229 = trunc i32 %833 to i16
  %call2230 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv2229, i32 0)
  %conv2231 = sext i16 %call2230 to i32
  %834 = load i16* @_ZL6g_1430, align 2
  %conv2232 = sext i16 %834 to i32
  %xor2233 = xor i32 %conv2231, %conv2232
  %conv2234 = trunc i32 %xor2233 to i16
  %call2235 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv2228, i16 signext %conv2234)
  %conv2236 = sext i16 %call2235 to i32
  %cmp2237 = icmp sge i32 %831, %conv2236
  %conv2238 = zext i1 %cmp2237 to i32
  %and2239 = and i32 %conv2238, 12462
  %conv2240 = trunc i32 %and2239 to i16
  %call2241 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call2227, i16 zeroext %conv2240)
  %conv2242 = zext i16 %call2241 to i32
  store i32 %conv2242, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %835 = load i16* %l_679, align 2
  %tobool2243 = icmp ne i16 %835, 0
  br i1 %tobool2243, label %lor.end2280, label %lor.rhs2244

lor.rhs2244:                                      ; preds = %if.then2196
  %836 = load i32* @_ZL5g_396, align 4
  %tobool2245 = icmp ne i32 %836, 0
  br i1 %tobool2245, label %lor.end2247, label %lor.rhs2246

lor.rhs2246:                                      ; preds = %lor.rhs2244
  br label %lor.end2247

lor.end2247:                                      ; preds = %lor.rhs2246, %lor.rhs2244
  %837 = phi i1 [ true, %lor.rhs2244 ], [ true, %lor.rhs2246 ]
  %conv2248 = zext i1 %837 to i32
  %838 = load i16* %l_662, align 2
  %conv2249 = sext i16 %838 to i32
  %xor2250 = xor i32 %conv2248, %conv2249
  %839 = load i32* %l_1478, align 4
  %tobool2251 = icmp ne i32 %839, 0
  br i1 %tobool2251, label %land.rhs2252, label %land.end2264

land.rhs2252:                                     ; preds = %lor.end2247
  %840 = load i32* %l_1478, align 4
  %and2253 = and i32 %840, 1
  %conv2254 = trunc i32 %and2253 to i16
  %call2255 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv2254, i16 signext 11149)
  %conv2256 = sext i16 %call2255 to i32
  %841 = load i32* %l_953, align 4
  %and2257 = and i32 %conv2256, %841
  %842 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp2258 = icmp ult i32 %and2257, %842
  %conv2259 = zext i1 %cmp2258 to i32
  %843 = load i32* @_ZL5g_398, align 4
  %cmp2260 = icmp ne i32 %conv2259, %843
  %conv2261 = zext i1 %cmp2260 to i32
  %call2262 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv2261, i32 1604222287)
  %tobool2263 = icmp ne i32 %call2262, 0
  br label %land.end2264

land.end2264:                                     ; preds = %land.rhs2252, %lor.end2247
  %844 = phi i1 [ false, %lor.end2247 ], [ %tobool2263, %land.rhs2252 ]
  %conv2265 = zext i1 %844 to i32
  %845 = load i16* %l_662, align 2
  %conv2266 = sext i16 %845 to i32
  %cmp2267 = icmp sge i32 %conv2265, %conv2266
  %conv2268 = zext i1 %cmp2267 to i16
  %arrayidx2269 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx2270 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2269, i32 0, i64 1
  %arrayidx2271 = getelementptr inbounds [1 x i32]* %arrayidx2270, i32 0, i64 0
  %846 = load i32* %arrayidx2271, align 4
  %conv2272 = trunc i32 %846 to i16
  %call2273 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv2268, i16 signext %conv2272)
  %call2274 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call2273, i16 signext 19528)
  %conv2275 = sext i16 %call2274 to i32
  %cmp2276 = icmp sge i32 %xor2250, %conv2275
  %conv2277 = zext i1 %cmp2276 to i32
  store i32 %conv2277, i32* %l_1478, align 4
  %or2278 = or i32 -1439725020, %conv2277
  %tobool2279 = icmp ne i32 %or2278, 0
  br label %lor.end2280

lor.end2280:                                      ; preds = %land.end2264, %if.then2196
  %847 = phi i1 [ true, %if.then2196 ], [ %tobool2279, %land.end2264 ]
  %conv2281 = zext i1 %847 to i32
  %arrayidx2282 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 6
  store i32 %conv2281, i32* %arrayidx2282, align 4
  %arrayidx2283 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 7
  %arrayidx2284 = getelementptr inbounds [3 x i32]* %arrayidx2283, i32 0, i64 0
  %848 = load i32* %arrayidx2284, align 4
  %tobool2285 = icmp ne i32 %848, 0
  br i1 %tobool2285, label %land.rhs2286, label %land.end2288

land.rhs2286:                                     ; preds = %lor.end2280
  %849 = load volatile i16* @_ZL6g_1442, align 2
  %tobool2287 = icmp ne i16 %849, 0
  br label %land.end2288

land.end2288:                                     ; preds = %land.rhs2286, %lor.end2280
  %850 = phi i1 [ false, %lor.end2280 ], [ %tobool2287, %land.rhs2286 ]
  %conv2289 = zext i1 %850 to i16
  %arrayidx2290 = getelementptr inbounds [6 x [4 x i16]]* %l_1503, i32 0, i64 5
  %arrayidx2291 = getelementptr inbounds [4 x i16]* %arrayidx2290, i32 0, i64 1
  store i16 %conv2289, i16* %arrayidx2291, align 2
  br label %if.end2636

if.else2292:                                      ; preds = %for.end2145
  %851 = bitcast [4 x i32]* %l_1514 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %851, i8* bitcast ([4 x i32]* @_ZZL6func_1vE6l_1514 to i8*), i64 16, i32 16, i1 false)
  store i32 1610840006, i32* %l_1614, align 4
  %arrayidx2294 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 0
  %arrayidx2295 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2294, i32 0, i64 1
  %arrayidx2296 = getelementptr inbounds [1 x i32]* %arrayidx2295, i32 0, i64 0
  %852 = load i32* %arrayidx2296, align 4
  %cmp2297 = icmp ne i32 -3, %852
  br i1 %cmp2297, label %land.rhs2298, label %land.end2300

land.rhs2298:                                     ; preds = %if.else2292
  %853 = load i32* %l_1293, align 4
  %tobool2299 = icmp ne i32 %853, 0
  br label %land.end2300

land.end2300:                                     ; preds = %land.rhs2298, %if.else2292
  %854 = phi i1 [ false, %if.else2292 ], [ %tobool2299, %land.rhs2298 ]
  %conv2301 = zext i1 %854 to i32
  %855 = load i32* @_ZL4g_55, align 4
  %cmp2302 = icmp sle i32 %conv2301, %855
  %conv2303 = zext i1 %cmp2302 to i32
  %856 = load i32* %l_1428, align 4
  %cmp2304 = icmp sge i32 %conv2303, %856
  %conv2305 = zext i1 %cmp2304 to i32
  %and2306 = and i32 %conv2305, -3
  %857 = load i32* @_ZL5g_166, align 4
  %858 = load i32* %l_1263, align 4
  %conv2307 = trunc i32 %858 to i16
  store i16 %conv2307, i16* @_ZL6g_1066, align 2
  %conv2308 = zext i16 %conv2307 to i32
  %859 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 2), align 4
  %and2309 = and i32 %conv2308, %859
  %conv2310 = trunc i32 %and2309 to i16
  %arrayidx2311 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx2312 = getelementptr inbounds [3 x i32]* %arrayidx2311, i32 0, i64 2
  %860 = load i32* %arrayidx2312, align 4
  %call2313 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv2310, i32 %860)
  %conv2314 = zext i16 %call2313 to i32
  %and2315 = and i32 %conv2314, 1004543970
  %tobool2316 = icmp ne i32 %and2315, 0
  br i1 %tobool2316, label %lor.end2320, label %lor.rhs2317

lor.rhs2317:                                      ; preds = %land.end2300
  %arrayidx2318 = getelementptr inbounds [4 x i32]* %l_1514, i32 0, i64 3
  %861 = load i32* %arrayidx2318, align 4
  %tobool2319 = icmp ne i32 %861, 0
  br label %lor.end2320

lor.end2320:                                      ; preds = %lor.rhs2317, %land.end2300
  %862 = phi i1 [ true, %land.end2300 ], [ %tobool2319, %lor.rhs2317 ]
  %conv2321 = zext i1 %862 to i32
  %and2322 = and i32 %857, %conv2321
  %tobool2323 = icmp ne i32 %and2322, 0
  br i1 %tobool2323, label %lor.end2325, label %lor.rhs2324

lor.rhs2324:                                      ; preds = %lor.end2320
  br label %lor.end2325

lor.end2325:                                      ; preds = %lor.rhs2324, %lor.end2320
  %863 = phi i1 [ true, %lor.end2320 ], [ true, %lor.rhs2324 ]
  %conv2326 = zext i1 %863 to i32
  %call2327 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv2326, i32 724491031)
  %call2328 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %call2327, i32 -348879389)
  %864 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 3), align 4
  %or2329 = or i32 %call2328, %864
  %tobool2330 = icmp ne i32 %or2329, 0
  br i1 %tobool2330, label %land.rhs2331, label %land.end2333

land.rhs2331:                                     ; preds = %lor.end2325
  %865 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %tobool2332 = icmp ne i32 %865, 0
  br label %land.end2333

land.end2333:                                     ; preds = %land.rhs2331, %lor.end2325
  %866 = phi i1 [ false, %lor.end2325 ], [ %tobool2332, %land.rhs2331 ]
  %conv2334 = zext i1 %866 to i32
  %or2335 = or i32 %and2306, %conv2334
  %867 = load i32* @_ZL5g_615, align 4
  %call2336 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %or2335, i32 %867)
  %conv2337 = trunc i32 %call2336 to i16
  %arrayidx2338 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 6
  %868 = load i32* %arrayidx2338, align 4
  %conv2339 = trunc i32 %868 to i16
  %call2340 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv2337, i16 zeroext %conv2339)
  %conv2341 = zext i16 %call2340 to i32
  %869 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 2), align 4
  %cmp2342 = icmp uge i32 %conv2341, %869
  %conv2343 = zext i1 %cmp2342 to i32
  %870 = load i32* %l_1486, align 4
  %xor2344 = xor i32 %870, %conv2343
  store i32 %xor2344, i32* %l_1486, align 4
  %871 = load i32* @_ZL4g_55, align 4
  %872 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %cmp2345 = icmp ugt i32 %872, -1
  %conv2346 = zext i1 %cmp2345 to i32
  %873 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %conv2347 = trunc i32 %873 to i16
  %arrayidx2348 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx2349 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2348, i32 0, i64 0
  %arrayidx2350 = getelementptr inbounds [1 x i32]* %arrayidx2349, i32 0, i64 0
  %874 = load i32* %arrayidx2350, align 4
  %conv2351 = trunc i32 %874 to i16
  %875 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %876 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %tobool2352 = icmp ne i32 %876, 0
  br i1 %tobool2352, label %lor.end2361, label %lor.rhs2353

lor.rhs2353:                                      ; preds = %land.end2333
  %877 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %arrayidx2354 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx2355 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx2354, i32 0, i64 4
  %arrayidx2356 = getelementptr inbounds [6 x i32]* %arrayidx2355, i32 0, i64 5
  store i32 %877, i32* %arrayidx2356, align 4
  %conv2357 = trunc i32 %877 to i16
  %call2358 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv2357)
  %878 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %call2359 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %call2358, i32 %878)
  %tobool2360 = icmp ne i16 %call2359, 0
  br label %lor.end2361

lor.end2361:                                      ; preds = %lor.rhs2353, %land.end2333
  %879 = phi i1 [ true, %land.end2333 ], [ %tobool2360, %lor.rhs2353 ]
  %conv2362 = zext i1 %879 to i32
  %880 = load i32* @_ZL6g_1021, align 4
  %and2363 = and i32 %880, %conv2362
  store i32 %and2363, i32* @_ZL6g_1021, align 4
  %call2364 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %and2363, i32 0)
  store i32 %call2364, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 0), align 4
  %cmp2365 = icmp eq i32 %call2364, 1
  %conv2366 = zext i1 %cmp2365 to i32
  %cmp2367 = icmp ule i32 %875, %conv2366
  %conv2368 = zext i1 %cmp2367 to i32
  %cmp2369 = icmp ult i32 %conv2368, -1
  %conv2370 = zext i1 %cmp2369 to i32
  %881 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 3, i64 0, i64 1), align 4
  %cmp2371 = icmp sge i32 %conv2370, %881
  %conv2372 = zext i1 %cmp2371 to i32
  %or2373 = or i32 %conv2372, -7
  %882 = load i32* %l_1428, align 4
  %xor2374 = xor i32 %or2373, %882
  %conv2375 = trunc i32 %xor2374 to i16
  %call2376 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv2351, i16 signext %conv2375)
  %call2377 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv2347, i16 signext %call2376)
  %883 = load i32* %l_820, align 4
  %call2378 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %call2377, i32 %883)
  %884 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv2379 = trunc i32 %884 to i16
  %call2380 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %call2378, i16 signext %conv2379)
  %conv2381 = sext i16 %call2380 to i32
  %xor2382 = xor i32 %conv2346, %conv2381
  %xor2383 = xor i32 %871, %xor2382
  %conv2384 = trunc i32 %xor2383 to i16
  %call2385 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv2384, i32 13)
  %conv2386 = zext i16 %call2385 to i32
  %cmp2387 = icmp eq i32 -1, %conv2386
  %conv2388 = zext i1 %cmp2387 to i32
  %885 = load i32* %l_1532, align 4
  %call2389 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv2388, i32 %885)
  %886 = load i32* %l_1293, align 4
  %and2390 = and i32 %886, %call2389
  store i32 %and2390, i32* %l_1293, align 4
  store i32 4, i32* %l_1470, align 4
  br label %for.cond2391

for.cond2391:                                     ; preds = %for.inc2571, %lor.end2361
  %887 = load i32* %l_1470, align 4
  %cmp2392 = icmp sge i32 %887, 0
  br i1 %cmp2392, label %for.body2393, label %for.end2573

for.body2393:                                     ; preds = %for.cond2391
  %888 = bitcast [8 x i32]* %l_1562 to i8*
  call void @llvm.memset.p0i8.i64(i8* %888, i8 0, i64 32, i32 16, i1 false)
  store i32 -2, i32* %l_1577, align 4
  %889 = load i32* %l_1470, align 4
  %add2395 = add nsw i32 %889, 1
  %idxprom2396 = sext i32 %add2395 to i64
  %arrayidx2397 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 %idxprom2396
  %890 = load i32* %arrayidx2397, align 4
  %tobool2398 = icmp ne i32 %890, 0
  br i1 %tobool2398, label %if.then2399, label %if.end2400

if.then2399:                                      ; preds = %for.body2393
  br label %for.end2573

if.end2400:                                       ; preds = %for.body2393
  %891 = load i32* %l_1470, align 4
  %add2401 = add nsw i32 %891, 1
  %idxprom2402 = sext i32 %add2401 to i64
  %arrayidx2403 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 %idxprom2402
  %892 = load i32* %arrayidx2403, align 4
  %conv2404 = trunc i32 %892 to i16
  %893 = load i32* %l_1470, align 4
  %add2405 = add nsw i32 %893, 1
  %idxprom2406 = sext i32 %add2405 to i64
  %arrayidx2407 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 %idxprom2406
  %894 = load i32* %arrayidx2407, align 4
  %call2408 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv2404, i32 %894)
  %conv2409 = sext i16 %call2408 to i32
  %895 = load i32* %l_730, align 4
  %896 = load i32* @_ZL4g_48, align 4
  %897 = load i32* @_ZL5g_930, align 4
  %conv2410 = trunc i32 %897 to i16
  %arrayidx2411 = getelementptr inbounds [6 x [4 x i16]]* %l_1503, i32 0, i64 5
  %arrayidx2412 = getelementptr inbounds [4 x i16]* %arrayidx2411, i32 0, i64 1
  %898 = load i16* %arrayidx2412, align 2
  %call2413 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv2410, i16 zeroext %898)
  %tobool2414 = icmp ne i16 %call2413, 0
  br i1 %tobool2414, label %land.rhs2415, label %land.end2420

land.rhs2415:                                     ; preds = %if.end2400
  %call2416 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -7477, i16 zeroext -24963)
  %899 = load i32* %l_1470, align 4
  %conv2417 = trunc i32 %899 to i16
  %call2418 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call2416, i16 zeroext %conv2417)
  %tobool2419 = icmp ne i16 %call2418, 0
  br label %land.end2420

land.end2420:                                     ; preds = %land.rhs2415, %if.end2400
  %900 = phi i1 [ false, %if.end2400 ], [ %tobool2419, %land.rhs2415 ]
  %conv2421 = zext i1 %900 to i32
  %call2422 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %896, i32 %conv2421)
  %xor2423 = xor i32 %call2422, -3
  %conv2424 = trunc i32 %xor2423 to i16
  %901 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %conv2425 = trunc i32 %901 to i16
  %call2426 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv2424, i16 signext %conv2425)
  %tobool2427 = icmp ne i16 %call2426, 0
  br i1 %tobool2427, label %lor.end2432, label %lor.rhs2428

lor.rhs2428:                                      ; preds = %land.end2420
  %arrayidx2429 = getelementptr inbounds [6 x [4 x i16]]* %l_1503, i32 0, i64 5
  %arrayidx2430 = getelementptr inbounds [4 x i16]* %arrayidx2429, i32 0, i64 1
  %902 = load i16* %arrayidx2430, align 2
  %tobool2431 = icmp ne i16 %902, 0
  br label %lor.end2432

lor.end2432:                                      ; preds = %lor.rhs2428, %land.end2420
  %903 = phi i1 [ true, %land.end2420 ], [ %tobool2431, %lor.rhs2428 ]
  %conv2433 = zext i1 %903 to i32
  %904 = load i16* @_ZL4g_56, align 2
  %conv2434 = sext i16 %904 to i32
  %call2435 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv2433, i32 %conv2434)
  %and2436 = and i32 55568, %call2435
  %cmp2437 = icmp uge i32 %895, %and2436
  %conv2438 = zext i1 %cmp2437 to i32
  %905 = load i16* @_ZL6g_1430, align 2
  %conv2439 = sext i16 %905 to i32
  %cmp2440 = icmp sle i32 %conv2438, %conv2439
  %conv2441 = zext i1 %cmp2440 to i32
  %906 = load i32* @_ZL5g_615, align 4
  %xor2442 = xor i32 %conv2441, %906
  %cmp2443 = icmp sle i32 %xor2442, 1
  %conv2444 = zext i1 %cmp2443 to i16
  %907 = load i32* @_ZL5g_168, align 4
  %call2445 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv2444, i32 %907)
  %conv2446 = zext i16 %call2445 to i32
  %cmp2447 = icmp ne i32 %conv2446, 0
  %conv2448 = zext i1 %cmp2447 to i32
  %908 = load i32* %l_1031, align 4
  %call2449 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv2448, i32 %908)
  %tobool2450 = icmp ne i32 %call2449, 0
  br i1 %tobool2450, label %lor.end2452, label %lor.rhs2451

lor.rhs2451:                                      ; preds = %lor.end2432
  br label %lor.end2452

lor.end2452:                                      ; preds = %lor.rhs2451, %lor.end2432
  %909 = phi i1 [ true, %lor.end2432 ], [ true, %lor.rhs2451 ]
  %conv2453 = zext i1 %909 to i32
  %cmp2454 = icmp ne i32 %conv2453, 1228938763
  %conv2455 = zext i1 %cmp2454 to i16
  %910 = load i16* %l_1561, align 2
  %call2456 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv2455, i16 signext %910)
  %conv2457 = sext i16 %call2456 to i32
  %911 = load i16* %l_662, align 2
  %conv2458 = sext i16 %911 to i32
  %call2459 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv2457, i32 %conv2458)
  %cmp2460 = icmp uge i32 0, %call2459
  %conv2461 = zext i1 %cmp2460 to i32
  %912 = load i32* @_ZL5g_930, align 4
  %call2462 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv2461, i32 %912)
  %cmp2463 = icmp uge i32 %conv2409, %call2462
  %conv2464 = zext i1 %cmp2463 to i32
  %cmp2465 = icmp uge i32 %conv2464, 9
  %conv2466 = zext i1 %cmp2465 to i16
  %call2467 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv2466, i32 14)
  store i16 %call2467, i16* @_ZL6g_1430, align 2
  %call2468 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call2467, i16 signext -1)
  %conv2469 = sext i16 %call2468 to i32
  store i32 %conv2469, i32* @_ZL6g_1295, align 4
  %arrayidx2470 = getelementptr inbounds [8 x i32]* %l_1562, i32 0, i64 3
  store i32 %conv2469, i32* %arrayidx2470, align 4
  %913 = load i32* %l_1470, align 4
  %add2471 = add nsw i32 %913, 1
  %idxprom2472 = sext i32 %add2471 to i64
  %arrayidx2473 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 %idxprom2472
  %914 = load i32* %arrayidx2473, align 4
  %tobool2474 = icmp ne i32 %914, 0
  br i1 %tobool2474, label %if.then2475, label %if.end2476

if.then2475:                                      ; preds = %lor.end2452
  br label %for.inc2571

if.end2476:                                       ; preds = %lor.end2452
  %call2477 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext -4, i32 14)
  %tobool2478 = icmp ne i16 %call2477, 0
  br i1 %tobool2478, label %land.rhs2479, label %land.end2481

land.rhs2479:                                     ; preds = %if.end2476
  %915 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %tobool2480 = icmp ne i32 %915, 0
  br label %land.end2481

land.end2481:                                     ; preds = %land.rhs2479, %if.end2476
  %916 = phi i1 [ false, %if.end2476 ], [ %tobool2480, %land.rhs2479 ]
  %conv2482 = zext i1 %916 to i32
  %917 = load i16* %l_662, align 2
  %conv2483 = sext i16 %917 to i32
  %918 = load i16* @_ZL4g_56, align 2
  %919 = load i32* %l_1577, align 4
  %tobool2484 = icmp ne i32 %919, 0
  br i1 %tobool2484, label %land.rhs2485, label %land.end2490

land.rhs2485:                                     ; preds = %land.end2481
  %920 = load i32* %l_1470, align 4
  %idxprom2486 = sext i32 %920 to i64
  %arrayidx2487 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 %idxprom2486
  %921 = load i32* %arrayidx2487, align 4
  %inc2488 = add i32 %921, 1
  store i32 %inc2488, i32* %arrayidx2487, align 4
  %tobool2489 = icmp ne i32 %921, 0
  br label %land.end2490

land.end2490:                                     ; preds = %land.rhs2485, %land.end2481
  %922 = phi i1 [ false, %land.end2481 ], [ %tobool2489, %land.rhs2485 ]
  %conv2491 = zext i1 %922 to i16
  store i16 %conv2491, i16* @_ZL6g_1580, align 2
  %conv2492 = sext i16 %conv2491 to i32
  %923 = load i32* @_ZL5g_398, align 4
  %924 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 4, i64 0, i64 1), align 4
  %call2493 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 2083399852, i32 %924)
  %925 = load i16* @_ZL6g_1430, align 2
  %conv2494 = sext i16 %925 to i32
  %cmp2495 = icmp sle i32 %call2493, %conv2494
  %conv2496 = zext i1 %cmp2495 to i16
  %arrayidx2497 = getelementptr inbounds [5 x [2 x [1 x i32]]]* %l_1336, i32 0, i64 3
  %arrayidx2498 = getelementptr inbounds [2 x [1 x i32]]* %arrayidx2497, i32 0, i64 1
  %arrayidx2499 = getelementptr inbounds [1 x i32]* %arrayidx2498, i32 0, i64 0
  %926 = load i32* %arrayidx2499, align 4
  %call2500 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv2496, i32 %926)
  %tobool2501 = icmp ne i16 %call2500, 0
  br i1 %tobool2501, label %land.rhs2502, label %land.end2504

land.rhs2502:                                     ; preds = %land.end2490
  %927 = load i32* %l_1589, align 4
  %tobool2503 = icmp ne i32 %927, 0
  br label %land.end2504

land.end2504:                                     ; preds = %land.rhs2502, %land.end2490
  %928 = phi i1 [ false, %land.end2490 ], [ %tobool2503, %land.rhs2502 ]
  %conv2505 = zext i1 %928 to i32
  %929 = load i32* @_ZL6g_1295, align 4
  %or2506 = or i32 %conv2505, %929
  %neg2507 = xor i32 %or2506, -1
  %conv2508 = trunc i32 %neg2507 to i16
  %930 = load i32* %l_1590, align 4
  %conv2509 = trunc i32 %930 to i16
  %call2510 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2508, i16 zeroext %conv2509)
  %conv2511 = zext i16 %call2510 to i32
  %tobool2512 = icmp ne i32 %conv2511, 0
  br i1 %tobool2512, label %land.rhs2513, label %land.end2514

land.rhs2513:                                     ; preds = %land.end2504
  br label %land.end2514

land.end2514:                                     ; preds = %land.rhs2513, %land.end2504
  %931 = phi i1 [ false, %land.end2504 ], [ true, %land.rhs2513 ]
  %conv2515 = zext i1 %931 to i32
  %cmp2516 = icmp ugt i32 %923, %conv2515
  %conv2517 = zext i1 %cmp2516 to i32
  %cmp2518 = icmp eq i32 %conv2517, 1299068170
  %conv2519 = zext i1 %cmp2518 to i32
  %cmp2520 = icmp sle i32 %conv2492, %conv2519
  br i1 %cmp2520, label %land.lhs.true2521, label %lor.rhs2523

land.lhs.true2521:                                ; preds = %land.end2514
  %932 = load i16* %l_679, align 2
  %tobool2522 = icmp ne i16 %932, 0
  br i1 %tobool2522, label %lor.end2526, label %lor.rhs2523

lor.rhs2523:                                      ; preds = %land.lhs.true2521, %land.end2514
  %arrayidx2524 = getelementptr inbounds [4 x i32]* %l_1514, i32 0, i64 3
  %933 = load i32* %arrayidx2524, align 4
  %tobool2525 = icmp ne i32 %933, 0
  br label %lor.end2526

lor.end2526:                                      ; preds = %lor.rhs2523, %land.lhs.true2521
  %934 = phi i1 [ true, %land.lhs.true2521 ], [ %tobool2525, %lor.rhs2523 ]
  %conv2527 = zext i1 %934 to i32
  %arrayidx2528 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx2529 = getelementptr inbounds [3 x i32]* %arrayidx2528, i32 0, i64 2
  %935 = load i32* %arrayidx2529, align 4
  %cmp2530 = icmp ugt i32 %conv2527, %935
  %conv2531 = zext i1 %cmp2530 to i32
  %call2532 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv2531, i32 155021520)
  %arrayidx2533 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 6
  store i32 %call2532, i32* %arrayidx2533, align 4
  %call2534 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %918, i32 %call2532)
  %conv2535 = zext i16 %call2534 to i32
  %call2536 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 2134036230, i32 %conv2535)
  %conv2537 = trunc i32 %call2536 to i16
  %arrayidx2538 = getelementptr inbounds [4 x i32]* %l_1514, i32 0, i64 3
  %936 = load i32* %arrayidx2538, align 4
  %conv2539 = trunc i32 %936 to i16
  %call2540 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv2537, i16 signext %conv2539)
  %tobool2541 = icmp ne i16 %call2540, 0
  %lnot2542 = xor i1 %tobool2541, true
  %conv2543 = zext i1 %lnot2542 to i32
  %arrayidx2544 = getelementptr inbounds [8 x i32]* %l_1562, i32 0, i64 3
  %937 = load i32* %arrayidx2544, align 4
  %or2545 = or i32 %937, %conv2543
  store i32 %or2545, i32* %arrayidx2544, align 4
  %or2546 = or i32 %conv2483, %or2545
  %938 = load i32* %l_1293, align 4
  %cmp2547 = icmp ne i32 %or2546, %938
  br i1 %cmp2547, label %land.rhs2548, label %land.end2553

land.rhs2548:                                     ; preds = %lor.end2526
  %939 = load i32* %l_1470, align 4
  %add2549 = add nsw i32 %939, 1
  %idxprom2550 = sext i32 %add2549 to i64
  %arrayidx2551 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 %idxprom2550
  %940 = load i32* %arrayidx2551, align 4
  %tobool2552 = icmp ne i32 %940, 0
  br label %land.end2553

land.end2553:                                     ; preds = %land.rhs2548, %lor.end2526
  %941 = phi i1 [ false, %lor.end2526 ], [ %tobool2552, %land.rhs2548 ]
  %conv2554 = zext i1 %941 to i32
  %942 = load i32* @_ZL5g_396, align 4
  %or2555 = or i32 %conv2554, %942
  %arrayidx2556 = getelementptr inbounds [4 x i32]* %l_1514, i32 0, i64 0
  %943 = load i32* %arrayidx2556, align 4
  %xor2557 = xor i32 %or2555, %943
  %tobool2558 = icmp ne i32 %xor2557, 0
  br i1 %tobool2558, label %land.end2561, label %land.rhs2559

land.rhs2559:                                     ; preds = %land.end2553
  %944 = load i32* @_ZL3g_2, align 4
  %tobool2560 = icmp ne i32 %944, 0
  br label %land.end2561

land.end2561:                                     ; preds = %land.rhs2559, %land.end2553
  %945 = phi i1 [ false, %land.end2553 ], [ %tobool2560, %land.rhs2559 ]
  %conv2562 = zext i1 %945 to i32
  %xor2563 = xor i32 %conv2482, %conv2562
  %conv2564 = trunc i32 %xor2563 to i16
  %946 = load i32* @_ZL5g_859, align 4
  %conv2565 = trunc i32 %946 to i16
  %call2566 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv2564, i16 signext %conv2565)
  store i16 %call2566, i16* %l_1591, align 2
  %conv2567 = sext i16 %call2566 to i32
  %cmp2568 = icmp slt i32 %conv2567, 0
  %conv2569 = zext i1 %cmp2568 to i32
  %arrayidx2570 = getelementptr inbounds [4 x i32]* %l_1514, i32 0, i64 3
  store i32 %conv2569, i32* %arrayidx2570, align 4
  br label %for.inc2571

for.inc2571:                                      ; preds = %land.end2561, %if.then2475
  %947 = load i32* %l_1470, align 4
  %sub2572 = sub nsw i32 %947, 1
  store i32 %sub2572, i32* %l_1470, align 4
  br label %for.cond2391

for.end2573:                                      ; preds = %if.then2399, %for.cond2391
  store i32 0, i32* @_ZL5g_859, align 4
  br label %for.cond2574

for.cond2574:                                     ; preds = %for.inc2633, %for.end2573
  %948 = load i32* @_ZL5g_859, align 4
  %cmp2575 = icmp ne i32 %948, 8
  br i1 %cmp2575, label %for.body2576, label %for.end2635

for.body2576:                                     ; preds = %for.cond2574
  store i32 1080774859, i32* %l_1609, align 4
  %949 = load i32* %l_676, align 4
  %tobool2577 = icmp ne i32 %949, 0
  br i1 %tobool2577, label %if.then2578, label %if.end2579

if.then2578:                                      ; preds = %for.body2576
  br label %for.end2635

if.end2579:                                       ; preds = %for.body2576
  %950 = load i32* %l_1031, align 4
  %951 = load i32* @_ZL5g_930, align 4
  %952 = load i32* @_ZL6g_1295, align 4
  %call2580 = call i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %952)
  %arrayidx2581 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx2582 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx2581, i32 0, i64 4
  %arrayidx2583 = getelementptr inbounds [6 x i32]* %arrayidx2582, i32 0, i64 5
  %953 = load i32* %arrayidx2583, align 4
  %arrayidx2584 = getelementptr inbounds [4 x i32]* %l_1514, i32 0, i64 3
  %954 = load i32* %arrayidx2584, align 4
  %955 = load i32* %l_1609, align 4
  %call2585 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext 1, i16 signext 1)
  %conv2586 = sext i16 %call2585 to i32
  %956 = load i16* @_ZL4g_60, align 2
  %conv2587 = zext i16 %956 to i32
  %or2588 = or i32 %conv2586, %conv2587
  %xor2589 = xor i32 %955, %or2588
  %cmp2590 = icmp sge i32 %954, %xor2589
  %conv2591 = zext i1 %cmp2590 to i32
  %and2592 = and i32 %953, %conv2591
  %cmp2593 = icmp eq i32 %call2580, %and2592
  %conv2594 = zext i1 %cmp2593 to i16
  store i16 %conv2594, i16* @_ZL4g_60, align 2
  %conv2595 = zext i16 %conv2594 to i32
  %957 = load i32* @_ZL3g_2, align 4
  %cmp2596 = icmp eq i32 %conv2595, %957
  %conv2597 = zext i1 %cmp2596 to i16
  %arrayidx2598 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 1
  %arrayidx2599 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx2598, i32 0, i64 6
  %arrayidx2600 = getelementptr inbounds [5 x i32]* %arrayidx2599, i32 0, i64 3
  %958 = load i32* %arrayidx2600, align 4
  %conv2601 = trunc i32 %958 to i16
  %call2602 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv2597, i16 signext %conv2601)
  %conv2603 = sext i16 %call2602 to i32
  %959 = load i32* @_ZL5g_396, align 4
  %or2604 = or i32 %conv2603, %959
  %cmp2605 = icmp ult i32 %951, %or2604
  %conv2606 = zext i1 %cmp2605 to i32
  %cmp2607 = icmp eq i32 %conv2606, -4
  %conv2608 = zext i1 %cmp2607 to i32
  %960 = load i32* @_ZL5g_859, align 4
  %and2609 = and i32 %conv2608, %960
  %961 = load i32* @_ZL3g_2, align 4
  %cmp2610 = icmp ne i32 %and2609, %961
  %conv2611 = zext i1 %cmp2610 to i32
  %962 = load i32* @_ZL4g_48, align 4
  %call2612 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv2611, i32 %962)
  store i32 %call2612, i32* @_ZL4g_48, align 4
  %call2613 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %950, i32 %call2612)
  %963 = load i16* @_ZL6g_1430, align 2
  %conv2614 = sext i16 %963 to i32
  %call2615 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %call2613, i32 %conv2614)
  %conv2616 = trunc i32 %call2615 to i16
  %964 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 2), align 4
  %call2617 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv2616, i32 %964)
  %call2618 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call2617, i16 signext -1)
  %conv2619 = sext i16 %call2618 to i32
  %965 = load i32* @_ZL5g_396, align 4
  %cmp2620 = icmp ult i32 %conv2619, %965
  br i1 %cmp2620, label %land.rhs2621, label %land.end2623

land.rhs2621:                                     ; preds = %if.end2579
  %966 = load i32* %l_1613, align 4
  %tobool2622 = icmp ne i32 %966, 0
  br label %land.end2623

land.end2623:                                     ; preds = %land.rhs2621, %if.end2579
  %967 = phi i1 [ false, %if.end2579 ], [ %tobool2622, %land.rhs2621 ]
  %conv2624 = zext i1 %967 to i32
  %or2625 = or i32 %conv2624, -1
  %968 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %xor2626 = xor i32 %or2625, %968
  %conv2627 = trunc i32 %xor2626 to i16
  %call2628 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv2627, i16 signext -6797)
  %conv2629 = sext i16 %call2628 to i32
  %cmp2630 = icmp eq i32 1, %conv2629
  %conv2631 = zext i1 %cmp2630 to i32
  %969 = load i32* %l_1614, align 4
  %and2632 = and i32 %969, %conv2631
  store i32 %and2632, i32* %l_1614, align 4
  br label %for.inc2633

for.inc2633:                                      ; preds = %land.end2623
  %970 = load i32* @_ZL5g_859, align 4
  %inc2634 = add nsw i32 %970, 1
  store i32 %inc2634, i32* @_ZL5g_859, align 4
  br label %for.cond2574

for.end2635:                                      ; preds = %if.then2578, %for.cond2574
  br label %if.end2636

if.end2636:                                       ; preds = %for.end2635, %land.end2288
  %971 = load i32* %l_1166, align 4
  %xor2637 = xor i32 %971, 89447694
  store i32 %xor2637, i32* %l_1166, align 4
  br label %for.inc2638

for.inc2638:                                      ; preds = %if.end2636
  %972 = load i32* @_ZL5g_622, align 4
  %call2639 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %972, i32 1)
  store i32 %call2639, i32* @_ZL5g_622, align 4
  br label %for.cond1984

for.end2640:                                      ; preds = %for.cond1984
  br label %for.inc2641

for.inc2641:                                      ; preds = %for.end2640
  %973 = load i32* %l_1197, align 4
  %conv2642 = trunc i32 %973 to i16
  %call2643 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv2642, i16 zeroext 7)
  %conv2644 = zext i16 %call2643 to i32
  store i32 %conv2644, i32* %l_1197, align 4
  br label %for.cond1655

for.end2645:                                      ; preds = %for.cond1655
  %arrayidx2646 = getelementptr inbounds [10 x i32]* %l_1249, i32 0, i64 6
  %974 = load i32* %arrayidx2646, align 4
  store i32 %974, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %tobool2647 = icmp ne i32 %974, 0
  br i1 %tobool2647, label %land.rhs2648, label %land.end2651

land.rhs2648:                                     ; preds = %for.end2645
  %975 = load i32* %l_1258, align 4
  %976 = load i32* @_ZL5g_622, align 4
  %call2649 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %975, i32 %976)
  %cmp2650 = icmp sle i32 %call2649, -1618852538
  br label %land.end2651

land.end2651:                                     ; preds = %land.rhs2648, %for.end2645
  %977 = phi i1 [ false, %for.end2645 ], [ %cmp2650, %land.rhs2648 ]
  %conv2652 = zext i1 %977 to i32
  %and2653 = and i32 %conv2652, 1
  %conv2654 = trunc i32 %and2653 to i16
  %call2655 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv2654, i32 14)
  %conv2656 = zext i16 %call2655 to i32
  store i32 %conv2656, i32* @_ZL4g_48, align 4
  br label %if.end2657

if.end2657:                                       ; preds = %land.end2651, %for.end161
  br label %lbl_1743

lbl_1743:                                         ; preds = %if.then2957, %if.end2657
  %978 = load i16* %l_1629, align 2
  %inc2658 = add i16 %978, 1
  store i16 %inc2658, i16* %l_1629, align 2
  store i32 9, i32* %l_1166, align 4
  br label %for.cond2659

for.cond2659:                                     ; preds = %for.inc2825, %lbl_1743
  %979 = load i32* %l_1166, align 4
  %cmp2660 = icmp sge i32 %979, 0
  br i1 %cmp2660, label %for.body2661, label %for.end2827

for.body2661:                                     ; preds = %for.cond2659
  store i32 -1, i32* %l_1661, align 4
  store i32 4, i32* %l_1667, align 4
  store i32 -3, i32* %l_1689, align 4
  store i32 0, i32* %i2662, align 4
  br label %for.cond2663

for.cond2663:                                     ; preds = %for.inc2668, %for.body2661
  %980 = load i32* %i2662, align 4
  %cmp2664 = icmp slt i32 %980, 1
  br i1 %cmp2664, label %for.body2665, label %for.end2670

for.body2665:                                     ; preds = %for.cond2663
  %981 = load i32* %i2662, align 4
  %idxprom2666 = sext i32 %981 to i64
  %arrayidx2667 = getelementptr inbounds [1 x i16]* %l_1644, i32 0, i64 %idxprom2666
  store i16 0, i16* %arrayidx2667, align 2
  br label %for.inc2668

for.inc2668:                                      ; preds = %for.body2665
  %982 = load i32* %i2662, align 4
  %inc2669 = add nsw i32 %982, 1
  store i32 %inc2669, i32* %i2662, align 4
  br label %for.cond2663

for.end2670:                                      ; preds = %for.cond2663
  store i32 0, i32* %l_1300, align 4
  br label %for.cond2671

for.cond2671:                                     ; preds = %for.inc2750, %for.end2670
  %983 = load i32* %l_1300, align 4
  %cmp2672 = icmp sgt i32 %983, 12
  br i1 %cmp2672, label %for.body2673, label %for.end2752

for.body2673:                                     ; preds = %for.cond2671
  store i32 1, i32* %l_1660, align 4
  %984 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv2674 = trunc i32 %984 to i16
  %985 = load i32* %l_660, align 4
  %call2675 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv2674, i32 %985)
  %conv2676 = zext i16 %call2675 to i32
  %arrayidx2677 = getelementptr inbounds [1 x i16]* %l_1644, i32 0, i64 0
  %986 = load i16* %arrayidx2677, align 2
  %conv2678 = zext i16 %986 to i32
  store i16 29543, i16* @_ZL4g_60, align 2
  %987 = load i32* %l_1166, align 4
  %conv2679 = trunc i32 %987 to i16
  %call2680 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv2679, i32 6)
  %call2681 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %call2680, i32 10)
  %tobool2682 = icmp ne i16 %call2681, 0
  br i1 %tobool2682, label %land.rhs2683, label %land.end2701

land.rhs2683:                                     ; preds = %for.body2673
  %988 = load i32* %l_1190, align 4
  %989 = load i32* @_ZL5g_859, align 4
  %cmp2684 = icmp sgt i32 5923, %989
  %conv2685 = zext i1 %cmp2684 to i16
  store i16 %conv2685, i16* @_ZL5g_394, align 2
  %conv2686 = zext i16 %conv2685 to i32
  %cmp2687 = icmp sle i32 %988, %conv2686
  %conv2688 = zext i1 %cmp2687 to i32
  %990 = load i32* %l_1660, align 4
  %cmp2689 = icmp sle i32 %conv2688, %990
  br i1 %cmp2689, label %land.rhs2690, label %land.end2692

land.rhs2690:                                     ; preds = %land.rhs2683
  %991 = load i16* @_ZL6g_1430, align 2
  %tobool2691 = icmp ne i16 %991, 0
  br label %land.end2692

land.end2692:                                     ; preds = %land.rhs2690, %land.rhs2683
  %992 = phi i1 [ false, %land.rhs2683 ], [ %tobool2691, %land.rhs2690 ]
  %conv2693 = zext i1 %992 to i32
  %993 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 0), align 4
  %and2694 = and i32 %conv2693, %993
  %cmp2695 = icmp uge i32 %and2694, -1541580762
  %conv2696 = zext i1 %cmp2695 to i16
  %994 = load i32* %l_1660, align 4
  %conv2697 = trunc i32 %994 to i16
  %call2698 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv2696, i16 signext %conv2697)
  %conv2699 = sext i16 %call2698 to i32
  %tobool2700 = icmp ne i32 %conv2699, 0
  br label %land.end2701

land.end2701:                                     ; preds = %land.end2692, %for.body2673
  %995 = phi i1 [ false, %for.body2673 ], [ %tobool2700, %land.end2692 ]
  %conv2702 = zext i1 %995 to i16
  %call2703 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext 29543, i16 zeroext %conv2702)
  %conv2704 = zext i16 %call2703 to i32
  %996 = load i32* @_ZL5g_622, align 4
  %cmp2705 = icmp ugt i32 %conv2704, %996
  %conv2706 = zext i1 %cmp2705 to i16
  %arrayidx2707 = getelementptr inbounds [1 x i16]* %l_1644, i32 0, i64 0
  %997 = load i16* %arrayidx2707, align 2
  %conv2708 = zext i16 %997 to i32
  %call2709 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv2706, i32 %conv2708)
  %call2710 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext -1, i16 signext %call2709)
  %conv2711 = sext i16 %call2710 to i32
  %xor2712 = xor i32 %conv2711, 0
  %998 = load i32* @_ZL5g_396, align 4
  %or2713 = or i32 %xor2712, %998
  %999 = load i32* @_ZL6g_1021, align 4
  %xor2714 = xor i32 %999, %or2713
  store i32 %xor2714, i32* @_ZL6g_1021, align 4
  %call2715 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %xor2714, i32 0)
  %cmp2716 = icmp uge i32 %conv2678, %call2715
  %conv2717 = zext i1 %cmp2716 to i16
  %call2718 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv2717, i16 signext -6)
  %tobool2719 = icmp ne i16 %call2718, 0
  br i1 %tobool2719, label %lor.end2726, label %lor.lhs.false2720

lor.lhs.false2720:                                ; preds = %land.end2701
  %arrayidx2721 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 0
  %arrayidx2722 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx2721, i32 0, i64 4
  %arrayidx2723 = getelementptr inbounds [5 x i32]* %arrayidx2722, i32 0, i64 0
  %1000 = load i32* %arrayidx2723, align 4
  %tobool2724 = icmp ne i32 %1000, 0
  br i1 %tobool2724, label %lor.end2726, label %lor.rhs2725

lor.rhs2725:                                      ; preds = %lor.lhs.false2720
  br label %lor.end2726

lor.end2726:                                      ; preds = %lor.rhs2725, %lor.lhs.false2720, %land.end2701
  %1001 = phi i1 [ true, %lor.lhs.false2720 ], [ true, %land.end2701 ], [ true, %lor.rhs2725 ]
  %conv2727 = zext i1 %1001 to i32
  %or2728 = or i32 %conv2676, %conv2727
  %tobool2729 = icmp ne i32 %or2728, 0
  br i1 %tobool2729, label %land.rhs2730, label %land.end2731

land.rhs2730:                                     ; preds = %lor.end2726
  br label %land.end2731

land.end2731:                                     ; preds = %land.rhs2730, %lor.end2726
  %1002 = phi i1 [ false, %lor.end2726 ], [ true, %land.rhs2730 ]
  %conv2732 = zext i1 %1002 to i32
  %1003 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %call2733 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv2732, i32 %1003)
  %conv2734 = trunc i32 %call2733 to i16
  %1004 = load i32* %l_1589, align 4
  %conv2735 = trunc i32 %1004 to i16
  %call2736 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv2734, i16 signext %conv2735)
  %conv2737 = sext i16 %call2736 to i32
  store i32 %conv2737, i32* %l_1661, align 4
  %1005 = load i32* %l_1660, align 4
  %conv2738 = trunc i32 %1005 to i16
  %call2739 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv2738, i32 10)
  %1006 = load i32* %l_1660, align 4
  %1007 = load i16* @_ZL4g_56, align 2
  %conv2740 = sext i16 %1007 to i32
  %xor2741 = xor i32 %conv2740, %1006
  %conv2742 = trunc i32 %xor2741 to i16
  store i16 %conv2742, i16* @_ZL4g_56, align 2
  %call2743 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %call2739, i16 signext %conv2742)
  %conv2744 = sext i16 %call2743 to i32
  %1008 = load i32* %l_1589, align 4
  %or2745 = or i32 %1008, %conv2744
  store i32 %or2745, i32* %l_1589, align 4
  %1009 = load volatile i32* @_ZL6g_1020, align 4
  %tobool2746 = icmp ne i32 %1009, 0
  br i1 %tobool2746, label %if.then2747, label %if.end2748

if.then2747:                                      ; preds = %land.end2731
  br label %for.end2752

if.end2748:                                       ; preds = %land.end2731
  %1010 = load i16* @_ZL6g_1066, align 2
  %conv2749 = zext i16 %1010 to i32
  store i32 %conv2749, i32* @_ZL6g_1666, align 4
  br label %for.inc2750

for.inc2750:                                      ; preds = %if.end2748
  %1011 = load i32* %l_1300, align 4
  %inc2751 = add nsw i32 %1011, 1
  store i32 %inc2751, i32* %l_1300, align 4
  br label %for.cond2671

for.end2752:                                      ; preds = %if.then2747, %for.cond2671
  %1012 = load i32* %l_1667, align 4
  %and2753 = and i32 %1012, 1941022633
  %tobool2754 = icmp ne i32 %and2753, 0
  br i1 %tobool2754, label %land.rhs2755, label %land.end2819

land.rhs2755:                                     ; preds = %for.end2752
  %1013 = load i16* @_ZL6g_1066, align 2
  %inc2756 = add i16 %1013, 1
  store i16 %inc2756, i16* @_ZL6g_1066, align 2
  %1014 = load i32* @_ZL5g_168, align 4
  %call2757 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 -2085016224, i32 %1014)
  %or2758 = or i32 %call2757, -2132927107
  %1015 = load i32* @_ZL5g_796, align 4
  %1016 = load i32* @_ZL5g_396, align 4
  %call2759 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext 1, i32 %1016)
  %conv2760 = sext i16 %call2759 to i32
  %1017 = load i32* %l_1661, align 4
  %cmp2761 = icmp sge i32 %conv2760, %1017
  %conv2762 = zext i1 %cmp2761 to i32
  %1018 = load i16* @_ZL4g_46, align 2
  %conv2763 = sext i16 %1018 to i32
  %or2764 = or i32 %conv2763, %conv2762
  %conv2765 = trunc i32 %or2764 to i16
  store i16 %conv2765, i16* @_ZL4g_46, align 2
  %1019 = load i32* @_ZL5g_859, align 4
  %conv2766 = trunc i32 %1019 to i16
  %call2767 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv2765, i16 signext %conv2766)
  %conv2768 = sext i16 %call2767 to i32
  %arrayidx2769 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 4
  %arrayidx2770 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx2769, i32 0, i64 4
  %arrayidx2771 = getelementptr inbounds [6 x i32]* %arrayidx2770, i32 0, i64 2
  store i32 %conv2768, i32* %arrayidx2771, align 4
  %cmp2772 = icmp ne i32 -1860066451, %conv2768
  %conv2773 = zext i1 %cmp2772 to i16
  %1020 = load volatile i32* @_ZL6g_1020, align 4
  %conv2774 = trunc i32 %1020 to i16
  %call2775 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2773, i16 zeroext %conv2774)
  %conv2776 = zext i16 %call2775 to i32
  %and2777 = and i32 %1015, %conv2776
  %conv2778 = trunc i32 %and2777 to i16
  %1021 = load i32* @_ZL6g_1021, align 4
  %conv2779 = trunc i32 %1021 to i16
  %call2780 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv2778, i16 signext %conv2779)
  %conv2781 = sext i16 %call2780 to i32
  %1022 = load i32* %l_660, align 4
  %or2782 = or i32 %1022, %conv2781
  store i32 %or2782, i32* %l_660, align 4
  %1023 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp2783 = icmp ne i32 %or2782, %1023
  %conv2784 = zext i1 %cmp2783 to i32
  %1024 = load i32* @_ZL5g_622, align 4
  %cmp2785 = icmp ne i32 %conv2784, %1024
  br i1 %cmp2785, label %lor.end2788, label %lor.rhs2786

lor.rhs2786:                                      ; preds = %land.rhs2755
  %1025 = load i16* @_ZL4g_60, align 2
  %tobool2787 = icmp ne i16 %1025, 0
  br label %lor.end2788

lor.end2788:                                      ; preds = %lor.rhs2786, %land.rhs2755
  %1026 = phi i1 [ true, %land.rhs2755 ], [ %tobool2787, %lor.rhs2786 ]
  %conv2789 = zext i1 %1026 to i16
  %1027 = load i32* %l_1258, align 4
  %conv2790 = trunc i32 %1027 to i16
  %call2791 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2789, i16 zeroext %conv2790)
  %call2792 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call2791, i16 signext -5)
  %conv2793 = sext i16 %call2792 to i32
  %call2794 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %or2758, i32 %conv2793)
  %1028 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp2795 = icmp eq i32 %call2794, %1028
  %conv2796 = zext i1 %cmp2795 to i32
  %1029 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp2797 = icmp uge i32 %conv2796, %1029
  %conv2798 = zext i1 %cmp2797 to i32
  %1030 = load i16* @_ZL4g_56, align 2
  %conv2799 = sext i16 %1030 to i32
  %cmp2800 = icmp ne i32 %conv2798, %conv2799
  %conv2801 = zext i1 %cmp2800 to i32
  %1031 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 2), align 4
  %cmp2802 = icmp slt i32 %conv2801, %1031
  %conv2803 = zext i1 %cmp2802 to i32
  %1032 = load i32* %l_1258, align 4
  %cmp2804 = icmp ugt i32 %conv2803, %1032
  %conv2805 = zext i1 %cmp2804 to i32
  %1033 = load i32* %l_1688, align 4
  %cmp2806 = icmp ne i32 %conv2805, %1033
  %conv2807 = zext i1 %cmp2806 to i32
  %1034 = load i32* %l_1689, align 4
  %or2808 = or i32 %conv2807, %1034
  %conv2809 = trunc i32 %or2808 to i16
  %call2810 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %inc2756, i16 zeroext %conv2809)
  %conv2811 = zext i16 %call2810 to i32
  %1035 = load i32* @_ZL5g_859, align 4
  %cmp2812 = icmp sgt i32 %conv2811, %1035
  br i1 %cmp2812, label %land.rhs2813, label %land.end2816

land.rhs2813:                                     ; preds = %lor.end2788
  %arrayidx2814 = getelementptr inbounds [1 x i16]* %l_1644, i32 0, i64 0
  %1036 = load i16* %arrayidx2814, align 2
  %tobool2815 = icmp ne i16 %1036, 0
  br label %land.end2816

land.end2816:                                     ; preds = %land.rhs2813, %lor.end2788
  %1037 = phi i1 [ false, %lor.end2788 ], [ %tobool2815, %land.rhs2813 ]
  %conv2817 = zext i1 %1037 to i32
  %cmp2818 = icmp eq i32 %conv2817, 24962
  br label %land.end2819

land.end2819:                                     ; preds = %land.end2816, %for.end2752
  %1038 = phi i1 [ false, %for.end2752 ], [ %cmp2818, %land.end2816 ]
  %conv2820 = zext i1 %1038 to i32
  %arrayidx2821 = getelementptr inbounds [1 x i16]* %l_1644, i32 0, i64 0
  %1039 = load i16* %arrayidx2821, align 2
  %conv2822 = zext i16 %1039 to i32
  %cmp2823 = icmp eq i32 %conv2820, %conv2822
  %conv2824 = zext i1 %cmp2823 to i32
  store i32 %conv2824, i32* %l_1661, align 4
  br label %for.inc2825

for.inc2825:                                      ; preds = %land.end2819
  %1040 = load i32* %l_1166, align 4
  %dec2826 = add nsw i32 %1040, -1
  store i32 %dec2826, i32* %l_1166, align 4
  br label %for.cond2659

for.end2827:                                      ; preds = %for.cond2659
  %1041 = load i32* %l_1258, align 4
  %tobool2828 = icmp ne i32 %1041, 0
  br i1 %tobool2828, label %if.then2829, label %if.else2943

if.then2829:                                      ; preds = %for.end2827
  store i16 1, i16* %l_1690, align 2
  store i32 1784260937, i32* %l_1691, align 4
  store i32 346686609, i32* %l_1738, align 4
  %1042 = load i32* %l_1691, align 4
  %inc2830 = add i32 %1042, 1
  store i32 %inc2830, i32* %l_1691, align 4
  store i32 1, i32* @_ZL5g_615, align 4
  br label %for.cond2831

for.cond2831:                                     ; preds = %for.inc2940, %if.then2829
  %1043 = load i32* @_ZL5g_615, align 4
  %cmp2832 = icmp sle i32 %1043, 5
  br i1 %cmp2832, label %for.body2833, label %for.end2942

for.body2833:                                     ; preds = %for.cond2831
  store volatile i16 0, i16* %l_1694, align 2
  store i32 0, i32* %i2834, align 4
  br label %for.cond2835

for.cond2835:                                     ; preds = %for.inc2840, %for.body2833
  %1044 = load i32* %i2834, align 4
  %cmp2836 = icmp slt i32 %1044, 1
  br i1 %cmp2836, label %for.body2837, label %for.end2842

for.body2837:                                     ; preds = %for.cond2835
  %1045 = load i32* %i2834, align 4
  %idxprom2838 = sext i32 %1045 to i64
  %arrayidx2839 = getelementptr inbounds [1 x i32]* %l_1700, i32 0, i64 %idxprom2838
  store i32 -2028916072, i32* %arrayidx2839, align 4
  br label %for.inc2840

for.inc2840:                                      ; preds = %for.body2837
  %1046 = load i32* %i2834, align 4
  %inc2841 = add nsw i32 %1046, 1
  store i32 %inc2841, i32* %i2834, align 4
  br label %for.cond2835

for.end2842:                                      ; preds = %for.cond2835
  %1047 = load volatile i16* @_ZL6g_1442, align 2
  store volatile i16 %1047, i16* %l_1694, align 2
  %1048 = load i32* @_ZL6g_1295, align 4
  %cmp2843 = icmp uge i32 2, %1048
  br i1 %cmp2843, label %lor.end2849, label %lor.rhs2844

lor.rhs2844:                                      ; preds = %for.end2842
  %1049 = load i32* @_ZL4g_48, align 4
  %conv2845 = trunc i32 %1049 to i16
  %call2846 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv2845, i32 6)
  %tobool2847 = icmp ne i16 %call2846, 0
  %lnot2848 = xor i1 %tobool2847, true
  br label %lor.end2849

lor.end2849:                                      ; preds = %lor.rhs2844, %for.end2842
  %1050 = phi i1 [ true, %for.end2842 ], [ %lnot2848, %lor.rhs2844 ]
  %conv2850 = zext i1 %1050 to i32
  %1051 = load i32* @_ZL4g_48, align 4
  %call2851 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv2850, i32 %1051)
  %arrayidx2852 = getelementptr inbounds [1 x i32]* %l_1700, i32 0, i64 0
  %1052 = load i32* %arrayidx2852, align 4
  %xor2853 = xor i32 %1052, %call2851
  store i32 %xor2853, i32* %arrayidx2852, align 4
  %1053 = load i16* @_ZL4g_46, align 2
  %conv2854 = sext i16 %1053 to i32
  %1054 = load i16* %l_1690, align 2
  %conv2855 = sext i16 %1054 to i32
  %1055 = load i32* @_ZL5g_398, align 4
  %arrayidx2856 = getelementptr inbounds [1 x i32]* %l_1700, i32 0, i64 0
  %1056 = load i32* %arrayidx2856, align 4
  %and2857 = and i32 %1055, %1056
  %call2858 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv2855, i32 %and2857)
  %1057 = load i16* %l_1690, align 2
  %conv2859 = sext i16 %1057 to i32
  %1058 = load i16* %l_1690, align 2
  %conv2860 = sext i16 %1058 to i32
  %call2861 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %conv2860)
  %conv2862 = trunc i32 %call2861 to i16
  %call2863 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv2862, i32 11)
  %conv2864 = sext i16 %call2863 to i32
  %1059 = load i32* @_ZL5g_396, align 4
  %1060 = load i16* %l_1729, align 2
  %conv2865 = zext i16 %1060 to i32
  %call2866 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %1059, i32 %conv2865)
  %conv2867 = trunc i32 %call2866 to i16
  %1061 = load i32* %l_704, align 4
  %cmp2868 = icmp ne i32 %1061, 1
  %conv2869 = zext i1 %cmp2868 to i32
  %cmp2870 = icmp sgt i32 %conv2869, 9
  %conv2871 = zext i1 %cmp2870 to i16
  %call2872 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv2871, i32 8)
  %conv2873 = sext i16 %call2872 to i32
  %1062 = load i16* @_ZL6g_1736, align 2
  %conv2874 = zext i16 %1062 to i32
  %xor2875 = xor i32 %conv2873, %conv2874
  %arrayidx2876 = getelementptr inbounds [1 x i32]* %l_1700, i32 0, i64 0
  %1063 = load i32* %arrayidx2876, align 4
  %cmp2877 = icmp slt i32 %xor2875, %1063
  %conv2878 = zext i1 %cmp2877 to i16
  %1064 = load i32* @_ZL4g_33, align 4
  %conv2879 = trunc i32 %1064 to i16
  %call2880 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv2878, i16 zeroext %conv2879)
  %call2881 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %call2880, i16 zeroext -10960)
  %call2882 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv2867, i16 signext %call2881)
  %conv2883 = sext i16 %call2882 to i32
  %1065 = load volatile i16* %l_1694, align 2
  %conv2884 = zext i16 %1065 to i32
  %xor2885 = xor i32 %conv2883, %conv2884
  %1066 = load i16* @_ZL6g_1477, align 2
  %conv2886 = sext i16 %1066 to i32
  %cmp2887 = icmp eq i32 %xor2885, %conv2886
  %conv2888 = zext i1 %cmp2887 to i32
  %or2889 = or i32 %conv2864, %conv2888
  %arrayidx2890 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 5
  %1067 = load i32* %arrayidx2890, align 4
  %call2891 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %or2889, i32 %1067)
  %tobool2892 = icmp ne i32 %call2891, 0
  br i1 %tobool2892, label %lor.end2894, label %lor.rhs2893

lor.rhs2893:                                      ; preds = %lor.end2849
  br label %lor.end2894

lor.end2894:                                      ; preds = %lor.rhs2893, %lor.end2849
  %1068 = phi i1 [ true, %lor.end2849 ], [ true, %lor.rhs2893 ]
  %conv2895 = zext i1 %1068 to i32
  %cmp2896 = icmp eq i32 %conv2895, 0
  %conv2897 = zext i1 %cmp2896 to i32
  %conv2898 = trunc i32 %conv2897 to i16
  %arrayidx2899 = getelementptr inbounds [1 x i32]* %l_1700, i32 0, i64 0
  %1069 = load i32* %arrayidx2899, align 4
  %call2900 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv2898, i32 %1069)
  %conv2901 = zext i16 %call2900 to i32
  %cmp2902 = icmp eq i32 %conv2901, 3
  %conv2903 = zext i1 %cmp2902 to i32
  %call2904 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv2903, i32 -689765968)
  %call2905 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv2859, i32 %call2904)
  %1070 = load i32* @_ZL4g_48, align 4
  %and2906 = and i32 %1070, %call2905
  store i32 %and2906, i32* @_ZL4g_48, align 4
  %1071 = load i16* %l_1690, align 2
  %conv2907 = sext i16 %1071 to i32
  %xor2908 = xor i32 %and2906, %conv2907
  %tobool2909 = icmp ne i32 %xor2908, 0
  br i1 %tobool2909, label %land.rhs2910, label %land.end2911

land.rhs2910:                                     ; preds = %lor.end2894
  br label %land.end2911

land.end2911:                                     ; preds = %land.rhs2910, %lor.end2894
  %1072 = phi i1 [ false, %lor.end2894 ], [ true, %land.rhs2910 ]
  %conv2912 = zext i1 %1072 to i32
  %cmp2913 = icmp sge i32 %conv2912, 18216
  %conv2914 = zext i1 %cmp2913 to i32
  %1073 = load i32* %l_1166, align 4
  %and2915 = and i32 %1073, %conv2914
  store i32 %and2915, i32* %l_1166, align 4
  %xor2916 = xor i32 %call2858, %and2915
  %call2917 = call i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %xor2916)
  %call2918 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv2854, i32 %call2917)
  %1074 = load i16* %l_1690, align 2
  %conv2919 = sext i16 %1074 to i32
  %cmp2920 = icmp eq i32 %call2918, %conv2919
  %conv2921 = zext i1 %cmp2920 to i32
  %1075 = load i32* @_ZL5g_489, align 4
  %or2922 = or i32 %conv2921, %1075
  %cmp2923 = icmp ne i32 %or2922, 1064448539
  %conv2924 = zext i1 %cmp2923 to i32
  %1076 = load i16* %l_1690, align 2
  %conv2925 = sext i16 %1076 to i32
  %cmp2926 = icmp sle i32 %conv2924, %conv2925
  %conv2927 = zext i1 %cmp2926 to i16
  %1077 = load i32* %l_1737, align 4
  %conv2928 = trunc i32 %1077 to i16
  %call2929 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2927, i16 zeroext %conv2928)
  %call2930 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %call2929, i32 2)
  %conv2931 = zext i16 %call2930 to i32
  %arrayidx2932 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 3
  %1078 = load i32* %arrayidx2932, align 4
  %or2933 = or i32 %conv2931, %1078
  %conv2934 = trunc i32 %or2933 to i16
  %1079 = load i16* @_ZL6g_1066, align 2
  %call2935 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv2934, i16 signext %1079)
  %conv2936 = sext i16 %call2935 to i32
  %cmp2937 = icmp ne i32 %conv2936, 0
  %conv2938 = zext i1 %cmp2937 to i32
  %arrayidx2939 = getelementptr inbounds [1 x i32]* %l_1700, i32 0, i64 0
  store i32 %conv2938, i32* %arrayidx2939, align 4
  store i32 %conv2938, i32* @_ZL4g_55, align 4
  %1080 = load i32* %l_1738, align 4
  store i32 %1080, i32* %retval
  br label %return

for.inc2940:                                      ; No predecessors!
  %1081 = load i32* @_ZL5g_615, align 4
  %add2941 = add nsw i32 %1081, 1
  store i32 %add2941, i32* @_ZL5g_615, align 4
  br label %for.cond2831

for.end2942:                                      ; preds = %for.cond2831
  br label %if.end4799

if.else2943:                                      ; preds = %for.end2827
  store i16 17105, i16* %l_1748, align 2
  store i32 -2, i32* %l_1771, align 4
  store i32 3, i32* %l_1801, align 4
  store i32 -152894314, i32* %l_1853, align 4
  store i16 4533, i16* %l_1876, align 2
  store i32 -1959728556, i32* %l_1877, align 4
  store i32 1817862062, i32* %l_1878, align 4
  store i32 1, i32* %l_1879, align 4
  store i32 1, i32* %l_1883, align 4
  %1082 = bitcast [6 x i16]* %l_1888 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1082, i8 0, i64 12, i32 2, i1 false)
  store i32 5, i32* %l_1889, align 4
  %1083 = bitcast [7 x [4 x [2 x i32]]]* %l_1890 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1083, i8* bitcast ([7 x [4 x [2 x i32]]]* @_ZZL6func_1vE6l_1890 to i8*), i64 224, i32 16, i1 false)
  store i16 -7211, i16* %l_2080, align 2
  store i16 -1, i16* %l_2145, align 2
  store i16 0, i16* %l_2214, align 2
  store i16 -4641, i16* %l_2336, align 2
  store i32 195986825, i32* %l_2406, align 4
  store i32 -2, i32* %l_2418, align 4
  br label %lbl_2417

lbl_2417:                                         ; preds = %if.then4797, %if.else2943
  store i32 13, i32* %l_676, align 4
  br label %for.cond2947

for.cond2947:                                     ; preds = %for.inc3142, %lbl_2417
  %1084 = load i32* %l_676, align 4
  %cmp2948 = icmp ne i32 %1084, -19
  br i1 %cmp2948, label %for.body2949, label %for.end3144

for.body2949:                                     ; preds = %for.cond2947
  store i16 1, i16* %l_1749, align 2
  store i32 -1, i32* %l_1772, align 4
  store i32 -759388113, i32* %l_1792, align 4
  store i32 -9, i32* %l_1798, align 4
  store i32 6, i32* %l_1800, align 4
  %1085 = load i16* @_ZL6g_1477, align 2
  %tobool2950 = icmp ne i16 %1085, 0
  br i1 %tobool2950, label %if.then2951, label %if.end2952

if.then2951:                                      ; preds = %for.body2949
  br label %for.end3144

if.end2952:                                       ; preds = %for.body2949
  store i32 0, i32* @_ZL5g_796, align 4
  br label %for.cond2953

for.cond2953:                                     ; preds = %for.inc3139, %if.end2952
  %1086 = load i32* @_ZL5g_796, align 4
  %cmp2954 = icmp ne i32 %1086, 25
  br i1 %cmp2954, label %for.body2955, label %for.end3141

for.body2955:                                     ; preds = %for.cond2953
  store i32 -3, i32* %l_1793, align 4
  store i32 1606016442, i32* %l_1794, align 4
  store i32 -512712458, i32* %l_1796, align 4
  store i32 2, i32* %l_1797, align 4
  %1087 = load i32* @_ZL5g_859, align 4
  %tobool2956 = icmp ne i32 %1087, 0
  br i1 %tobool2956, label %if.then2957, label %if.end2958

if.then2957:                                      ; preds = %for.body2955
  br label %lbl_1743

if.end2958:                                       ; preds = %for.body2955
  %1088 = load i32* @_ZL3g_2, align 4
  %and2959 = and i32 %1088, 1
  store i32 %and2959, i32* @_ZL3g_2, align 4
  %arrayidx2960 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 0
  %arrayidx2961 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx2960, i32 0, i64 1
  %arrayidx2962 = getelementptr inbounds [6 x i32]* %arrayidx2961, i32 0, i64 2
  store i32 %and2959, i32* %arrayidx2962, align 4
  store i32 16, i32* @_ZL5g_930, align 4
  br label %for.cond2963

for.cond2963:                                     ; preds = %for.inc2966, %if.end2958
  %1089 = load i32* @_ZL5g_930, align 4
  %cmp2964 = icmp ugt i32 %1089, 2
  br i1 %cmp2964, label %for.body2965, label %for.end2970

for.body2965:                                     ; preds = %for.cond2963
  %1090 = load i32* @_ZL5g_796, align 4
  store i32 %1090, i32* %retval
  br label %return

for.inc2966:                                      ; No predecessors!
  %1091 = load i32* @_ZL5g_930, align 4
  %conv2967 = trunc i32 %1091 to i16
  %call2968 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv2967, i16 zeroext 5)
  %conv2969 = zext i16 %call2968 to i32
  store i32 %conv2969, i32* @_ZL5g_930, align 4
  br label %for.cond2963

for.end2970:                                      ; preds = %for.cond2963
  store i16 17, i16* @_ZL6g_1066, align 2
  br label %for.cond2971

for.cond2971:                                     ; preds = %for.inc3136, %for.end2970
  %1092 = load i16* @_ZL6g_1066, align 2
  %conv2972 = zext i16 %1092 to i32
  %cmp2973 = icmp sgt i32 %conv2972, 22
  br i1 %cmp2973, label %for.body2974, label %for.end3138

for.body2974:                                     ; preds = %for.cond2971
  store i32 -933818849, i32* %l_1770, align 4
  store i32 -50320594, i32* %l_1799, align 4
  %1093 = load i16* %l_1748, align 2
  %tobool2975 = icmp ne i16 %1093, 0
  br i1 %tobool2975, label %if.then2976, label %if.else3072

if.then2976:                                      ; preds = %for.body2974
  store i32 1, i32* %l_1752, align 4
  store i32 409093127, i32* %l_1795, align 4
  %1094 = load i16* @_ZL4g_56, align 2
  store i16 %1094, i16* %l_1749, align 2
  %1095 = load i16* %l_1749, align 2
  %conv2977 = sext i16 %1095 to i32
  %1096 = load i32* %l_1752, align 4
  %1097 = load i16* %l_1748, align 2
  %conv2978 = zext i16 %1097 to i32
  %1098 = load i16* @_ZL6g_1477, align 2
  %conv2979 = sext i16 %1098 to i32
  %1099 = load i32* @_ZL4g_55, align 4
  %cmp2980 = icmp sge i32 %conv2979, %1099
  %conv2981 = zext i1 %cmp2980 to i32
  %call2982 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext -1, i32 13)
  %conv2983 = zext i16 %call2982 to i32
  %1100 = load i32* %l_1772, align 4
  %inc2984 = add i32 %1100, 1
  store i32 %inc2984, i32* %l_1772, align 4
  %conv2985 = trunc i32 %inc2984 to i16
  %1101 = load i16* %l_1748, align 2
  %conv2986 = zext i16 %1101 to i32
  %1102 = load i32* @_ZL6g_1295, align 4
  %conv2987 = trunc i32 %1102 to i16
  %call2988 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv2987, i16 zeroext 0)
  %conv2989 = zext i16 %call2988 to i32
  %1103 = load i32* %l_1792, align 4
  %or2990 = or i32 %1103, %conv2989
  store i32 %or2990, i32* %l_1792, align 4
  %1104 = load i32* %l_704, align 4
  %call2991 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %or2990, i32 %1104)
  %tobool2992 = icmp ne i32 %call2991, 0
  br i1 %tobool2992, label %land.rhs2993, label %land.end2994

land.rhs2993:                                     ; preds = %if.then2976
  br label %land.end2994

land.end2994:                                     ; preds = %land.rhs2993, %if.then2976
  %1105 = phi i1 [ false, %if.then2976 ], [ false, %land.rhs2993 ]
  %conv2995 = zext i1 %1105 to i32
  %1106 = load i32* @_ZL5g_796, align 4
  %call2996 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv2995, i32 %1106)
  %1107 = load i32* %l_1793, align 4
  %or2997 = or i32 %call2996, %1107
  %cmp2998 = icmp eq i32 %or2997, 2
  %conv2999 = zext i1 %cmp2998 to i16
  store i16 %conv2999, i16* @_ZL6g_1580, align 2
  %1108 = load i32* %l_1752, align 4
  %call3000 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv2999, i32 %1108)
  %conv3001 = sext i16 %call3000 to i32
  %1109 = load i32* @_ZL6g_1666, align 4
  %or3002 = or i32 %conv3001, %1109
  %arrayidx3003 = getelementptr inbounds [6 x [4 x i16]]* %l_1628, i32 0, i64 0
  %arrayidx3004 = getelementptr inbounds [4 x i16]* %arrayidx3003, i32 0, i64 2
  %1110 = load i16* %arrayidx3004, align 2
  %conv3005 = sext i16 %1110 to i32
  %cmp3006 = icmp ugt i32 %or3002, %conv3005
  %conv3007 = zext i1 %cmp3006 to i32
  %1111 = load i16* %l_1749, align 2
  %conv3008 = sext i16 %1111 to i32
  %cmp3009 = icmp sgt i32 %conv3007, %conv3008
  %conv3010 = zext i1 %cmp3009 to i16
  %call3011 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv3010, i32 2)
  %conv3012 = zext i16 %call3011 to i32
  %and3013 = and i32 %conv3012, 7
  %1112 = load i32* %l_1752, align 4
  %cmp3014 = icmp uge i32 %and3013, %1112
  br i1 %cmp3014, label %land.rhs3015, label %land.end3016

land.rhs3015:                                     ; preds = %land.end2994
  br label %land.end3016

land.end3016:                                     ; preds = %land.rhs3015, %land.end2994
  %1113 = phi i1 [ false, %land.end2994 ], [ true, %land.rhs3015 ]
  %conv3017 = zext i1 %1113 to i32
  %1114 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call3018 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv3017, i32 %1114)
  %cmp3019 = icmp ne i32 %conv2986, %call3018
  br i1 %cmp3019, label %lor.end3022, label %lor.rhs3020

lor.rhs3020:                                      ; preds = %land.end3016
  %1115 = load i32* @_ZL4g_48, align 4
  %tobool3021 = icmp ne i32 %1115, 0
  br label %lor.end3022

lor.end3022:                                      ; preds = %lor.rhs3020, %land.end3016
  %1116 = phi i1 [ true, %land.end3016 ], [ %tobool3021, %lor.rhs3020 ]
  %conv3023 = zext i1 %1116 to i32
  %cmp3024 = icmp uge i32 %conv3023, 0
  %conv3025 = zext i1 %cmp3024 to i16
  %call3026 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv3025)
  %conv3027 = sext i16 %call3026 to i32
  %cmp3028 = icmp sgt i32 4, %conv3027
  %conv3029 = zext i1 %cmp3028 to i16
  %call3030 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv3029, i16 zeroext -24442)
  %call3031 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv2985, i16 zeroext %call3030)
  %conv3032 = zext i16 %call3031 to i32
  %1117 = load i32* @_ZL5g_622, align 4
  %xor3033 = xor i32 %conv3032, %1117
  %conv3034 = trunc i32 %xor3033 to i16
  %1118 = load i32* %l_1770, align 4
  %conv3035 = trunc i32 %1118 to i16
  %call3036 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv3034, i16 signext %conv3035)
  %1119 = load i32* @_ZL4g_55, align 4
  %call3037 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %call3036, i32 %1119)
  %conv3038 = zext i16 %call3037 to i32
  %cmp3039 = icmp eq i32 %conv3038, -1
  br i1 %cmp3039, label %lor.end3041, label %lor.rhs3040

lor.rhs3040:                                      ; preds = %lor.end3022
  br label %lor.end3041

lor.end3041:                                      ; preds = %lor.rhs3040, %lor.end3022
  %1120 = phi i1 [ true, %lor.end3022 ], [ true, %lor.rhs3040 ]
  %conv3042 = zext i1 %1120 to i16
  %call3043 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv3042)
  %conv3044 = sext i16 %call3043 to i32
  %call3045 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv2983, i32 %conv3044)
  %conv3046 = trunc i32 %call3045 to i16
  %1121 = load i32* %l_1770, align 4
  %conv3047 = trunc i32 %1121 to i16
  %call3048 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv3046, i16 signext %conv3047)
  %conv3049 = sext i16 %call3048 to i32
  %1122 = load i32* %l_1770, align 4
  %call3050 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv3049, i32 %1122)
  %1123 = load i32* %l_1770, align 4
  %cmp3051 = icmp ne i32 %call3050, %1123
  %conv3052 = zext i1 %cmp3051 to i32
  %1124 = load volatile i16* @_ZL5g_277, align 2
  %conv3053 = zext i16 %1124 to i32
  %cmp3054 = icmp ne i32 %conv3052, %conv3053
  %conv3055 = zext i1 %cmp3054 to i32
  %cmp3056 = icmp sge i32 %conv2981, %conv3055
  %conv3057 = zext i1 %cmp3056 to i32
  %xor3058 = xor i32 %conv2978, %conv3057
  %conv3059 = trunc i32 %xor3058 to i16
  %1125 = load i32* @_ZL5g_930, align 4
  %call3060 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv3059, i32 %1125)
  %conv3061 = zext i16 %call3060 to i32
  %or3062 = or i32 %1096, %conv3061
  %xor3063 = xor i32 %conv2977, %or3062
  %conv3064 = trunc i32 %xor3063 to i16
  %1126 = load i32* @_ZL5g_168, align 4
  %conv3065 = trunc i32 %1126 to i16
  %call3066 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv3064, i16 zeroext %conv3065)
  %conv3067 = zext i16 %call3066 to i32
  %xor3068 = xor i32 %conv3067, 0
  %1127 = load i32* @_ZL5g_396, align 4
  %and3069 = and i32 %xor3068, %1127
  %or3070 = or i32 %and3069, -1803322461
  store i32 %or3070, i32* %l_1771, align 4
  %1128 = load i32* %l_1801, align 4
  %inc3071 = add i32 %1128, 1
  store i32 %inc3071, i32* %l_1801, align 4
  %1129 = load i32* @_ZL6g_1666, align 4
  store i32 %1129, i32* %l_1796, align 4
  br label %if.end3135

if.else3072:                                      ; preds = %for.body2974
  store i16 -23804, i16* %l_1831, align 2
  %1130 = load i32* @_ZL6g_1666, align 4
  %conv3073 = trunc i32 %1130 to i16
  %1131 = load i32* @_ZL5g_615, align 4
  %conv3074 = trunc i32 %1131 to i16
  %call3075 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3073, i16 signext %conv3074)
  %conv3076 = sext i16 %call3075 to i32
  %1132 = load i32* %l_1770, align 4
  %call3077 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext -7, i32 %1132)
  %conv3078 = sext i16 %call3077 to i32
  %1133 = load i16* %l_1831, align 2
  %conv3079 = zext i16 %1133 to i32
  %1134 = load i32* %l_1792, align 4
  %conv3080 = trunc i32 %1134 to i16
  %1135 = load i16* @_ZL6g_1066, align 2
  %conv3081 = zext i16 %1135 to i32
  %call3082 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv3080, i32 %conv3081)
  %conv3083 = sext i16 %call3082 to i32
  %cmp3084 = icmp slt i32 %conv3079, %conv3083
  %conv3085 = zext i1 %cmp3084 to i16
  %1136 = load i32* %l_1792, align 4
  %conv3086 = trunc i32 %1136 to i16
  %call3087 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv3085, i16 zeroext %conv3086)
  %conv3088 = zext i16 %call3087 to i32
  %call3089 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv3088, i32 -1)
  %1137 = load i32* @_ZL6g_1834, align 4
  %cmp3090 = icmp eq i32 %call3089, %1137
  %conv3091 = zext i1 %cmp3090 to i16
  %1138 = load i32* %l_1770, align 4
  %call3092 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv3091, i32 %1138)
  %conv3093 = sext i16 %call3092 to i32
  %call3094 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv3093, i32 1)
  %1139 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %and3095 = and i32 %1139, %call3094
  store i32 %and3095, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call3096 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 -112796283, i32 %and3095)
  %tobool3097 = icmp ne i32 %call3096, 0
  %lnot3098 = xor i1 %tobool3097, true
  %conv3099 = zext i1 %lnot3098 to i32
  %1140 = load i32* @_ZL5g_489, align 4
  %call3100 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv3099, i32 %1140)
  %call3101 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv3078, i32 %call3100)
  %conv3102 = trunc i32 %call3101 to i16
  store i16 %conv3102, i16* @_ZL4g_56, align 2
  %tobool3103 = icmp ne i16 %conv3102, 0
  br i1 %tobool3103, label %lor.end3106, label %lor.rhs3104

lor.rhs3104:                                      ; preds = %if.else3072
  %1141 = load i32* @_ZL6g_1021, align 4
  %tobool3105 = icmp ne i32 %1141, 0
  br label %lor.end3106

lor.end3106:                                      ; preds = %lor.rhs3104, %if.else3072
  %1142 = phi i1 [ true, %if.else3072 ], [ %tobool3105, %lor.rhs3104 ]
  %conv3107 = zext i1 %1142 to i32
  %1143 = load i32* @_ZL5g_796, align 4
  %cmp3108 = icmp ne i32 %conv3107, %1143
  %conv3109 = zext i1 %cmp3108 to i16
  %call3110 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv3109, i32 12)
  %conv3111 = sext i16 %call3110 to i32
  %cmp3112 = icmp sge i32 1346429933, %conv3111
  %conv3113 = zext i1 %cmp3112 to i32
  %1144 = load i32* @_ZL5g_859, align 4
  %cmp3114 = icmp ne i32 %conv3113, %1144
  %conv3115 = zext i1 %cmp3114 to i16
  %call3116 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3115, i16 signext -23124)
  %conv3117 = sext i16 %call3116 to i32
  %cmp3118 = icmp sgt i32 %conv3076, %conv3117
  %conv3119 = zext i1 %cmp3118 to i16
  %1145 = load i32* %l_1771, align 4
  %conv3120 = trunc i32 %1145 to i16
  %call3121 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv3119, i16 signext %conv3120)
  %tobool3122 = icmp ne i16 %call3121, 0
  br i1 %tobool3122, label %land.rhs3123, label %land.end3125

land.rhs3123:                                     ; preds = %lor.end3106
  %1146 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %tobool3124 = icmp ne i32 %1146, 0
  br label %land.end3125

land.end3125:                                     ; preds = %land.rhs3123, %lor.end3106
  %1147 = phi i1 [ false, %lor.end3106 ], [ %tobool3124, %land.rhs3123 ]
  %conv3126 = zext i1 %1147 to i32
  store i32 %conv3126, i32* %l_1797, align 4
  %1148 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 2), align 4
  %arrayidx3127 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 2
  %1149 = load i32* %arrayidx3127, align 4
  %cmp3128 = icmp ule i32 %1148, %1149
  %conv3129 = zext i1 %cmp3128 to i16
  %1150 = load i32* %l_1798, align 4
  %call3130 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv3129, i32 %1150)
  %conv3131 = zext i16 %call3130 to i32
  %1151 = load i32* %l_1793, align 4
  %cmp3132 = icmp ugt i32 %conv3131, %1151
  %conv3133 = zext i1 %cmp3132 to i32
  %1152 = load i32* %l_1796, align 4
  %and3134 = and i32 %1152, %conv3133
  store i32 %and3134, i32* %l_1796, align 4
  br label %if.end3135

if.end3135:                                       ; preds = %land.end3125, %lor.end3041
  %1153 = load i32* @_ZL5g_859, align 4
  store i32 %1153, i32* %retval
  br label %return

for.inc3136:                                      ; No predecessors!
  %1154 = load i16* @_ZL6g_1066, align 2
  %inc3137 = add i16 %1154, 1
  store i16 %inc3137, i16* @_ZL6g_1066, align 2
  br label %for.cond2971

for.end3138:                                      ; preds = %for.cond2971
  br label %for.inc3139

for.inc3139:                                      ; preds = %for.end3138
  %1155 = load i32* @_ZL5g_796, align 4
  %inc3140 = add i32 %1155, 1
  store i32 %inc3140, i32* @_ZL5g_796, align 4
  br label %for.cond2953

for.end3141:                                      ; preds = %for.cond2953
  br label %for.inc3142

for.inc3142:                                      ; preds = %for.end3141
  %1156 = load i32* %l_676, align 4
  %call3143 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %1156, i32 6)
  store i32 %call3143, i32* %l_676, align 4
  br label %for.cond2947

for.end3144:                                      ; preds = %if.then2951, %for.cond2947
  store i32 -1, i32* %l_660, align 4
  %1157 = load i32* @_ZL4g_48, align 4
  %conv3145 = trunc i32 %1157 to i16
  %1158 = load i32* %l_1853, align 4
  %call3146 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %1158, i32 1)
  %call3147 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %call3146)
  %tobool3148 = icmp ne i32 %call3147, 0
  br i1 %tobool3148, label %land.rhs3149, label %land.end3152

land.rhs3149:                                     ; preds = %for.end3144
  %1159 = load i16* @_ZL6g_1066, align 2
  %dec3150 = add i16 %1159, -1
  store i16 %dec3150, i16* @_ZL6g_1066, align 2
  %tobool3151 = icmp ne i16 %1159, 0
  br label %land.end3152

land.end3152:                                     ; preds = %land.rhs3149, %for.end3144
  %1160 = phi i1 [ false, %for.end3144 ], [ %tobool3151, %land.rhs3149 ]
  %conv3153 = zext i1 %1160 to i32
  store i32 %conv3153, i32* @_ZL5g_796, align 4
  %call3154 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv3153, i32 -784519298)
  %conv3155 = trunc i32 %call3154 to i16
  %call3156 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv3145, i16 zeroext %conv3155)
  %conv3157 = zext i16 %call3156 to i32
  %1161 = load i16* %l_1748, align 2
  %conv3158 = zext i16 %1161 to i32
  %call3159 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv3158, i32 1)
  %1162 = load i32* @_ZL5g_859, align 4
  %cmp3160 = icmp ule i32 -8, %1162
  br i1 %cmp3160, label %land.rhs3161, label %land.end3165

land.rhs3161:                                     ; preds = %land.end3152
  %arrayidx3162 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 2
  %arrayidx3163 = getelementptr inbounds [3 x i32]* %arrayidx3162, i32 0, i64 0
  %1163 = load i32* %arrayidx3163, align 4
  %tobool3164 = icmp ne i32 %1163, 0
  br label %land.end3165

land.end3165:                                     ; preds = %land.rhs3161, %land.end3152
  %1164 = phi i1 [ false, %land.end3152 ], [ %tobool3164, %land.rhs3161 ]
  %conv3166 = zext i1 %1164 to i32
  %cmp3167 = icmp ult i32 %call3159, %conv3166
  %conv3168 = zext i1 %cmp3167 to i16
  %arrayidx3169 = getelementptr inbounds [6 x [4 x i16]]* %l_1628, i32 0, i64 4
  %arrayidx3170 = getelementptr inbounds [4 x i16]* %arrayidx3169, i32 0, i64 0
  %1165 = load i16* %arrayidx3170, align 2
  %call3171 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3168, i16 signext %1165)
  %tobool3172 = icmp ne i16 %call3171, 0
  br i1 %tobool3172, label %land.rhs3173, label %land.end3176

land.rhs3173:                                     ; preds = %land.end3165
  %arrayidx3174 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 2
  %1166 = load i32* %arrayidx3174, align 4
  %tobool3175 = icmp ne i32 %1166, 0
  br label %land.end3176

land.end3176:                                     ; preds = %land.rhs3173, %land.end3165
  %1167 = phi i1 [ false, %land.end3165 ], [ %tobool3175, %land.rhs3173 ]
  %conv3177 = zext i1 %1167 to i32
  %arrayidx3178 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 2
  %arrayidx3179 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx3178, i32 0, i64 1
  %arrayidx3180 = getelementptr inbounds [6 x i32]* %arrayidx3179, i32 0, i64 1
  %1168 = load i32* %arrayidx3180, align 4
  %call3181 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv3177, i32 %1168)
  %cmp3182 = icmp ule i32 %call3181, 1534605654
  %conv3183 = zext i1 %cmp3182 to i32
  %1169 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp3184 = icmp ugt i32 %conv3183, %1169
  %conv3185 = zext i1 %cmp3184 to i32
  %1170 = load i32* %l_704, align 4
  %cmp3186 = icmp uge i32 %conv3185, %1170
  %conv3187 = zext i1 %cmp3186 to i32
  %1171 = load i16* %l_1748, align 2
  %conv3188 = zext i16 %1171 to i32
  %cmp3189 = icmp slt i32 %conv3187, %conv3188
  %conv3190 = zext i1 %cmp3189 to i32
  %cmp3191 = icmp sle i32 %conv3190, 2026062517
  %conv3192 = zext i1 %cmp3191 to i32
  %cmp3193 = icmp eq i32 %conv3192, 6
  %conv3194 = zext i1 %cmp3193 to i32
  %cmp3195 = icmp ult i32 %conv3194, 1
  %conv3196 = zext i1 %cmp3195 to i16
  %call3197 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3196, i16 zeroext 0)
  %conv3198 = zext i16 %call3197 to i32
  %call3199 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv3198, i32 515658150)
  %conv3200 = trunc i32 %call3199 to i16
  %1172 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %conv3201 = trunc i32 %1172 to i16
  %call3202 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv3200, i16 zeroext %conv3201)
  %1173 = load i32* %l_1853, align 4
  %call3203 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %call3202, i32 %1173)
  %call3204 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %call3203, i16 zeroext -1)
  %conv3205 = zext i16 %call3204 to i32
  %call3206 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv3157, i32 %conv3205)
  %1174 = load i32* @_ZL5g_622, align 4
  %or3207 = or i32 %call3206, %1174
  %1175 = load i16* %l_1629, align 2
  %conv3208 = zext i16 %1175 to i32
  %call3209 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %or3207, i32 %conv3208)
  %1176 = load i16* @_ZL4g_46, align 2
  %conv3210 = sext i16 %1176 to i32
  %cmp3211 = icmp ule i32 %call3209, %conv3210
  %conv3212 = zext i1 %cmp3211 to i32
  store i32 %conv3212, i32* %l_1853, align 4
  %call3213 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv3212, i32 1)
  %tobool3214 = icmp ne i32 %call3213, 0
  br i1 %tobool3214, label %lor.end3216, label %lor.rhs3215

lor.rhs3215:                                      ; preds = %land.end3176
  br label %lor.end3216

lor.end3216:                                      ; preds = %lor.rhs3215, %land.end3176
  %1177 = phi i1 [ true, %land.end3176 ], [ true, %lor.rhs3215 ]
  %conv3217 = zext i1 %1177 to i32
  %call3218 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 -1, i32 %conv3217)
  %tobool3219 = icmp ne i32 %call3218, 0
  br i1 %tobool3219, label %if.then3220, label %if.else4232

if.then3220:                                      ; preds = %lor.end3216
  store i16 12113, i16* %l_1872, align 2
  store i32 0, i32* %l_1874, align 4
  store i32 4, i32* %l_1875, align 4
  store i32 1537573960, i32* %l_1880, align 4
  store i32 4, i32* %l_1881, align 4
  store i32 297984291, i32* %l_1882, align 4
  store i32 5, i32* %l_1884, align 4
  store i32 -200934609, i32* %l_1885, align 4
  store i16 0, i16* %l_1886, align 2
  %1178 = bitcast [7 x i32]* %l_1887 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1178, i8* bitcast ([7 x i32]* @_ZZL6func_1vE6l_1887 to i8*), i64 28, i32 16, i1 false)
  store i32 0, i32* %l_2048, align 4
  store i32 1700589791, i32* %l_2049, align 4
  store i32 -10, i32* %l_2147, align 4
  store i32 0, i32* %i3221, align 4
  br label %for.cond3222

for.cond3222:                                     ; preds = %for.inc3227, %if.then3220
  %1179 = load i32* %i3221, align 4
  %cmp3223 = icmp slt i32 %1179, 1
  br i1 %cmp3223, label %for.body3224, label %for.end3229

for.body3224:                                     ; preds = %for.cond3222
  %1180 = load i32* %i3221, align 4
  %idxprom3225 = sext i32 %1180 to i64
  %arrayidx3226 = getelementptr inbounds [1 x i32]* %l_1898, i32 0, i64 %idxprom3225
  store i32 1135650409, i32* %arrayidx3226, align 4
  br label %for.inc3227

for.inc3227:                                      ; preds = %for.body3224
  %1181 = load i32* %i3221, align 4
  %inc3228 = add nsw i32 %1181, 1
  store i32 %inc3228, i32* %i3221, align 4
  br label %for.cond3222

for.end3229:                                      ; preds = %for.cond3222
  %1182 = load volatile i32* @_ZL6g_1892, align 4
  %dec3230 = add i32 %1182, -1
  store volatile i32 %dec3230, i32* @_ZL6g_1892, align 4
  %1183 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 1, i64 0, i64 1), align 4
  store i32 %1183, i32* @_ZL4g_48, align 4
  %tobool3231 = icmp ne i32 %1183, 0
  br i1 %tobool3231, label %if.then3232, label %if.else3986

if.then3232:                                      ; preds = %for.end3229
  store i32 -1237612690, i32* %l_1923, align 4
  store i32 1125590634, i32* %l_2000, align 4
  store i32 1, i32* %l_2021, align 4
  store i16 -3, i16* %l_2067, align 2
  store i32 0, i32* %i3233, align 4
  br label %for.cond3235

for.cond3235:                                     ; preds = %for.inc3248, %if.then3232
  %1184 = load i32* %i3233, align 4
  %cmp3236 = icmp slt i32 %1184, 2
  br i1 %cmp3236, label %for.body3237, label %for.end3250

for.body3237:                                     ; preds = %for.cond3235
  store i32 0, i32* %j3234, align 4
  br label %for.cond3238

for.cond3238:                                     ; preds = %for.inc3245, %for.body3237
  %1185 = load i32* %j3234, align 4
  %cmp3239 = icmp slt i32 %1185, 1
  br i1 %cmp3239, label %for.body3240, label %for.end3247

for.body3240:                                     ; preds = %for.cond3238
  %1186 = load i32* %j3234, align 4
  %idxprom3241 = sext i32 %1186 to i64
  %1187 = load i32* %i3233, align 4
  %idxprom3242 = sext i32 %1187 to i64
  %arrayidx3243 = getelementptr inbounds [2 x [1 x i32]]* %l_2050, i32 0, i64 %idxprom3242
  %arrayidx3244 = getelementptr inbounds [1 x i32]* %arrayidx3243, i32 0, i64 %idxprom3241
  store i32 -1, i32* %arrayidx3244, align 4
  br label %for.inc3245

for.inc3245:                                      ; preds = %for.body3240
  %1188 = load i32* %j3234, align 4
  %inc3246 = add nsw i32 %1188, 1
  store i32 %inc3246, i32* %j3234, align 4
  br label %for.cond3238

for.end3247:                                      ; preds = %for.cond3238
  br label %for.inc3248

for.inc3248:                                      ; preds = %for.end3247
  %1189 = load i32* %i3233, align 4
  %inc3249 = add nsw i32 %1189, 1
  store i32 %inc3249, i32* %i3233, align 4
  br label %for.cond3235

for.end3250:                                      ; preds = %for.cond3235
  %1190 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  store i32 %1190, i32* %l_1882, align 4
  store i32 -24, i32* %l_1589, align 4
  br label %for.cond3251

for.cond3251:                                     ; preds = %for.inc3519, %for.end3250
  %1191 = load i32* %l_1589, align 4
  %cmp3252 = icmp slt i32 %1191, -13
  br i1 %cmp3252, label %for.body3253, label %for.end3523

for.body3253:                                     ; preds = %for.cond3251
  store i32 1, i32* %l_1952, align 4
  %1192 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 4, i64 0, i64 1), align 4
  %arrayidx3254 = getelementptr inbounds [1 x i32]* %l_1898, i32 0, i64 0
  %1193 = load i32* %arrayidx3254, align 4
  %1194 = load i16* @_ZL6g_1066, align 2
  %1195 = load i32* @_ZL6g_1295, align 4
  %conv3255 = trunc i32 %1195 to i16
  %call3256 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv3255, i16 zeroext 0)
  %1196 = load i32* @_ZL6g_1873, align 4
  %call3257 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %call3256, i32 %1196)
  %conv3258 = zext i16 %call3257 to i32
  %1197 = load i32* %l_1923, align 4
  %cmp3259 = icmp uge i32 %conv3258, %1197
  %conv3260 = zext i1 %cmp3259 to i32
  %call3261 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv3260, i32 -3)
  %1198 = load i32* %l_1923, align 4
  %call3262 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %call3261, i32 %1198)
  %1199 = load i16* @_ZL6g_1580, align 2
  %conv3263 = sext i16 %1199 to i32
  %xor3264 = xor i32 %conv3263, %call3262
  %conv3265 = trunc i32 %xor3264 to i16
  store i16 %conv3265, i16* @_ZL6g_1580, align 2
  %conv3266 = sext i16 %conv3265 to i32
  %cmp3267 = icmp eq i32 0, %conv3266
  %conv3268 = zext i1 %cmp3267 to i16
  %call3269 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %1194, i16 zeroext %conv3268)
  %conv3270 = zext i16 %call3269 to i32
  %xor3271 = xor i32 36991, %conv3270
  %conv3272 = trunc i32 %xor3271 to i16
  %call3273 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext -10720, i16 zeroext %conv3272)
  %call3274 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %call3273, i32 15)
  %conv3275 = sext i16 %call3274 to i32
  %1200 = load i16* @_ZL6g_1430, align 2
  %conv3276 = sext i16 %1200 to i32
  %xor3277 = xor i32 %conv3276, %conv3275
  %conv3278 = trunc i32 %xor3277 to i16
  store i16 %conv3278, i16* @_ZL6g_1430, align 2
  %1201 = load i32* @_ZL5g_489, align 4
  %conv3279 = trunc i32 %1201 to i16
  %call3280 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3278, i16 signext %conv3279)
  %conv3281 = sext i16 %call3280 to i32
  store i32 %conv3281, i32* @_ZL5g_859, align 4
  %call3282 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv3281, i32 -1271682608)
  %cmp3283 = icmp sge i32 %call3282, 1003445850
  %conv3284 = zext i1 %cmp3283 to i32
  %call3285 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv3284, i32 1062024696)
  %xor3286 = xor i32 25239, %call3285
  %cmp3287 = icmp ne i32 1321912802, %xor3286
  %conv3288 = zext i1 %cmp3287 to i32
  %1202 = load i32* @_ZL6g_1873, align 4
  %cmp3289 = icmp sle i32 %conv3288, %1202
  %conv3290 = zext i1 %cmp3289 to i32
  %1203 = load i32* @_ZL5g_398, align 4
  %cmp3291 = icmp eq i32 %conv3290, %1203
  %conv3292 = zext i1 %cmp3291 to i16
  %call3293 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv3292, i16 signext 12483)
  %conv3294 = sext i16 %call3293 to i32
  %1204 = load i32* @_ZL4g_33, align 4
  %and3295 = and i32 %conv3294, %1204
  %call3296 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %and3295, i32 0)
  %1205 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 4), align 4
  %cmp3297 = icmp eq i32 %call3296, %1205
  %conv3298 = zext i1 %cmp3297 to i32
  %cmp3299 = icmp ne i32 %1193, %conv3298
  %conv3300 = zext i1 %cmp3299 to i32
  %1206 = load i32* @_ZL4g_33, align 4
  %cmp3301 = icmp ne i32 %conv3300, %1206
  %conv3302 = zext i1 %cmp3301 to i32
  %cmp3303 = icmp eq i32 %1192, %conv3302
  %conv3304 = zext i1 %cmp3303 to i32
  %1207 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp3305 = icmp uge i32 %conv3304, %1207
  %lnot3306 = xor i1 %cmp3305, true
  %conv3307 = zext i1 %lnot3306 to i32
  %or3308 = or i32 %conv3307, 57244
  %1208 = load i32* @_ZL3g_2, align 4
  %and3309 = and i32 %1208, %or3308
  store i32 %and3309, i32* @_ZL3g_2, align 4
  %1209 = load i32* @_ZL5g_622, align 4
  %xor3310 = xor i32 %1209, 32782
  %arrayidx3311 = getelementptr inbounds [7 x i32]* %l_1887, i32 0, i64 4
  store i32 %xor3310, i32* %arrayidx3311, align 4
  %1210 = load i32* %l_1882, align 4
  %conv3312 = trunc i32 %1210 to i16
  %1211 = load i16* @_ZL5g_394, align 2
  %conv3313 = zext i16 %1211 to i32
  %1212 = load volatile i32* @_ZL6g_1892, align 4
  %1213 = load i32* @_ZL5g_796, align 4
  %conv3314 = trunc i32 %1213 to i16
  %call3315 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv3314, i32 8)
  %conv3316 = sext i16 %call3315 to i32
  %call3317 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %conv3316)
  store i32 -1816246466, i32* %l_1875, align 4
  %cmp3318 = icmp ne i32 %call3317, -1816246466
  %conv3319 = zext i1 %cmp3318 to i16
  %1214 = load i32* @_ZL4g_36, align 4
  %1215 = load i32* @_ZL6g_1295, align 4
  %or3320 = or i32 %1215, %1214
  store i32 %or3320, i32* @_ZL6g_1295, align 4
  %tobool3321 = icmp ne i32 %or3320, 0
  br i1 %tobool3321, label %land.rhs3322, label %land.end3351

land.rhs3322:                                     ; preds = %for.body3253
  %arrayidx3323 = getelementptr inbounds [9 x [3 x i32]]* %l_871, i32 0, i64 6
  %arrayidx3324 = getelementptr inbounds [3 x i32]* %arrayidx3323, i32 0, i64 2
  %1216 = load i32* %arrayidx3324, align 4
  %1217 = load i32* @_ZL5g_859, align 4
  %conv3325 = trunc i32 %1217 to i16
  store i16 %conv3325, i16* @_ZL4g_46, align 2
  %conv3326 = sext i16 %conv3325 to i32
  %cmp3327 = icmp eq i32 %conv3326, 44292
  %conv3328 = zext i1 %cmp3327 to i32
  %1218 = load i32* @_ZL6g_1834, align 4
  %cmp3329 = icmp uge i32 %conv3328, %1218
  %conv3330 = zext i1 %cmp3329 to i32
  %and3331 = and i32 %conv3330, 0
  %conv3332 = trunc i32 %and3331 to i16
  %1219 = load i32* @_ZL5g_622, align 4
  %call3333 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv3332, i32 %1219)
  %conv3334 = zext i16 %call3333 to i32
  %1220 = load i32* @_ZL3g_2, align 4
  %cmp3335 = icmp sgt i32 %conv3334, %1220
  %lnot3336 = xor i1 %cmp3335, true
  %conv3337 = zext i1 %lnot3336 to i32
  %1221 = load i16* @_ZL5g_394, align 2
  %conv3338 = zext i16 %1221 to i32
  %xor3339 = xor i32 %conv3337, %conv3338
  %conv3340 = trunc i32 %xor3339 to i16
  %1222 = load i32* @_ZL5g_622, align 4
  %conv3341 = trunc i32 %1222 to i16
  %call3342 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv3340, i16 zeroext %conv3341)
  %conv3343 = zext i16 %call3342 to i32
  %1223 = load i32* @_ZL5g_168, align 4
  %or3344 = or i32 %conv3343, %1223
  %conv3345 = trunc i32 %or3344 to i16
  %1224 = load i16* @_ZL6g_1066, align 2
  %conv3346 = zext i16 %1224 to i32
  %call3347 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv3345, i32 %conv3346)
  %conv3348 = zext i16 %call3347 to i32
  %call3349 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %1216, i32 %conv3348)
  %cmp3350 = icmp ne i32 %call3349, -370781184
  br label %land.end3351

land.end3351:                                     ; preds = %land.rhs3322, %for.body3253
  %1225 = phi i1 [ false, %for.body3253 ], [ %cmp3350, %land.rhs3322 ]
  %conv3352 = zext i1 %1225 to i32
  %call3353 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv3319, i32 %conv3352)
  %conv3354 = sext i16 %call3353 to i32
  %1226 = load i32* %l_1952, align 4
  %xor3355 = xor i32 %conv3354, %1226
  %1227 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 2), align 4
  %or3356 = or i32 %xor3355, %1227
  %cmp3357 = icmp ule i32 %or3356, -2
  %conv3358 = zext i1 %cmp3357 to i32
  %xor3359 = xor i32 %conv3358, 28011
  %1228 = load i32* @_ZL5g_622, align 4
  %cmp3360 = icmp ult i32 %xor3359, %1228
  %conv3361 = zext i1 %cmp3360 to i32
  %1229 = load i16* %l_1872, align 2
  %conv3362 = sext i16 %1229 to i32
  %cmp3363 = icmp sge i32 %conv3361, %conv3362
  %conv3364 = zext i1 %cmp3363 to i32
  %call3365 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv3364, i32 -1)
  %conv3366 = trunc i32 %call3365 to i16
  %call3367 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv3366, i32 8)
  %call3368 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %call3367)
  %conv3369 = sext i16 %call3368 to i32
  %xor3370 = xor i32 1, %conv3369
  %arrayidx3371 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx3372 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx3371, i32 0, i64 4
  %arrayidx3373 = getelementptr inbounds [6 x i32]* %arrayidx3372, i32 0, i64 5
  store i32 %xor3370, i32* %arrayidx3373, align 4
  %conv3374 = trunc i32 %xor3370 to i16
  %call3375 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv3374, i16 signext 7)
  %tobool3376 = icmp ne i16 %call3375, 0
  br i1 %tobool3376, label %land.rhs3377, label %land.end3379

land.rhs3377:                                     ; preds = %land.end3351
  %1230 = load i16* @_ZL6g_1736, align 2
  %tobool3378 = icmp ne i16 %1230, 0
  br label %land.end3379

land.end3379:                                     ; preds = %land.rhs3377, %land.end3351
  %1231 = phi i1 [ false, %land.end3351 ], [ %tobool3378, %land.rhs3377 ]
  %conv3380 = zext i1 %1231 to i16
  %arrayidx3381 = getelementptr inbounds [7 x i32]* %l_1887, i32 0, i64 2
  %1232 = load i32* %arrayidx3381, align 4
  %call3382 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv3380, i32 %1232)
  %conv3383 = sext i16 %call3382 to i32
  %xor3384 = xor i32 %1212, %conv3383
  %1233 = load i16* %l_1629, align 2
  %conv3385 = zext i16 %1233 to i32
  %or3386 = or i32 %xor3384, %conv3385
  %tobool3387 = icmp ne i32 %or3386, 0
  br i1 %tobool3387, label %lor.end3391, label %lor.rhs3388

lor.rhs3388:                                      ; preds = %land.end3379
  %arrayidx3389 = getelementptr inbounds [7 x i32]* %l_1887, i32 0, i64 4
  %1234 = load i32* %arrayidx3389, align 4
  %tobool3390 = icmp ne i32 %1234, 0
  br label %lor.end3391

lor.end3391:                                      ; preds = %lor.rhs3388, %land.end3379
  %1235 = phi i1 [ true, %land.end3379 ], [ %tobool3390, %lor.rhs3388 ]
  %conv3392 = zext i1 %1235 to i32
  %call3393 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %conv3392)
  store i32 %call3393, i32* @_ZL5g_859, align 4
  %cmp3394 = icmp sle i32 %call3393, 1862434358
  %conv3395 = zext i1 %cmp3394 to i32
  %1236 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 2), align 4
  %cmp3396 = icmp ugt i32 %conv3395, %1236
  %conv3397 = zext i1 %cmp3396 to i32
  %1237 = load i32* %l_1881, align 4
  %and3398 = and i32 %1237, %conv3397
  store i32 %and3398, i32* %l_1881, align 4
  %cmp3399 = icmp sge i32 %conv3313, %and3398
  %conv3400 = zext i1 %cmp3399 to i16
  %call3401 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3312, i16 signext %conv3400)
  %conv3402 = sext i16 %call3401 to i32
  %cmp3403 = icmp uge i32 %conv3402, -597758249
  br i1 %cmp3403, label %if.then3404, label %if.else3468

if.then3404:                                      ; preds = %lor.end3391
  store i32 1, i32* %l_1972, align 4
  %1238 = load i32* %l_1955, align 4
  %1239 = load volatile i32* @_ZL5g_778, align 4
  %1240 = load i16* @_ZL5g_394, align 2
  store i16 -19188, i16* @_ZL4g_60, align 2
  %call3405 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %1240, i16 signext -19188)
  %conv3406 = sext i16 %call3405 to i32
  %cmp3407 = icmp slt i32 -10, %conv3406
  br i1 %cmp3407, label %lor.end3427, label %lor.rhs3408

lor.rhs3408:                                      ; preds = %if.then3404
  %1241 = load i16* @_ZL4g_60, align 2
  %1242 = load i32* %l_1972, align 4
  %tobool3409 = icmp ne i32 %1242, 0
  br i1 %tobool3409, label %land.rhs3410, label %land.end3415

land.rhs3410:                                     ; preds = %lor.rhs3408
  %1243 = load i32* %l_1771, align 4
  %cmp3411 = icmp eq i32 %1243, 50903
  %conv3412 = zext i1 %cmp3411 to i16
  %1244 = load i16* @_ZL6g_1736, align 2
  %call3413 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv3412, i16 zeroext %1244)
  %tobool3414 = icmp ne i16 %call3413, 0
  br label %land.end3415

land.end3415:                                     ; preds = %land.rhs3410, %lor.rhs3408
  %1245 = phi i1 [ false, %lor.rhs3408 ], [ %tobool3414, %land.rhs3410 ]
  %conv3416 = zext i1 %1245 to i32
  %call3417 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv3416, i32 -183838184)
  %call3418 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %1241, i32 %call3417)
  %conv3419 = zext i16 %call3418 to i32
  %cmp3420 = icmp slt i32 %conv3419, -9
  %conv3421 = zext i1 %cmp3420 to i16
  %1246 = load i32* @_ZL5g_622, align 4
  %conv3422 = trunc i32 %1246 to i16
  %call3423 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3421, i16 zeroext %conv3422)
  %call3424 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %call3423, i32 12)
  %conv3425 = sext i16 %call3424 to i32
  %cmp3426 = icmp sle i32 %conv3425, -2
  br label %lor.end3427

lor.end3427:                                      ; preds = %land.end3415, %if.then3404
  %1247 = phi i1 [ true, %if.then3404 ], [ %cmp3426, %land.end3415 ]
  %conv3428 = zext i1 %1247 to i32
  %1248 = load i32* %l_1972, align 4
  %and3429 = and i32 %conv3428, %1248
  %1249 = load i32* %l_1771, align 4
  %call3430 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %and3429, i32 %1249)
  %cmp3431 = icmp ult i32 %call3430, 45353
  %conv3432 = zext i1 %cmp3431 to i16
  %arrayidx3433 = getelementptr inbounds [4 x [6 x [6 x i32]]]* %l_1891, i32 0, i64 1
  %arrayidx3434 = getelementptr inbounds [6 x [6 x i32]]* %arrayidx3433, i32 0, i64 0
  %arrayidx3435 = getelementptr inbounds [6 x i32]* %arrayidx3434, i32 0, i64 4
  %1250 = load i32* %arrayidx3435, align 4
  %conv3436 = trunc i32 %1250 to i16
  %call3437 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv3432, i16 zeroext %conv3436)
  %conv3438 = zext i16 %call3437 to i32
  %1251 = load i32* %l_1885, align 4
  %xor3439 = xor i32 %conv3438, %1251
  %tobool3440 = icmp ne i32 %xor3439, 0
  br i1 %tobool3440, label %land.rhs3441, label %land.end3443

land.rhs3441:                                     ; preds = %lor.end3427
  %1252 = load i32* @_ZL5g_168, align 4
  %tobool3442 = icmp ne i32 %1252, 0
  br label %land.end3443

land.end3443:                                     ; preds = %land.rhs3441, %lor.end3427
  %1253 = phi i1 [ false, %lor.end3427 ], [ %tobool3442, %land.rhs3441 ]
  %conv3444 = zext i1 %1253 to i32
  %cmp3445 = icmp sle i32 %1239, %conv3444
  %conv3446 = zext i1 %cmp3445 to i32
  %or3447 = or i32 %conv3446, 104213763
  %neg3448 = xor i32 %or3447, -1
  %1254 = load i32* @_ZL5g_398, align 4
  %and3449 = and i32 %neg3448, %1254
  %cmp3450 = icmp eq i32 %1238, %and3449
  %conv3451 = zext i1 %cmp3450 to i16
  %call3452 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv3451, i32 10)
  %conv3453 = sext i16 %call3452 to i32
  %1255 = load i16* @_ZL6g_1580, align 2
  %conv3454 = sext i16 %1255 to i32
  %cmp3455 = icmp sge i32 %conv3453, %conv3454
  %conv3456 = zext i1 %cmp3455 to i32
  %arrayidx3457 = getelementptr inbounds [7 x [4 x [2 x i32]]]* %l_1890, i32 0, i64 5
  %arrayidx3458 = getelementptr inbounds [4 x [2 x i32]]* %arrayidx3457, i32 0, i64 0
  %arrayidx3459 = getelementptr inbounds [2 x i32]* %arrayidx3458, i32 0, i64 0
  %1256 = load i32* %arrayidx3459, align 4
  %cmp3460 = icmp eq i32 %conv3456, %1256
  %conv3461 = zext i1 %cmp3460 to i32
  store i32 %conv3461, i32* @_ZL6g_1873, align 4
  %1257 = load i32* %l_953, align 4
  %tobool3462 = icmp ne i32 %1257, 0
  br i1 %tobool3462, label %lor.end3465, label %lor.rhs3463

lor.rhs3463:                                      ; preds = %land.end3443
  %1258 = load i16* @_ZL4g_56, align 2
  %tobool3464 = icmp ne i16 %1258, 0
  br label %lor.end3465

lor.end3465:                                      ; preds = %lor.rhs3463, %land.end3443
  %1259 = phi i1 [ true, %land.end3443 ], [ %tobool3464, %lor.rhs3463 ]
  %conv3466 = zext i1 %1259 to i32
  store i32 %conv3466, i32* @_ZL3g_2, align 4
  %call3467 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 -10, i32 %conv3466)
  store i32 %call3467, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 5, i64 4), align 4
  br label %if.end3518

if.else3468:                                      ; preds = %lor.end3391
  store i32 -1039022019, i32* %l_1983, align 4
  store i32 0, i32* %i3469, align 4
  br label %for.cond3470

for.cond3470:                                     ; preds = %for.inc3475, %if.else3468
  %1260 = load i32* %i3469, align 4
  %cmp3471 = icmp slt i32 %1260, 3
  br i1 %cmp3471, label %for.body3472, label %for.end3477

for.body3472:                                     ; preds = %for.cond3470
  %1261 = load i32* %i3469, align 4
  %idxprom3473 = sext i32 %1261 to i64
  %arrayidx3474 = getelementptr inbounds [3 x i32]* %l_1993, i32 0, i64 %idxprom3473
  store i32 -1, i32* %arrayidx3474, align 4
  br label %for.inc3475

for.inc3475:                                      ; preds = %for.body3472
  %1262 = load i32* %i3469, align 4
  %inc3476 = add nsw i32 %1262, 1
  store i32 %inc3476, i32* %i3469, align 4
  br label %for.cond3470

for.end3477:                                      ; preds = %for.cond3470
  %1263 = load i32* @_ZL5g_168, align 4
  %1264 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  store i32 %1264, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call3478 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %1264, i32 -19824)
  %conv3479 = trunc i32 %call3478 to i16
  %call3480 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv3479, i16 zeroext 5804)
  %conv3481 = zext i16 %call3480 to i32
  %1265 = load i32* %l_1983, align 4
  %cmp3482 = icmp slt i32 %conv3481, %1265
  %conv3483 = zext i1 %cmp3482 to i32
  %call3484 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext -29714, i32 0)
  %1266 = load i32* %l_1879, align 4
  %call3485 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 0, i32 %1266)
  %tobool3486 = icmp ne i32 %call3485, 0
  %lnot3487 = xor i1 %tobool3486, true
  %conv3488 = zext i1 %lnot3487 to i32
  %1267 = load i32* %l_1952, align 4
  %and3489 = and i32 %conv3488, %1267
  %1268 = load i32* @_ZL4g_48, align 4
  %xor3490 = xor i32 %and3489, %1268
  %tobool3491 = icmp ne i32 %xor3490, 0
  br i1 %tobool3491, label %lor.end3494, label %lor.rhs3492

lor.rhs3492:                                      ; preds = %for.end3477
  %1269 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %tobool3493 = icmp ne i32 %1269, 0
  br label %lor.end3494

lor.end3494:                                      ; preds = %lor.rhs3492, %for.end3477
  %1270 = phi i1 [ true, %for.end3477 ], [ %tobool3493, %lor.rhs3492 ]
  %conv3495 = zext i1 %1270 to i32
  %1271 = load i32* @_ZL4g_33, align 4
  %cmp3496 = icmp eq i32 %conv3495, %1271
  %conv3497 = zext i1 %cmp3496 to i16
  %arrayidx3498 = getelementptr inbounds [7 x i32]* %l_1887, i32 0, i64 0
  %1272 = load i32* %arrayidx3498, align 4
  %conv3499 = trunc i32 %1272 to i16
  %call3500 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3497, i16 signext %conv3499)
  %conv3501 = sext i16 %call3500 to i32
  %cmp3502 = icmp ne i32 %conv3501, 5
  %conv3503 = zext i1 %cmp3502 to i16
  %call3504 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call3484, i16 signext %conv3503)
  %conv3505 = sext i16 %call3504 to i32
  %cmp3506 = icmp slt i32 %conv3483, %conv3505
  %conv3507 = zext i1 %cmp3506 to i32
  %1273 = load i32* %l_1952, align 4
  %cmp3508 = icmp uge i32 %conv3507, %1273
  %conv3509 = zext i1 %cmp3508 to i32
  %and3510 = and i32 1, %conv3509
  %cmp3511 = icmp ugt i32 %1263, %and3510
  %conv3512 = zext i1 %cmp3511 to i32
  %arrayidx3513 = getelementptr inbounds [3 x i32]* %l_1993, i32 0, i64 1
  store i32 %conv3512, i32* %arrayidx3513, align 4
  %1274 = load volatile i32* @_ZL5g_778, align 4
  %tobool3514 = icmp ne i32 %1274, 0
  br i1 %tobool3514, label %if.then3515, label %if.end3516

if.then3515:                                      ; preds = %lor.end3494
  br label %for.end3523

if.end3516:                                       ; preds = %lor.end3494
  %arrayidx3517 = getelementptr inbounds [3 x i32]* %l_1993, i32 0, i64 1
  store i32 -262417825, i32* %arrayidx3517, align 4
  br label %if.end3518

if.end3518:                                       ; preds = %if.end3516, %lor.end3465
  br label %for.inc3519

for.inc3519:                                      ; preds = %if.end3518
  %1275 = load i32* %l_1589, align 4
  %conv3520 = trunc i32 %1275 to i16
  %call3521 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv3520, i16 signext 9)
  %conv3522 = sext i16 %call3521 to i32
  store i32 %conv3522, i32* %l_1589, align 4
  br label %for.cond3251

for.end3523:                                      ; preds = %if.then3515, %for.cond3251
  %1276 = load i32* %l_1923, align 4
  %call3524 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext 4, i32 5)
  %conv3525 = zext i16 %call3524 to i32
  %or3526 = or i32 %1276, %conv3525
  %tobool3527 = icmp ne i32 %or3526, 0
  br i1 %tobool3527, label %lor.end3584, label %lor.rhs3528

lor.rhs3528:                                      ; preds = %for.end3523
  %arrayidx3529 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 0
  %1277 = load i32* %arrayidx3529, align 4
  %1278 = load i32* %l_2000, align 4
  %xor3530 = xor i32 %1278, %1277
  store i32 %xor3530, i32* %l_2000, align 4
  %1279 = load i32* %l_1878, align 4
  %1280 = load i16* %l_1629, align 2
  %conv3531 = zext i16 %1280 to i32
  %cmp3532 = icmp slt i32 %1279, %conv3531
  %conv3533 = zext i1 %cmp3532 to i16
  %1281 = load i32* @_ZL6g_1834, align 4
  %inc3534 = add i32 %1281, 1
  store i32 %inc3534, i32* @_ZL6g_1834, align 4
  %tobool3535 = icmp ne i32 %inc3534, 0
  br i1 %tobool3535, label %land.lhs.true3536, label %land.end3557

land.lhs.true3536:                                ; preds = %lor.rhs3528
  %1282 = load i32* %l_1877, align 4
  %conv3537 = trunc i32 %1282 to i16
  %arrayidx3538 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 0
  %1283 = load i32* %arrayidx3538, align 4
  %xor3539 = xor i32 %1283, -1516431589
  %cmp3540 = icmp ult i32 %xor3539, 61278
  %conv3541 = zext i1 %cmp3540 to i32
  %cmp3542 = icmp eq i32 %conv3541, 3
  %conv3543 = zext i1 %cmp3542 to i32
  %cmp3544 = icmp slt i32 %conv3543, 42830
  %conv3545 = zext i1 %cmp3544 to i16
  %call3546 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3537, i16 zeroext %conv3545)
  %conv3547 = zext i16 %call3546 to i32
  %1284 = load i32* @_ZL4g_55, align 4
  %cmp3548 = icmp ne i32 %conv3547, %1284
  %conv3549 = zext i1 %cmp3548 to i32
  %1285 = load i32* %l_1877, align 4
  %cmp3550 = icmp sle i32 %conv3549, %1285
  %conv3551 = zext i1 %cmp3550 to i32
  %cmp3552 = icmp sle i32 61049, %conv3551
  %conv3553 = zext i1 %cmp3552 to i32
  %1286 = load i32* %l_1882, align 4
  %xor3554 = xor i32 %1286, %conv3553
  store i32 %xor3554, i32* %l_1882, align 4
  %tobool3555 = icmp ne i32 %xor3554, 0
  br i1 %tobool3555, label %land.rhs3556, label %land.end3557

land.rhs3556:                                     ; preds = %land.lhs.true3536
  br label %land.end3557

land.end3557:                                     ; preds = %land.rhs3556, %land.lhs.true3536, %lor.rhs3528
  %1287 = phi i1 [ false, %land.lhs.true3536 ], [ false, %lor.rhs3528 ], [ true, %land.rhs3556 ]
  %conv3558 = zext i1 %1287 to i16
  %1288 = load i32* %l_1923, align 4
  %conv3559 = trunc i32 %1288 to i16
  %call3560 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv3558, i16 signext %conv3559)
  %conv3561 = sext i16 %call3560 to i32
  %cmp3562 = icmp ugt i32 %conv3561, 65535
  %conv3563 = zext i1 %cmp3562 to i32
  store i32 %conv3563, i32* %l_2021, align 4
  %conv3564 = trunc i32 %conv3563 to i16
  store i16 %conv3564, i16* @_ZL6g_1477, align 2
  %call3565 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext 3, i16 signext %conv3564)
  %conv3566 = sext i16 %call3565 to i32
  %cmp3567 = icmp sgt i32 %conv3566, 1
  %conv3568 = zext i1 %cmp3567 to i16
  %1289 = load i16* @_ZL5g_394, align 2
  %conv3569 = zext i16 %1289 to i32
  %call3570 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv3568, i32 %conv3569)
  %conv3571 = zext i16 %call3570 to i32
  %call3572 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv3533, i32 %conv3571)
  %call3573 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call3572, i16 signext 1)
  %conv3574 = sext i16 %call3573 to i32
  %cmp3575 = icmp sgt i32 %conv3574, 2
  %conv3576 = zext i1 %cmp3575 to i16
  %call3577 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv3576, i32 11)
  %conv3578 = zext i16 %call3577 to i32
  %1290 = load i32* %l_1955, align 4
  %call3579 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv3578, i32 %1290)
  %conv3580 = trunc i32 %call3579 to i16
  %call3581 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv3580, i16 zeroext 15733)
  %conv3582 = zext i16 %call3581 to i32
  %cmp3583 = icmp sle i32 %xor3530, %conv3582
  br label %lor.end3584

lor.end3584:                                      ; preds = %land.end3557, %for.end3523
  %1291 = phi i1 [ true, %for.end3523 ], [ %cmp3583, %land.end3557 ]
  %conv3585 = zext i1 %1291 to i32
  %1292 = load i16* @_ZL6g_1066, align 2
  %conv3586 = zext i16 %1292 to i32
  %or3587 = or i32 %conv3586, %conv3585
  %conv3588 = trunc i32 %or3587 to i16
  store i16 %conv3588, i16* @_ZL6g_1066, align 2
  %1293 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %call3589 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv3588, i32 %1293)
  %1294 = load i32* %l_1923, align 4
  %conv3590 = trunc i32 %1294 to i16
  %call3591 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call3589, i16 zeroext %conv3590)
  %tobool3592 = icmp ne i16 %call3591, 0
  br i1 %tobool3592, label %if.then3593, label %if.else3609

if.then3593:                                      ; preds = %lor.end3584
  store i32 0, i32* %l_1880, align 4
  br label %for.cond3594

for.cond3594:                                     ; preds = %for.inc3606, %if.then3593
  %1295 = load i32* %l_1880, align 4
  %cmp3595 = icmp sgt i32 %1295, -21
  br i1 %cmp3595, label %for.body3596, label %for.end3608

for.body3596:                                     ; preds = %for.cond3594
  store i32 -1859847732, i32* %l_2024, align 4
  store i32 7, i32* %l_2029, align 4
  %1296 = load i32* %l_2024, align 4
  %tobool3597 = icmp ne i32 %1296, 0
  br i1 %tobool3597, label %land.rhs3598, label %land.end3603

land.rhs3598:                                     ; preds = %for.body3596
  %1297 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %conv3599 = trunc i32 %1297 to i16
  %call3600 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext 27566, i16 zeroext 1)
  %call3601 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv3599, i16 zeroext %call3600)
  %tobool3602 = icmp ne i16 %call3601, 0
  br label %land.end3603

land.end3603:                                     ; preds = %land.rhs3598, %for.body3596
  %1298 = phi i1 [ false, %for.body3596 ], [ %tobool3602, %land.rhs3598 ]
  %conv3604 = zext i1 %1298 to i32
  %1299 = load i32* %l_2029, align 4
  %xor3605 = xor i32 %1299, %conv3604
  store i32 %xor3605, i32* %l_2029, align 4
  br label %for.inc3606

for.inc3606:                                      ; preds = %land.end3603
  %1300 = load i32* %l_1880, align 4
  %dec3607 = add nsw i32 %1300, -1
  store i32 %dec3607, i32* %l_1880, align 4
  br label %for.cond3594

for.end3608:                                      ; preds = %for.cond3594
  br label %if.end3913

if.else3609:                                      ; preds = %lor.end3584
  store i32 990253708, i32* %l_2064, align 4
  %1301 = load volatile i16* @_ZL5g_277, align 2
  %conv3610 = zext i16 %1301 to i32
  %arrayidx3611 = getelementptr inbounds [7 x [4 x [2 x i32]]]* %l_1890, i32 0, i64 2
  %arrayidx3612 = getelementptr inbounds [4 x [2 x i32]]* %arrayidx3611, i32 0, i64 1
  %arrayidx3613 = getelementptr inbounds [2 x i32]* %arrayidx3612, i32 0, i64 0
  %1302 = load i32* %arrayidx3613, align 4
  %tobool3614 = icmp ne i32 %1302, 0
  %lnot3615 = xor i1 %tobool3614, true
  %conv3616 = zext i1 %lnot3615 to i32
  %1303 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %cmp3617 = icmp ugt i32 %conv3616, %1303
  %conv3618 = zext i1 %cmp3617 to i32
  store i32 %conv3618, i32* %l_1853, align 4
  %conv3619 = trunc i32 %conv3618 to i16
  store i32 473255957, i32* %l_1874, align 4
  %1304 = load i32* @_ZL5g_796, align 4
  %tobool3620 = icmp ne i32 %1304, 0
  br i1 %tobool3620, label %lor.end3623, label %lor.rhs3621

lor.rhs3621:                                      ; preds = %if.else3609
  %1305 = load i16* @_ZL6g_1430, align 2
  %tobool3622 = icmp ne i16 %1305, 0
  br label %lor.end3623

lor.end3623:                                      ; preds = %lor.rhs3621, %if.else3609
  %1306 = phi i1 [ true, %if.else3609 ], [ %tobool3622, %lor.rhs3621 ]
  %conv3624 = zext i1 %1306 to i16
  %1307 = load i32* %l_1883, align 4
  store i32 %1307, i32* %l_2048, align 4
  %or3625 = or i32 %1307, 24205
  %call3626 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv3624, i32 %or3625)
  %1308 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %conv3627 = trunc i32 %1308 to i16
  %call3628 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call3626, i16 signext %conv3627)
  %conv3629 = sext i16 %call3628 to i32
  %1309 = load i32* %l_660, align 4
  %and3630 = and i32 %1309, %conv3629
  store i32 %and3630, i32* %l_660, align 4
  %1310 = load i32* @_ZL5g_489, align 4
  %call3631 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %and3630, i32 %1310)
  %xor3632 = xor i32 473255957, %call3631
  %conv3633 = trunc i32 %xor3632 to i16
  %call3634 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3619, i16 signext %conv3633)
  %tobool3635 = icmp ne i16 %call3634, 0
  br i1 %tobool3635, label %land.rhs3636, label %land.end3638

land.rhs3636:                                     ; preds = %lor.end3623
  %1311 = load i32* %l_2049, align 4
  %tobool3637 = icmp ne i32 %1311, 0
  br label %land.end3638

land.end3638:                                     ; preds = %land.rhs3636, %lor.end3623
  %1312 = phi i1 [ false, %lor.end3623 ], [ %tobool3637, %land.rhs3636 ]
  %conv3639 = zext i1 %1312 to i32
  %cmp3640 = icmp uge i32 %conv3639, -3
  %conv3641 = zext i1 %cmp3640 to i32
  %cmp3642 = icmp eq i32 1, %conv3641
  %conv3643 = zext i1 %cmp3642 to i32
  %arrayidx3644 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx3645 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx3644, i32 0, i64 4
  %arrayidx3646 = getelementptr inbounds [6 x i32]* %arrayidx3645, i32 0, i64 5
  %1313 = load i32* %arrayidx3646, align 4
  %cmp3647 = icmp sle i32 %conv3643, %1313
  %conv3648 = zext i1 %cmp3647 to i32
  %1314 = load i16* %l_1729, align 2
  %conv3649 = zext i16 %1314 to i32
  %call3650 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv3648, i32 %conv3649)
  %conv3651 = trunc i32 %call3650 to i16
  %1315 = load i16* %l_1748, align 2
  %call3652 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3651, i16 signext %1315)
  %call3653 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %call3652, i16 zeroext 1)
  %conv3654 = zext i16 %call3653 to i32
  %1316 = load i32* @_ZL5g_615, align 4
  %or3655 = or i32 %conv3654, %1316
  %or3656 = or i32 %conv3610, %or3655
  %arrayidx3657 = getelementptr inbounds [2 x [1 x i32]]* %l_2050, i32 0, i64 1
  %arrayidx3658 = getelementptr inbounds [1 x i32]* %arrayidx3657, i32 0, i64 0
  %1317 = load i32* %arrayidx3658, align 4
  %cmp3659 = icmp ule i32 %or3656, %1317
  %conv3660 = zext i1 %cmp3659 to i16
  %call3661 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv3660, i16 signext 16793)
  %conv3662 = sext i16 %call3661 to i32
  store i32 %conv3662, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 3), align 4
  %1318 = load i32* @_ZL5g_396, align 4
  %cmp3663 = icmp eq i32 %1318, 2122761323
  %conv3664 = zext i1 %cmp3663 to i32
  %1319 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %tobool3665 = icmp ne i32 %1319, 0
  br i1 %tobool3665, label %lor.end3668, label %lor.rhs3666

lor.rhs3666:                                      ; preds = %land.end3638
  %1320 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %tobool3667 = icmp ne i32 %1320, 0
  br label %lor.end3668

lor.end3668:                                      ; preds = %lor.rhs3666, %land.end3638
  %1321 = phi i1 [ true, %land.end3638 ], [ %tobool3667, %lor.rhs3666 ]
  %conv3669 = zext i1 %1321 to i32
  %cmp3670 = icmp eq i32 %conv3664, %conv3669
  %conv3671 = zext i1 %cmp3670 to i16
  %1322 = load i16* @_ZL6g_1430, align 2
  %conv3672 = sext i16 %1322 to i32
  %call3673 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 3, i32 %conv3672)
  %tobool3674 = icmp ne i32 %call3673, 0
  br i1 %tobool3674, label %lor.end3677, label %lor.rhs3675

lor.rhs3675:                                      ; preds = %lor.end3668
  %1323 = load i16* @_ZL4g_56, align 2
  %tobool3676 = icmp ne i16 %1323, 0
  br label %lor.end3677

lor.end3677:                                      ; preds = %lor.rhs3675, %lor.end3668
  %1324 = phi i1 [ true, %lor.end3668 ], [ %tobool3676, %lor.rhs3675 ]
  %conv3678 = zext i1 %1324 to i32
  %call3679 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv3671, i32 %conv3678)
  %conv3680 = zext i16 %call3679 to i32
  %1325 = load i32* %l_1878, align 4
  %and3681 = and i32 %1325, %conv3680
  store i32 %and3681, i32* %l_1878, align 4
  %1326 = load i32* %l_2064, align 4
  %1327 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 2), align 4
  %call3682 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %1326, i32 %1327)
  %neg3683 = xor i32 %call3682, -1
  %1328 = load i16* @_ZL5g_394, align 2
  %conv3684 = zext i16 %1328 to i32
  %cmp3685 = icmp ult i32 %conv3684, -1466028704
  %conv3686 = zext i1 %cmp3685 to i32
  store i32 %conv3686, i32* @_ZL4g_36, align 4
  %1329 = load i16* %l_2067, align 2
  %conv3687 = sext i16 %1329 to i32
  %call3688 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv3686, i32 %conv3687)
  %cmp3689 = icmp ugt i32 %neg3683, %call3688
  %conv3690 = zext i1 %cmp3689 to i16
  %1330 = load i16* %l_2067, align 2
  %conv3691 = sext i16 %1330 to i32
  store i32 %conv3691, i32* @_ZL5g_930, align 4
  %tobool3692 = icmp ne i32 %conv3691, 0
  %lnot3693 = xor i1 %tobool3692, true
  %conv3694 = zext i1 %lnot3693 to i32
  %and3695 = and i32 %conv3694, -1800049655
  %conv3696 = trunc i32 %and3695 to i16
  %1331 = load volatile i16* @_ZL5g_277, align 2
  %conv3697 = zext i16 %1331 to i32
  %call3698 = call i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %conv3697)
  %1332 = load i16* @_ZL4g_46, align 2
  %conv3699 = sext i16 %1332 to i32
  %and3700 = and i32 %conv3699, %call3698
  %conv3701 = trunc i32 %and3700 to i16
  store i16 %conv3701, i16* @_ZL4g_46, align 2
  %1333 = load i16* @_ZL6g_1430, align 2
  %conv3702 = sext i16 %1333 to i32
  %and3703 = and i32 %conv3702, 0
  %conv3704 = trunc i32 %and3703 to i16
  %1334 = load i32* %l_1881, align 4
  %conv3705 = trunc i32 %1334 to i16
  %call3706 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3704, i16 signext %conv3705)
  store i16 %call3706, i16* %l_2080, align 2
  %1335 = load i16* %l_2067, align 2
  %call3707 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %call3706, i16 signext %1335)
  %conv3708 = sext i16 %call3707 to i32
  %1336 = load i16* @_ZL4g_56, align 2
  %conv3709 = sext i16 %1336 to i32
  %or3710 = or i32 %conv3709, %conv3708
  %conv3711 = trunc i32 %or3710 to i16
  store i16 %conv3711, i16* @_ZL4g_56, align 2
  %conv3712 = sext i16 %conv3711 to i32
  %cmp3713 = icmp eq i32 %conv3712, 57985
  %conv3714 = zext i1 %cmp3713 to i32
  %1337 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 5), align 4
  %or3715 = or i32 %conv3714, %1337
  %conv3716 = trunc i32 %or3715 to i16
  %call3717 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv3716, i32 10)
  %call3718 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv3701, i16 signext %call3717)
  %call3719 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv3696, i16 zeroext %call3718)
  %tobool3720 = icmp ne i16 %call3719, 0
  br i1 %tobool3720, label %land.rhs3721, label %land.end3723

land.rhs3721:                                     ; preds = %lor.end3677
  %1338 = load i32* %l_1923, align 4
  %tobool3722 = icmp ne i32 %1338, 0
  br label %land.end3723

land.end3723:                                     ; preds = %land.rhs3721, %lor.end3677
  %1339 = phi i1 [ false, %lor.end3677 ], [ %tobool3722, %land.rhs3721 ]
  %conv3724 = zext i1 %1339 to i16
  %call3725 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv3690, i16 signext %conv3724)
  %conv3726 = sext i16 %call3725 to i32
  %cmp3727 = icmp ult i32 %conv3726, -9
  %conv3728 = zext i1 %cmp3727 to i32
  %1340 = load i32* %l_2000, align 4
  %or3729 = or i32 %1340, %conv3728
  store i32 %or3729, i32* %l_2000, align 4
  %arrayidx3730 = getelementptr inbounds [7 x [4 x [2 x i32]]]* %l_1890, i32 0, i64 6
  %arrayidx3731 = getelementptr inbounds [4 x [2 x i32]]* %arrayidx3730, i32 0, i64 0
  %arrayidx3732 = getelementptr inbounds [2 x i32]* %arrayidx3731, i32 0, i64 0
  store i32 %or3729, i32* %arrayidx3732, align 4
  store i32 %or3729, i32* %l_1737, align 4
  %1341 = load i32* %l_1889, align 4
  %cmp3733 = icmp sge i32 %or3729, %1341
  %conv3734 = zext i1 %cmp3733 to i16
  %1342 = load i32* @_ZL6g_1295, align 4
  %conv3735 = trunc i32 %1342 to i16
  %call3736 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv3734, i16 signext %conv3735)
  %conv3737 = sext i16 %call3736 to i32
  %call3738 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv3737, i32 0)
  %tobool3739 = icmp ne i32 %call3738, 0
  br i1 %tobool3739, label %if.then3740, label %if.else3793

if.then3740:                                      ; preds = %land.end3723
  %1343 = load i16* @_ZL6g_1580, align 2
  %conv3741 = sext i16 %1343 to i32
  %1344 = load i16* @_ZL4g_60, align 2
  %inc3742 = add i16 %1344, 1
  store i16 %inc3742, i16* @_ZL4g_60, align 2
  %1345 = load i32* %l_2064, align 4
  %tobool3743 = icmp ne i32 %1345, 0
  br i1 %tobool3743, label %land.rhs3744, label %land.end3769

land.rhs3744:                                     ; preds = %if.then3740
  %arrayidx3745 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 0
  %arrayidx3746 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx3745, i32 0, i64 3
  %arrayidx3747 = getelementptr inbounds [6 x i32]* %arrayidx3746, i32 0, i64 1
  %1346 = load i32* %arrayidx3747, align 4
  %conv3748 = trunc i32 %1346 to i16
  %call3749 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -8, i16 zeroext %conv3748)
  %call3750 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext -2400, i16 zeroext 0)
  %conv3751 = zext i16 %call3750 to i32
  %call3752 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %call3749, i32 %conv3751)
  %1347 = load i32* %l_1300, align 4
  %conv3753 = trunc i32 %1347 to i16
  %call3754 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %call3752, i16 zeroext %conv3753)
  %conv3755 = zext i16 %call3754 to i32
  %cmp3756 = icmp ult i32 %conv3755, -996734770
  %conv3757 = zext i1 %cmp3756 to i32
  %1348 = load i32* %l_1801, align 4
  %cmp3758 = icmp ult i32 %conv3757, %1348
  %conv3759 = zext i1 %cmp3758 to i16
  %1349 = load i32* @_ZL6g_1873, align 4
  %conv3760 = trunc i32 %1349 to i16
  %call3761 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv3759, i16 signext %conv3760)
  %tobool3762 = icmp ne i16 %call3761, 0
  br i1 %tobool3762, label %lor.end3765, label %lor.rhs3763

lor.rhs3763:                                      ; preds = %land.rhs3744
  %1350 = load i32* @_ZL6g_2106, align 4
  %tobool3764 = icmp ne i32 %1350, 0
  br label %lor.end3765

lor.end3765:                                      ; preds = %lor.rhs3763, %land.rhs3744
  %1351 = phi i1 [ true, %land.rhs3744 ], [ %tobool3764, %lor.rhs3763 ]
  %conv3766 = zext i1 %1351 to i32
  %cmp3767 = icmp eq i32 0, %conv3766
  br label %land.end3769

land.end3769:                                     ; preds = %lor.end3765, %if.then3740
  %1352 = phi i1 [ false, %if.then3740 ], [ %cmp3767, %lor.end3765 ]
  %conv3770 = zext i1 %1352 to i32
  %1353 = load i32* @_ZL4g_33, align 4
  %call3771 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv3770, i32 %1353)
  %neg3772 = xor i32 %call3771, -1
  %cmp3773 = icmp ule i32 %neg3772, 248928469
  %conv3774 = zext i1 %cmp3773 to i32
  %1354 = load i32* @_ZL5g_796, align 4
  %call3775 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv3774, i32 %1354)
  %1355 = load i16* %l_1876, align 2
  %conv3776 = sext i16 %1355 to i32
  %xor3777 = xor i32 %call3775, %conv3776
  %conv3778 = trunc i32 %xor3777 to i16
  %call3779 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %inc3742, i16 zeroext %conv3778)
  %conv3780 = zext i16 %call3779 to i32
  %1356 = load volatile i32* @_ZL6g_1020, align 4
  %or3781 = or i32 %conv3780, %1356
  %conv3782 = trunc i32 %or3781 to i16
  store i16 %conv3782, i16* @_ZL4g_46, align 2
  %call3783 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv3782, i16 signext 26656)
  %conv3784 = sext i16 %call3783 to i32
  %call3785 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv3741, i32 %conv3784)
  %cmp3786 = icmp uge i32 %call3785, -10
  %conv3787 = zext i1 %cmp3786 to i32
  %arrayidx3788 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx3789 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx3788, i32 0, i64 4
  %arrayidx3790 = getelementptr inbounds [6 x i32]* %arrayidx3789, i32 0, i64 5
  store i32 %conv3787, i32* %arrayidx3790, align 4
  %neg3791 = xor i32 %conv3787, -1
  %1357 = load i32* %l_1889, align 4
  %xor3792 = xor i32 %1357, %neg3791
  store i32 %xor3792, i32* %l_1889, align 4
  %1358 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  store i32 %1358, i32* %retval
  br label %return

if.else3793:                                      ; preds = %land.end3723
  store i16 29475, i16* %l_2142, align 2
  store i32 4, i32* %l_2146, align 4
  %1359 = load i32* %l_820, align 4
  %neg3794 = xor i32 %1359, -1
  %1360 = load volatile i16* @_ZL5g_277, align 2
  %1361 = load i16* @_ZL6g_1477, align 2
  %call3795 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %1360, i16 signext %1361)
  %conv3796 = sext i16 %call3795 to i32
  %1362 = load i32* @_ZL5g_396, align 4
  %cmp3797 = icmp ne i32 %conv3796, %1362
  br i1 %cmp3797, label %lor.end3800, label %lor.rhs3798

lor.rhs3798:                                      ; preds = %if.else3793
  %1363 = load i32* @_ZL3g_2, align 4
  %tobool3799 = icmp ne i32 %1363, 0
  br label %lor.end3800

lor.end3800:                                      ; preds = %lor.rhs3798, %if.else3793
  %1364 = phi i1 [ true, %if.else3793 ], [ %tobool3799, %lor.rhs3798 ]
  %conv3801 = zext i1 %1364 to i16
  store i16 %conv3801, i16* @_ZL4g_60, align 2
  %1365 = load i32* %l_1771, align 4
  %tobool3802 = icmp ne i32 %1365, 0
  br i1 %tobool3802, label %land.rhs3803, label %land.end3805

land.rhs3803:                                     ; preds = %lor.end3800
  %1366 = load i16* %l_1872, align 2
  %tobool3804 = icmp ne i16 %1366, 0
  br label %land.end3805

land.end3805:                                     ; preds = %land.rhs3803, %lor.end3800
  %1367 = phi i1 [ false, %lor.end3800 ], [ %tobool3804, %land.rhs3803 ]
  %conv3806 = zext i1 %1367 to i32
  %arrayidx3807 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 2
  %1368 = load i16* %arrayidx3807, align 2
  %1369 = load i32* %l_2000, align 4
  %conv3808 = trunc i32 %1369 to i16
  %call3809 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %1368, i16 signext %conv3808)
  %conv3810 = sext i16 %call3809 to i32
  %1370 = load i32* @_ZL5g_615, align 4
  %call3811 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv3810, i32 %1370)
  %1371 = load i16* @_ZL5g_394, align 2
  %conv3812 = zext i16 %1371 to i32
  %and3813 = and i32 %conv3812, %call3811
  %conv3814 = trunc i32 %and3813 to i16
  store i16 %conv3814, i16* @_ZL5g_394, align 2
  %conv3815 = zext i16 %conv3814 to i32
  %1372 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %cmp3816 = icmp ult i32 %conv3815, %1372
  %conv3817 = zext i1 %cmp3816 to i16
  %call3818 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext -9124, i16 zeroext %conv3817)
  %conv3819 = zext i16 %call3818 to i32
  %cmp3820 = icmp sle i32 %conv3806, %conv3819
  %conv3821 = zext i1 %cmp3820 to i32
  %cmp3822 = icmp ne i32 %conv3821, 39981
  %conv3823 = zext i1 %cmp3822 to i16
  %call3824 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3823, i16 zeroext 20182)
  %call3825 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv3801, i16 zeroext %call3824)
  %conv3826 = zext i16 %call3825 to i32
  %1373 = load i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 1, i64 0, i64 0), align 2
  %conv3827 = zext i16 %1373 to i32
  %xor3828 = xor i32 %conv3826, %conv3827
  %1374 = load i32* @_ZL6g_2106, align 4
  %xor3829 = xor i32 %xor3828, %1374
  %or3830 = or i32 %xor3829, 1
  %conv3831 = trunc i32 %or3830 to i16
  %call3832 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv3831, i16 signext 21204)
  %conv3833 = sext i16 %call3832 to i32
  %cmp3834 = icmp ne i32 %neg3794, %conv3833
  br i1 %cmp3834, label %lor.end3837, label %lor.rhs3835

lor.rhs3835:                                      ; preds = %land.end3805
  %1375 = load i32* @_ZL6g_1873, align 4
  %tobool3836 = icmp ne i32 %1375, 0
  br label %lor.end3837

lor.end3837:                                      ; preds = %lor.rhs3835, %land.end3805
  %1376 = phi i1 [ true, %land.end3805 ], [ %tobool3836, %lor.rhs3835 ]
  %conv3838 = zext i1 %1376 to i32
  %1377 = load i32* %l_2064, align 4
  %call3839 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv3838, i32 %1377)
  store i32 %call3839, i32* %l_2021, align 4
  %1378 = load i32* %l_1882, align 4
  %conv3840 = trunc i32 %1378 to i16
  %1379 = load i32* @_ZL6g_2106, align 4
  %conv3841 = trunc i32 %1379 to i16
  %1380 = load i32* @_ZL6g_1021, align 4
  %1381 = load i16* %l_2142, align 2
  %conv3842 = zext i16 %1381 to i32
  %and3843 = and i32 %1380, %conv3842
  %tobool3844 = icmp ne i32 %and3843, 0
  br i1 %tobool3844, label %lor.end3862, label %lor.rhs3845

lor.rhs3845:                                      ; preds = %lor.end3837
  %1382 = load i32* %l_2064, align 4
  %cmp3846 = icmp slt i32 %1382, 1
  %conv3847 = zext i1 %cmp3846 to i32
  %1383 = load i16* %l_1876, align 2
  %conv3848 = sext i16 %1383 to i32
  %cmp3849 = icmp sge i32 %conv3847, %conv3848
  %conv3850 = zext i1 %cmp3849 to i32
  %cmp3851 = icmp ne i32 %conv3850, -965789336
  %conv3852 = zext i1 %cmp3851 to i32
  %cmp3853 = icmp ule i32 %conv3852, 3
  %conv3854 = zext i1 %cmp3853 to i32
  %1384 = load i16* @_ZL5g_394, align 2
  %conv3855 = zext i16 %1384 to i32
  %or3856 = or i32 %conv3855, %conv3854
  %conv3857 = trunc i32 %or3856 to i16
  store i16 %conv3857, i16* @_ZL5g_394, align 2
  %call3858 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -14055, i16 zeroext %conv3857)
  %conv3859 = zext i16 %call3858 to i32
  %1385 = load i16* %l_2142, align 2
  %conv3860 = zext i16 %1385 to i32
  %cmp3861 = icmp slt i32 %conv3859, %conv3860
  br label %lor.end3862

lor.end3862:                                      ; preds = %lor.rhs3845, %lor.end3837
  %1386 = phi i1 [ true, %lor.end3837 ], [ %cmp3861, %lor.rhs3845 ]
  %conv3863 = zext i1 %1386 to i32
  %1387 = load i32* @_ZL5g_622, align 4
  %cmp3864 = icmp uge i32 %conv3863, %1387
  br i1 %cmp3864, label %land.rhs3865, label %land.end3866

land.rhs3865:                                     ; preds = %lor.end3862
  br label %land.end3866

land.end3866:                                     ; preds = %land.rhs3865, %lor.end3862
  %1388 = phi i1 [ false, %lor.end3862 ], [ true, %land.rhs3865 ]
  %conv3867 = zext i1 %1388 to i32
  %1389 = load i32* %l_2064, align 4
  %cmp3868 = icmp sle i32 %conv3867, %1389
  %conv3869 = zext i1 %cmp3868 to i32
  %1390 = load i32* %l_2064, align 4
  %cmp3870 = icmp ne i32 %conv3869, %1390
  %conv3871 = zext i1 %cmp3870 to i16
  %call3872 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv3871, i32 7)
  %conv3873 = sext i16 %call3872 to i32
  %cmp3874 = icmp eq i32 -4, %conv3873
  %conv3875 = zext i1 %cmp3874 to i32
  %1391 = load i16* @_ZL6g_1430, align 2
  %conv3876 = sext i16 %1391 to i32
  %cmp3877 = icmp sge i32 %conv3875, %conv3876
  br i1 %cmp3877, label %lor.end3879, label %lor.rhs3878

lor.rhs3878:                                      ; preds = %land.end3866
  br label %lor.end3879

lor.end3879:                                      ; preds = %lor.rhs3878, %land.end3866
  %1392 = phi i1 [ true, %land.end3866 ], [ true, %lor.rhs3878 ]
  %conv3880 = zext i1 %1392 to i32
  %1393 = load i32* %l_2064, align 4
  %cmp3881 = icmp sle i32 %conv3880, %1393
  %conv3882 = zext i1 %cmp3881 to i32
  %1394 = load i16* %l_2145, align 2
  %conv3883 = sext i16 %1394 to i32
  %or3884 = or i32 %conv3882, %conv3883
  %neg3885 = xor i32 %or3884, -1
  %1395 = load i32* @_ZL4g_36, align 4
  %xor3886 = xor i32 %neg3885, %1395
  %conv3887 = trunc i32 %xor3886 to i16
  store i16 %conv3887, i16* @_ZL6g_1430, align 2
  %conv3888 = sext i16 %conv3887 to i32
  %call3889 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv3841, i32 %conv3888)
  %call3890 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext 32065, i16 signext %call3889)
  %conv3891 = sext i16 %call3890 to i32
  %call3892 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv3840, i32 %conv3891)
  %1396 = load i32* @_ZL3g_2, align 4
  %conv3893 = trunc i32 %1396 to i16
  %call3894 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %call3892, i16 zeroext %conv3893)
  %tobool3895 = icmp ne i16 %call3894, 0
  br i1 %tobool3895, label %lor.end3898, label %lor.rhs3896

lor.rhs3896:                                      ; preds = %lor.end3879
  %1397 = load i32* %l_2049, align 4
  %tobool3897 = icmp ne i32 %1397, 0
  br label %lor.end3898

lor.end3898:                                      ; preds = %lor.rhs3896, %lor.end3879
  %1398 = phi i1 [ true, %lor.end3879 ], [ %tobool3897, %lor.rhs3896 ]
  %conv3899 = zext i1 %1398 to i32
  %1399 = load i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 1, i64 0, i64 2), align 2
  %conv3900 = zext i16 %1399 to i32
  %xor3901 = xor i32 %conv3899, %conv3900
  %or3902 = or i32 %xor3901, 58585
  %tobool3903 = icmp ne i32 %or3902, 0
  br i1 %tobool3903, label %land.rhs3904, label %land.end3906

land.rhs3904:                                     ; preds = %lor.end3898
  %1400 = load i32* %l_2064, align 4
  %tobool3905 = icmp ne i32 %1400, 0
  br label %land.end3906

land.end3906:                                     ; preds = %land.rhs3904, %lor.end3898
  %1401 = phi i1 [ false, %lor.end3898 ], [ %tobool3905, %land.rhs3904 ]
  %conv3907 = zext i1 %1401 to i32
  store i32 %conv3907, i32* %l_2146, align 4
  %conv3908 = trunc i32 %conv3907 to i16
  %1402 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 3, i64 0, i64 0), align 4
  %call3909 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv3908, i32 %1402)
  %1403 = load i32* %l_1889, align 4
  %conv3910 = trunc i32 %1403 to i16
  %call3911 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call3909, i16 zeroext %conv3910)
  %conv3912 = zext i16 %call3911 to i32
  store i32 %conv3912, i32* @_ZL4g_48, align 4
  store i32 %conv3912, i32* @_ZL6g_1295, align 4
  store i32 %conv3912, i32* @_ZL6g_1873, align 4
  %1404 = load i32* %l_2147, align 4
  store i32 %1404, i32* %retval
  br label %return

if.end3913:                                       ; preds = %for.end3608
  %1405 = load i32* @_ZL6g_2106, align 4
  %1406 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %and3914 = and i32 %1406, %1405
  store i32 %and3914, i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %1407 = load i32* @_ZL5g_796, align 4
  %inc3915 = add i32 %1407, 1
  store i32 %inc3915, i32* @_ZL5g_796, align 4
  %call3916 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext 1, i32 15)
  %tobool3917 = icmp ne i16 %call3916, 0
  br i1 %tobool3917, label %lor.end3967, label %lor.rhs3918

lor.rhs3918:                                      ; preds = %if.end3913
  %1408 = load i32* @_ZL3g_2, align 4
  %conv3919 = trunc i32 %1408 to i16
  %1409 = load i16* @_ZL6g_1430, align 2
  %conv3920 = sext i16 %1409 to i32
  %1410 = load i32* %l_2170, align 4
  %1411 = load i32* %l_1889, align 4
  %1412 = load i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 1, i64 0, i64 0), align 2
  %conv3921 = zext i16 %1412 to i32
  %xor3922 = xor i32 %conv3921, %1411
  %conv3923 = trunc i32 %xor3922 to i16
  store i16 %conv3923, i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 1, i64 0, i64 0), align 2
  %1413 = load i32* @_ZL4g_48, align 4
  %arrayidx3924 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 2
  %1414 = load i32* %arrayidx3924, align 4
  %and3925 = and i32 %1413, %1414
  %conv3926 = trunc i32 %and3925 to i16
  %1415 = load i32* @_ZL5g_166, align 4
  %conv3927 = trunc i32 %1415 to i16
  %call3928 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv3926, i16 signext %conv3927)
  %call3929 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3923, i16 zeroext %call3928)
  %1416 = load i32* @_ZL3g_2, align 4
  %call3930 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %call3929, i32 %1416)
  %conv3931 = sext i16 %call3930 to i32
  %cmp3932 = icmp ne i32 -1, %conv3931
  %conv3933 = zext i1 %cmp3932 to i32
  store i32 %conv3933, i32* %l_1166, align 4
  %conv3934 = trunc i32 %conv3933 to i16
  %1417 = load i16* @_ZL4g_56, align 2
  %call3935 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3934, i16 zeroext %1417)
  %conv3936 = zext i16 %call3935 to i32
  %and3937 = and i32 %conv3936, -5
  %conv3938 = trunc i32 %and3937 to i16
  %arrayidx3939 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 0
  %arrayidx3940 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx3939, i32 0, i64 4
  %arrayidx3941 = getelementptr inbounds [5 x i32]* %arrayidx3940, i32 0, i64 1
  %1418 = load i32* %arrayidx3941, align 4
  %conv3942 = trunc i32 %1418 to i16
  %call3943 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3938, i16 zeroext %conv3942)
  %conv3944 = zext i16 %call3943 to i32
  %cmp3945 = icmp sgt i32 %1410, %conv3944
  %conv3946 = zext i1 %cmp3945 to i32
  %1419 = load i32* @_ZL4g_36, align 4
  %and3947 = and i32 %conv3946, %1419
  %tobool3948 = icmp ne i32 %and3947, 0
  br i1 %tobool3948, label %land.rhs3949, label %land.end3951

land.rhs3949:                                     ; preds = %lor.rhs3918
  %1420 = load i16* @_ZL6g_1477, align 2
  %tobool3950 = icmp ne i16 %1420, 0
  br label %land.end3951

land.end3951:                                     ; preds = %land.rhs3949, %lor.rhs3918
  %1421 = phi i1 [ false, %lor.rhs3918 ], [ %tobool3950, %land.rhs3949 ]
  %conv3952 = zext i1 %1421 to i16
  %call3953 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv3952)
  %conv3954 = sext i16 %call3953 to i32
  %cmp3955 = icmp ne i32 %conv3920, %conv3954
  %conv3956 = zext i1 %cmp3955 to i16
  %1422 = load i32* @_ZL5g_489, align 4
  %call3957 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv3956, i32 %1422)
  %conv3958 = zext i16 %call3957 to i32
  %1423 = load volatile i32* @_ZL5g_778, align 4
  %call3959 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv3958, i32 %1423)
  %xor3960 = xor i32 %call3959, -8
  %cmp3961 = icmp uge i32 %xor3960, 74
  %conv3962 = zext i1 %cmp3961 to i32
  %cmp3963 = icmp eq i32 %conv3962, 0
  %conv3964 = zext i1 %cmp3963 to i16
  %call3965 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv3919, i16 signext %conv3964)
  %tobool3966 = icmp ne i16 %call3965, 0
  br label %lor.end3967

lor.end3967:                                      ; preds = %land.end3951, %if.end3913
  %1424 = phi i1 [ true, %if.end3913 ], [ %tobool3966, %land.end3951 ]
  %conv3968 = zext i1 %1424 to i32
  %cmp3969 = icmp sgt i32 %conv3968, 1
  %conv3970 = zext i1 %cmp3969 to i32
  %call3971 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %1407, i32 %conv3970)
  %conv3972 = trunc i32 %call3971 to i16
  %1425 = load i32* %l_1874, align 4
  %conv3973 = trunc i32 %1425 to i16
  %call3974 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv3972, i16 zeroext %conv3973)
  %conv3975 = zext i16 %call3974 to i32
  store i32 %conv3975, i32* @_ZL4g_55, align 4
  %1426 = load i32* %l_2181, align 4
  %call3976 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv3975, i32 %1426)
  %arrayidx3977 = getelementptr inbounds [2 x [1 x i32]]* %l_2050, i32 0, i64 1
  %arrayidx3978 = getelementptr inbounds [1 x i32]* %arrayidx3977, i32 0, i64 0
  %1427 = load i32* %arrayidx3978, align 4
  %cmp3979 = icmp uge i32 %call3976, %1427
  %conv3980 = zext i1 %cmp3979 to i32
  %call3981 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %and3914, i32 %conv3980)
  %cmp3982 = icmp ne i32 -4, %call3981
  %conv3983 = zext i1 %cmp3982 to i16
  %1428 = load i32* %l_660, align 4
  %call3984 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv3983, i32 %1428)
  %conv3985 = zext i16 %call3984 to i32
  store i32 %conv3985, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  br label %if.end3987

if.else3986:                                      ; preds = %for.end3229
  %1429 = load i32* @_ZL5g_859, align 4
  store i32 %1429, i32* %l_1878, align 4
  %1430 = load i32* %l_1880, align 4
  store i32 %1430, i32* %retval
  br label %return

if.end3987:                                       ; preds = %lor.end3967
  store i16 0, i16* @_ZL6g_1430, align 2
  br label %for.cond3988

for.cond3988:                                     ; preds = %for.inc4136, %if.end3987
  %1431 = load i16* @_ZL6g_1430, align 2
  %conv3989 = sext i16 %1431 to i32
  %cmp3990 = icmp sle i32 %conv3989, 4
  br i1 %cmp3990, label %for.body3991, label %for.end4140

for.body3991:                                     ; preds = %for.cond3988
  %1432 = bitcast [3 x [10 x i32]]* %l_2185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1432, i8* bitcast ([3 x [10 x i32]]* @_ZZL6func_1vE6l_2185 to i8*), i64 120, i32 16, i1 false)
  store i32 -1, i32* %l_2213, align 4
  store i16 0, i16* @_ZL6g_1580, align 2
  br label %for.cond3994

for.cond3994:                                     ; preds = %for.inc4106, %for.body3991
  %1433 = load i16* @_ZL6g_1580, align 2
  %conv3995 = sext i16 %1433 to i32
  %cmp3996 = icmp sle i32 %conv3995, 4
  br i1 %cmp3996, label %for.body3997, label %for.end4110

for.body3997:                                     ; preds = %for.cond3994
  store i16 -9387, i16* %l_2182, align 2
  %1434 = load i16* %l_2182, align 2
  %inc3999 = add i16 %1434, 1
  store i16 %inc3999, i16* %l_2182, align 2
  store i32 4, i32* %l_1885, align 4
  br label %for.cond4000

for.cond4000:                                     ; preds = %for.inc4089, %for.body3997
  %1435 = load i32* %l_1885, align 4
  %cmp4001 = icmp sge i32 %1435, 0
  br i1 %cmp4001, label %for.body4002, label %for.end4091

for.body4002:                                     ; preds = %for.cond4000
  %1436 = load i16* @_ZL6g_1430, align 2
  %idxprom4004 = sext i16 %1436 to i64
  %arrayidx4005 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom4004
  %1437 = load i32* %arrayidx4005, align 4
  %1438 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %and4006 = and i32 %1437, %1438
  %arrayidx4007 = getelementptr inbounds [7 x [4 x [2 x i32]]]* %l_1890, i32 0, i64 2
  %arrayidx4008 = getelementptr inbounds [4 x [2 x i32]]* %arrayidx4007, i32 0, i64 1
  %arrayidx4009 = getelementptr inbounds [2 x i32]* %arrayidx4008, i32 0, i64 0
  store i32 %and4006, i32* %arrayidx4009, align 4
  %arrayidx4010 = getelementptr inbounds [3 x [10 x i32]]* %l_2185, i32 0, i64 0
  %arrayidx4011 = getelementptr inbounds [10 x i32]* %arrayidx4010, i32 0, i64 8
  %1439 = load i32* %arrayidx4011, align 4
  %inc4012 = add i32 %1439, 1
  store i32 %inc4012, i32* %arrayidx4011, align 4
  %tobool4013 = icmp ne i32 %1439, 0
  br i1 %tobool4013, label %lor.end4084, label %lor.rhs4014

lor.rhs4014:                                      ; preds = %for.body4002
  %1440 = load i32* @_ZL3g_2, align 4
  %conv4015 = trunc i32 %1440 to i16
  %1441 = load i16* %l_2182, align 2
  %1442 = load volatile i16* @_ZL5g_277, align 2
  %conv4016 = zext i16 %1442 to i32
  %1443 = load i16* @_ZL6g_1066, align 2
  %conv4017 = zext i16 %1443 to i32
  %or4018 = or i32 %conv4016, %conv4017
  %call4019 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext -30819, i32 %or4018)
  %conv4020 = zext i16 %call4019 to i32
  %1444 = load i32* @_ZL6g_1873, align 4
  %cmp4021 = icmp sge i32 %conv4020, %1444
  %conv4022 = zext i1 %cmp4021 to i32
  %1445 = load i16* @_ZL6g_1580, align 2
  %conv4023 = sext i16 %1445 to i32
  %call4024 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv4022, i32 %conv4023)
  %1446 = load i32* @_ZL5g_396, align 4
  %and4025 = and i32 %call4024, %1446
  store i32 %and4025, i32* %l_1883, align 4
  %conv4026 = trunc i32 %and4025 to i16
  %arrayidx4027 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 2
  %1447 = load i32* %arrayidx4027, align 4
  %conv4028 = trunc i32 %1447 to i16
  %call4029 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv4026, i16 zeroext %conv4028)
  %call4030 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call4029, i16 zeroext 3)
  %conv4031 = zext i16 %call4030 to i32
  %1448 = load i16* %l_1886, align 2
  %conv4032 = sext i16 %1448 to i32
  %cmp4033 = icmp sle i32 %conv4031, %conv4032
  %conv4034 = zext i1 %cmp4033 to i32
  %1449 = load i16* @_ZL6g_1430, align 2
  %idxprom4035 = sext i16 %1449 to i64
  %arrayidx4036 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom4035
  %1450 = load i32* %arrayidx4036, align 4
  %call4037 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv4034, i32 %1450)
  %or4038 = or i32 65535, %call4037
  %tobool4039 = icmp ne i32 %or4038, 0
  br i1 %tobool4039, label %land.rhs4040, label %land.end4042

land.rhs4040:                                     ; preds = %lor.rhs4014
  %1451 = load i32* %l_1885, align 4
  %tobool4041 = icmp ne i32 %1451, 0
  br label %land.end4042

land.end4042:                                     ; preds = %land.rhs4040, %lor.rhs4014
  %1452 = phi i1 [ false, %lor.rhs4014 ], [ %tobool4041, %land.rhs4040 ]
  %conv4043 = zext i1 %1452 to i32
  %1453 = load i32* %l_1879, align 4
  %cmp4044 = icmp ne i32 %conv4043, %1453
  %conv4045 = zext i1 %cmp4044 to i16
  %call4046 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %1441, i16 zeroext %conv4045)
  %tobool4047 = icmp ne i16 %call4046, 0
  br i1 %tobool4047, label %land.lhs.true4048, label %land.end4053

land.lhs.true4048:                                ; preds = %land.end4042
  %1454 = load i16* @_ZL6g_1430, align 2
  %idxprom4049 = sext i16 %1454 to i64
  %arrayidx4050 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom4049
  %1455 = load i32* %arrayidx4050, align 4
  %tobool4051 = icmp ne i32 %1455, 0
  br i1 %tobool4051, label %land.rhs4052, label %land.end4053

land.rhs4052:                                     ; preds = %land.lhs.true4048
  br label %land.end4053

land.end4053:                                     ; preds = %land.rhs4052, %land.lhs.true4048, %land.end4042
  %1456 = phi i1 [ false, %land.lhs.true4048 ], [ false, %land.end4042 ], [ false, %land.rhs4052 ]
  %conv4054 = zext i1 %1456 to i16
  %call4055 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv4054, i32 3)
  %call4056 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv4015, i16 signext %call4055)
  %conv4057 = sext i16 %call4056 to i32
  %1457 = load i32* @_ZL5g_930, align 4
  %or4058 = or i32 %1457, %conv4057
  store i32 %or4058, i32* @_ZL5g_930, align 4
  %tobool4059 = icmp ne i32 %or4058, 0
  br i1 %tobool4059, label %lor.end4061, label %lor.rhs4060

lor.rhs4060:                                      ; preds = %land.end4053
  br label %lor.end4061

lor.end4061:                                      ; preds = %lor.rhs4060, %land.end4053
  %1458 = phi i1 [ true, %land.end4053 ], [ true, %lor.rhs4060 ]
  %conv4062 = zext i1 %1458 to i16
  %1459 = load i32* %l_2213, align 4
  %conv4063 = trunc i32 %1459 to i16
  %call4064 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv4062, i16 signext %conv4063)
  %conv4065 = sext i16 %call4064 to i32
  %xor4066 = xor i32 %conv4065, 1346691170
  %conv4067 = trunc i32 %xor4066 to i16
  %call4068 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv4067, i32 13)
  %conv4069 = sext i16 %call4068 to i32
  %cmp4070 = icmp sle i32 8, %conv4069
  %conv4071 = zext i1 %cmp4070 to i16
  store i16 %conv4071, i16* @_ZL4g_56, align 2
  %conv4072 = sext i16 %conv4071 to i32
  %1460 = load i16* @_ZL6g_1430, align 2
  %idxprom4073 = sext i16 %1460 to i64
  %arrayidx4074 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom4073
  %1461 = load i32* %arrayidx4074, align 4
  %or4075 = or i32 %conv4072, %1461
  store i32 %or4075, i32* @_ZL5g_859, align 4
  %1462 = load i32* %l_704, align 4
  %xor4076 = xor i32 %or4075, %1462
  %conv4077 = trunc i32 %xor4076 to i16
  %1463 = load i32* @_ZL4g_55, align 4
  %conv4078 = trunc i32 %1463 to i16
  %call4079 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv4077, i16 signext %conv4078)
  %conv4080 = sext i16 %call4079 to i32
  %1464 = load i16* %l_2182, align 2
  %conv4081 = zext i16 %1464 to i32
  %call4082 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv4080, i32 %conv4081)
  %tobool4083 = icmp ne i32 %call4082, 0
  br label %lor.end4084

lor.end4084:                                      ; preds = %lor.end4061, %for.body4002
  %1465 = phi i1 [ true, %for.body4002 ], [ %tobool4083, %lor.end4061 ]
  %conv4085 = zext i1 %1465 to i32
  %1466 = load i16* %l_2214, align 2
  %conv4086 = zext i16 %1466 to i32
  %xor4087 = xor i32 %conv4086, %conv4085
  %conv4088 = trunc i32 %xor4087 to i16
  store i16 %conv4088, i16* %l_2214, align 2
  br label %for.inc4089

for.inc4089:                                      ; preds = %lor.end4084
  %1467 = load i32* %l_1885, align 4
  %sub4090 = sub nsw i32 %1467, 1
  store i32 %sub4090, i32* %l_1885, align 4
  br label %for.cond4000

for.end4091:                                      ; preds = %for.cond4000
  %1468 = load i16* @_ZL6g_1580, align 2
  %idxprom4092 = sext i16 %1468 to i64
  %arrayidx4093 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom4092
  %1469 = load i32* %arrayidx4093, align 4
  store i32 %1469, i32* @_ZL5g_859, align 4
  store i32 0, i32* %l_2049, align 4
  br label %for.cond4094

for.cond4094:                                     ; preds = %for.inc4103, %for.end4091
  %1470 = load i32* %l_2049, align 4
  %cmp4095 = icmp ule i32 %1470, 1
  br i1 %cmp4095, label %for.body4096, label %for.end4105

for.body4096:                                     ; preds = %for.cond4094
  %1471 = load i16* @_ZL6g_1430, align 2
  %idxprom4098 = sext i16 %1471 to i64
  %arrayidx4099 = getelementptr inbounds [5 x i32]* %l_1370, i32 0, i64 %idxprom4098
  %1472 = load i32* %arrayidx4099, align 4
  %tobool4100 = icmp ne i32 %1472, 0
  br i1 %tobool4100, label %if.then4101, label %if.end4102

if.then4101:                                      ; preds = %for.body4096
  br label %for.end4105

if.end4102:                                       ; preds = %for.body4096
  br label %for.inc4103

for.inc4103:                                      ; preds = %if.end4102
  %1473 = load i32* %l_2049, align 4
  %add4104 = add i32 %1473, 1
  store i32 %add4104, i32* %l_2049, align 4
  br label %for.cond4094

for.end4105:                                      ; preds = %if.then4101, %for.cond4094
  br label %for.inc4106

for.inc4106:                                      ; preds = %for.end4105
  %1474 = load i16* @_ZL6g_1580, align 2
  %conv4107 = sext i16 %1474 to i32
  %add4108 = add nsw i32 %conv4107, 1
  %conv4109 = trunc i32 %add4108 to i16
  store i16 %conv4109, i16* @_ZL6g_1580, align 2
  br label %for.cond3994

for.end4110:                                      ; preds = %for.cond3994
  store i32 1, i32* @_ZL6g_2106, align 4
  br label %for.cond4111

for.cond4111:                                     ; preds = %for.inc4133, %for.end4110
  %1475 = load i32* @_ZL6g_2106, align 4
  %cmp4112 = icmp sge i32 %1475, 0
  br i1 %cmp4112, label %for.body4113, label %for.end4135

for.body4113:                                     ; preds = %for.cond4111
  store i32 0, i32* %l_1688, align 4
  br label %for.cond4114

for.cond4114:                                     ; preds = %for.inc4118, %for.body4113
  %1476 = load i32* %l_1688, align 4
  %cmp4115 = icmp ule i32 %1476, 0
  br i1 %cmp4115, label %for.body4116, label %for.end4120

for.body4116:                                     ; preds = %for.cond4114
  %1477 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 4), align 4
  %1478 = load i32* @_ZL5g_859, align 4
  %and4117 = and i32 %1478, %1477
  store i32 %and4117, i32* @_ZL5g_859, align 4
  br label %for.inc4118

for.inc4118:                                      ; preds = %for.body4116
  %1479 = load i32* %l_1688, align 4
  %add4119 = add i32 %1479, 1
  store i32 %add4119, i32* %l_1688, align 4
  br label %for.cond4114

for.end4120:                                      ; preds = %for.cond4114
  store i32 0, i32* %l_1853, align 4
  br label %for.cond4121

for.cond4121:                                     ; preds = %for.inc4130, %for.end4120
  %1480 = load i32* %l_1853, align 4
  %cmp4122 = icmp sle i32 %1480, 0
  br i1 %cmp4122, label %for.body4123, label %for.end4132

for.body4123:                                     ; preds = %for.cond4121
  store i16 1, i16* %l_2216, align 2
  %1481 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %tobool4124 = icmp ne i32 %1481, 0
  br i1 %tobool4124, label %if.then4125, label %if.end4126

if.then4125:                                      ; preds = %for.body4123
  br label %for.end4132

if.end4126:                                       ; preds = %for.body4123
  %arrayidx4127 = getelementptr inbounds [6 x [10 x i32]]* %l_2217, i32 0, i64 4
  %arrayidx4128 = getelementptr inbounds [10 x i32]* %arrayidx4127, i32 0, i64 4
  %1482 = load i32* %arrayidx4128, align 4
  %dec4129 = add i32 %1482, -1
  store i32 %dec4129, i32* %arrayidx4128, align 4
  br label %for.inc4130

for.inc4130:                                      ; preds = %if.end4126
  %1483 = load i32* %l_1853, align 4
  %add4131 = add nsw i32 %1483, 1
  store i32 %add4131, i32* %l_1853, align 4
  br label %for.cond4121

for.end4132:                                      ; preds = %if.then4125, %for.cond4121
  br label %for.inc4133

for.inc4133:                                      ; preds = %for.end4132
  %1484 = load i32* @_ZL6g_2106, align 4
  %sub4134 = sub nsw i32 %1484, 1
  store i32 %sub4134, i32* @_ZL6g_2106, align 4
  br label %for.cond4111

for.end4135:                                      ; preds = %for.cond4111
  br label %for.inc4136

for.inc4136:                                      ; preds = %for.end4135
  %1485 = load i16* @_ZL6g_1430, align 2
  %conv4137 = sext i16 %1485 to i32
  %add4138 = add nsw i32 %conv4137, 1
  %conv4139 = trunc i32 %add4138 to i16
  store i16 %conv4139, i16* @_ZL6g_1430, align 2
  br label %for.cond3988

for.end4140:                                      ; preds = %for.cond3988
  %1486 = load volatile i32* @_ZL6g_1892, align 4
  %1487 = load i16* %l_1872, align 2
  %conv4141 = sext i16 %1487 to i32
  %1488 = load i32* @_ZL5g_396, align 4
  %1489 = load i32* %l_2048, align 4
  %1490 = load i16* @_ZL6g_1477, align 2
  %conv4142 = sext i16 %1490 to i32
  %or4143 = or i32 %conv4142, %1489
  %conv4144 = trunc i32 %or4143 to i16
  store i16 %conv4144, i16* @_ZL6g_1477, align 2
  %conv4145 = sext i16 %conv4144 to i32
  store i32 %conv4145, i32* %l_1883, align 4
  %conv4146 = trunc i32 %conv4145 to i16
  %call4147 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv4146, i32 15)
  %conv4148 = sext i16 %call4147 to i32
  %1491 = load i32* @_ZL5g_796, align 4
  %conv4149 = trunc i32 %1491 to i16
  %call4150 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext 20387, i16 zeroext %conv4149)
  %tobool4151 = icmp ne i16 %call4150, 0
  %conv4152 = zext i1 %tobool4151 to i32
  %cmp4153 = icmp sge i32 %conv4152, 25586
  %conv4154 = zext i1 %cmp4153 to i32
  %and4155 = and i32 -743484611, %conv4154
  %conv4156 = trunc i32 %and4155 to i16
  %1492 = load i16* @_ZL6g_1430, align 2
  %call4157 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv4156, i16 zeroext %1492)
  %conv4158 = zext i16 %call4157 to i32
  %1493 = load i32* @_ZL4g_33, align 4
  %cmp4159 = icmp ne i32 %conv4158, %1493
  %conv4160 = zext i1 %cmp4159 to i32
  %1494 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %cmp4161 = icmp eq i32 %conv4160, %1494
  br i1 %cmp4161, label %lor.end4165, label %lor.rhs4162

lor.rhs4162:                                      ; preds = %for.end4140
  %arrayidx4163 = getelementptr inbounds [1 x i32]* %l_1898, i32 0, i64 0
  %1495 = load i32* %arrayidx4163, align 4
  %tobool4164 = icmp ne i32 %1495, 0
  br label %lor.end4165

lor.end4165:                                      ; preds = %lor.rhs4162, %for.end4140
  %1496 = phi i1 [ true, %for.end4140 ], [ %tobool4164, %lor.rhs4162 ]
  %conv4166 = zext i1 %1496 to i32
  %cmp4167 = icmp sge i32 %conv4148, %conv4166
  %conv4168 = zext i1 %cmp4167 to i32
  %xor4169 = xor i32 %conv4168, 10011
  %tobool4170 = icmp ne i32 %xor4169, 0
  %lnot4171 = xor i1 %tobool4170, true
  %conv4172 = zext i1 %lnot4171 to i32
  %cmp4173 = icmp ne i32 28767, %conv4172
  %conv4174 = zext i1 %cmp4173 to i32
  %cmp4175 = icmp ule i32 %1488, %conv4174
  %conv4176 = zext i1 %cmp4175 to i16
  %call4177 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv4176, i16 signext -24915)
  %conv4178 = sext i16 %call4177 to i32
  %arrayidx4179 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 3
  %1497 = load i32* %arrayidx4179, align 4
  %cmp4180 = icmp eq i32 %conv4178, %1497
  %conv4181 = zext i1 %cmp4180 to i32
  %cmp4182 = icmp sgt i32 %conv4181, 8146
  %conv4183 = zext i1 %cmp4182 to i16
  %call4184 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv4183, i16 zeroext 2)
  %conv4185 = zext i16 %call4184 to i32
  %or4186 = or i32 %conv4185, -1
  %call4187 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv4141, i32 %or4186)
  %conv4188 = trunc i32 %call4187 to i16
  %1498 = load i32* %l_1688, align 4
  %conv4189 = trunc i32 %1498 to i16
  %call4190 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv4188, i16 signext %conv4189)
  store i16 %call4190, i16* @_ZL6g_1066, align 2
  %arrayidx4191 = getelementptr inbounds [1 x i32]* %l_1898, i32 0, i64 0
  %1499 = load i32* %arrayidx4191, align 4
  %conv4192 = trunc i32 %1499 to i16
  %call4193 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %call4190, i16 zeroext %conv4192)
  %conv4194 = zext i16 %call4193 to i32
  %1500 = load i16* %l_1629, align 2
  %conv4195 = zext i16 %1500 to i32
  %cmp4196 = icmp slt i32 %conv4194, %conv4195
  %conv4197 = zext i1 %cmp4196 to i32
  %cmp4198 = icmp ule i32 %1486, %conv4197
  %conv4199 = zext i1 %cmp4198 to i16
  %call4200 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv4199, i16 zeroext -10)
  %conv4201 = zext i16 %call4200 to i32
  %cmp4202 = icmp ne i32 %conv4201, 59402
  %conv4203 = zext i1 %cmp4202 to i16
  %1501 = load i32* %l_1877, align 4
  %conv4204 = trunc i32 %1501 to i16
  %call4205 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv4203, i16 zeroext %conv4204)
  %conv4206 = zext i16 %call4205 to i32
  %1502 = load i32* %l_1878, align 4
  %cmp4207 = icmp sge i32 %conv4206, %1502
  %conv4208 = zext i1 %cmp4207 to i16
  %call4209 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv4208, i16 zeroext 1)
  %conv4210 = zext i16 %call4209 to i32
  %1503 = load i32* @_ZL6g_1834, align 4
  %call4211 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv4210, i32 %1503)
  %conv4212 = trunc i32 %call4211 to i16
  %1504 = load i32* %l_1881, align 4
  %call4213 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv4212, i32 %1504)
  %conv4214 = zext i16 %call4213 to i32
  %call4215 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 -6, i32 %conv4214)
  %tobool4216 = icmp ne i32 %call4215, 0
  br i1 %tobool4216, label %land.rhs4217, label %land.end4218

land.rhs4217:                                     ; preds = %lor.end4165
  br label %land.end4218

land.end4218:                                     ; preds = %land.rhs4217, %lor.end4165
  %1505 = phi i1 [ false, %lor.end4165 ], [ true, %land.rhs4217 ]
  %conv4219 = zext i1 %1505 to i32
  %1506 = load i32* @_ZL5g_489, align 4
  %xor4220 = xor i32 %conv4219, %1506
  %1507 = load i32* %l_2049, align 4
  %xor4221 = xor i32 %xor4220, %1507
  %arrayidx4222 = getelementptr inbounds [6 x [10 x i32]]* %l_2217, i32 0, i64 3
  %arrayidx4223 = getelementptr inbounds [10 x i32]* %arrayidx4222, i32 0, i64 3
  %1508 = load i32* %arrayidx4223, align 4
  %cmp4224 = icmp ugt i32 %xor4221, %1508
  %conv4225 = zext i1 %cmp4224 to i32
  %cmp4226 = icmp uge i32 %conv4225, 65535
  br i1 %cmp4226, label %lor.end4230, label %lor.rhs4227

lor.rhs4227:                                      ; preds = %land.end4218
  %arrayidx4228 = getelementptr inbounds [7 x i32]* %l_1887, i32 0, i64 2
  %1509 = load i32* %arrayidx4228, align 4
  %tobool4229 = icmp ne i32 %1509, 0
  br label %lor.end4230

lor.end4230:                                      ; preds = %lor.rhs4227, %land.end4218
  %1510 = phi i1 [ true, %land.end4218 ], [ %tobool4229, %lor.rhs4227 ]
  %conv4231 = zext i1 %1510 to i32
  store i32 %conv4231, i32* @_ZL6g_1873, align 4
  br label %if.end4795

if.else4232:                                      ; preds = %lor.end3216
  store i32 1004987954, i32* %l_2265, align 4
  store i32 1, i32* %l_2272, align 4
  store i32 8, i32* %l_2273, align 4
  store i16 -10, i16* %l_2317, align 2
  %1511 = bitcast [2 x [7 x [2 x i32]]]* %l_2372 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1511, i8* bitcast ([2 x [7 x [2 x i32]]]* @_ZZL6func_1vE6l_2372 to i8*), i64 112, i32 16, i1 false)
  store i32 1, i32* %l_2374, align 4
  store i16 7, i16* %l_2390, align 2
  store i16 0, i16* @_ZL4g_60, align 2
  br label %for.cond4236

for.cond4236:                                     ; preds = %for.inc4591, %if.else4232
  %1512 = load i16* @_ZL4g_60, align 2
  %conv4237 = zext i16 %1512 to i32
  %cmp4238 = icmp sle i32 %conv4237, 5
  br i1 %cmp4238, label %for.body4239, label %for.end4595

for.body4239:                                     ; preds = %for.cond4236
  %1513 = bitcast [7 x i32]* %l_2274 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1513, i8* bitcast ([7 x i32]* @_ZZL6func_1vE6l_2274 to i8*), i64 28, i32 16, i1 false)
  store i32 0, i32* %i4240, align 4
  br label %for.cond4241

for.cond4241:                                     ; preds = %for.inc4246, %for.body4239
  %1514 = load i32* %i4240, align 4
  %cmp4242 = icmp slt i32 %1514, 2
  br i1 %cmp4242, label %for.body4243, label %for.end4248

for.body4243:                                     ; preds = %for.cond4241
  %1515 = load i32* %i4240, align 4
  %idxprom4244 = sext i32 %1515 to i64
  %arrayidx4245 = getelementptr inbounds [2 x i32]* %l_2275, i32 0, i64 %idxprom4244
  store i32 1, i32* %arrayidx4245, align 4
  br label %for.inc4246

for.inc4246:                                      ; preds = %for.body4243
  %1516 = load i32* %i4240, align 4
  %inc4247 = add nsw i32 %1516, 1
  store i32 %inc4247, i32* %i4240, align 4
  br label %for.cond4241

for.end4248:                                      ; preds = %for.cond4241
  %1517 = load i16* @_ZL4g_60, align 2
  %idxprom4249 = zext i16 %1517 to i64
  %arrayidx4250 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 %idxprom4249
  %1518 = load i16* %arrayidx4250, align 2
  %conv4251 = sext i16 %1518 to i32
  %1519 = load i16* @_ZL4g_60, align 2
  %idxprom4252 = zext i16 %1519 to i64
  %arrayidx4253 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 %idxprom4252
  %1520 = load i16* %arrayidx4253, align 2
  %call4254 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %1520, i32 14)
  %call4255 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext -1, i16 signext %call4254)
  %conv4256 = sext i16 %call4255 to i32
  %cmp4257 = icmp slt i32 %conv4251, %conv4256
  %conv4258 = zext i1 %cmp4257 to i16
  store i32 0, i32* %l_2265, align 4
  %1521 = load i16* @_ZL4g_60, align 2
  %idxprom4259 = zext i16 %1521 to i64
  %arrayidx4260 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 %idxprom4259
  %1522 = load i32* %arrayidx4260, align 4
  %conv4261 = trunc i32 %1522 to i16
  store i16 %conv4261, i16* @_ZL6g_1736, align 2
  %1523 = load i32* @_ZL5g_166, align 4
  %cmp4262 = icmp sle i32 %1523, -1
  %conv4263 = zext i1 %cmp4262 to i32
  %1524 = load i32* %l_2272, align 4
  store i32 %1524, i32* %l_2272, align 4
  %conv4264 = trunc i32 %1524 to i16
  %call4265 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv4264, i32 6)
  %conv4266 = sext i16 %call4265 to i32
  %and4267 = and i32 %conv4263, %conv4266
  %conv4268 = trunc i32 %and4267 to i16
  %call4269 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv4261, i16 zeroext %conv4268)
  %conv4270 = zext i16 %call4269 to i32
  %xor4271 = xor i32 %conv4270, 58909
  %conv4272 = trunc i32 %xor4271 to i16
  store i16 %conv4272, i16* @_ZL6g_1580, align 2
  %conv4273 = sext i16 %conv4272 to i32
  %1525 = load i32* %l_2273, align 4
  %cmp4274 = icmp slt i32 %conv4273, %1525
  %conv4275 = zext i1 %cmp4274 to i32
  %1526 = load i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 0, i64 0, i64 1), align 2
  %conv4276 = zext i16 %1526 to i32
  %or4277 = or i32 %conv4276, %conv4275
  %conv4278 = trunc i32 %or4277 to i16
  store i16 %conv4278, i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 0, i64 0, i64 1), align 2
  %call4279 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext 0, i16 zeroext %conv4278)
  %conv4280 = zext i16 %call4279 to i32
  %arrayidx4281 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 1
  %1527 = load i16* %arrayidx4281, align 2
  %conv4282 = sext i16 %1527 to i32
  %cmp4283 = icmp sgt i32 %conv4280, %conv4282
  %conv4284 = zext i1 %cmp4283 to i16
  %call4285 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv4258, i16 zeroext %conv4284)
  %1528 = load i32* @_ZL5g_396, align 4
  %conv4286 = trunc i32 %1528 to i16
  %call4287 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call4285, i16 zeroext %conv4286)
  %tobool4288 = icmp ne i16 %call4287, 0
  br i1 %tobool4288, label %lor.end4291, label %lor.rhs4289

lor.rhs4289:                                      ; preds = %for.end4248
  %1529 = load i32* @_ZL4g_36, align 4
  %tobool4290 = icmp ne i32 %1529, 0
  br label %lor.end4291

lor.end4291:                                      ; preds = %lor.rhs4289, %for.end4248
  %1530 = phi i1 [ true, %for.end4248 ], [ %tobool4290, %lor.rhs4289 ]
  %conv4292 = zext i1 %1530 to i16
  %1531 = load i32* %l_2273, align 4
  %call4293 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv4292, i32 %1531)
  %tobool4294 = icmp ne i16 %call4293, 0
  br i1 %tobool4294, label %land.rhs4295, label %land.end4297

land.rhs4295:                                     ; preds = %lor.end4291
  %1532 = load i32* @_ZL5g_622, align 4
  %tobool4296 = icmp ne i32 %1532, 0
  br label %land.end4297

land.end4297:                                     ; preds = %land.rhs4295, %lor.end4291
  %1533 = phi i1 [ false, %lor.end4291 ], [ %tobool4296, %land.rhs4295 ]
  %conv4298 = zext i1 %1533 to i32
  %1534 = load i32* %l_2273, align 4
  %cmp4299 = icmp sgt i32 %conv4298, %1534
  %conv4300 = zext i1 %cmp4299 to i32
  store i32 %conv4300, i32* %l_2273, align 4
  %arrayidx4301 = getelementptr inbounds [7 x i32]* %l_2274, i32 0, i64 0
  %1535 = load i32* %arrayidx4301, align 4
  %or4302 = or i32 %1535, %conv4300
  store i32 %or4302, i32* %arrayidx4301, align 4
  %arrayidx4303 = getelementptr inbounds [2 x i32]* %l_2275, i32 0, i64 1
  %1536 = load i32* %arrayidx4303, align 4
  %dec4304 = add i32 %1536, -1
  store i32 %dec4304, i32* %arrayidx4303, align 4
  store i32 0, i32* %l_1300, align 4
  br label %for.cond4305

for.cond4305:                                     ; preds = %for.inc4588, %land.end4297
  %1537 = load i32* %l_1300, align 4
  %cmp4306 = icmp sle i32 %1537, 1
  br i1 %cmp4306, label %for.body4307, label %for.end4590

for.body4307:                                     ; preds = %for.cond4305
  store i32 550266183, i32* %l_2316, align 4
  %1538 = bitcast [7 x i32]* %l_2337 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1538, i8* bitcast ([7 x i32]* @_ZZL6func_1vE6l_2337 to i8*), i64 28, i32 16, i1 false)
  store i32 0, i32* %i4308, align 4
  br label %for.cond4309

for.cond4309:                                     ; preds = %for.inc4314, %for.body4307
  %1539 = load i32* %i4308, align 4
  %cmp4310 = icmp slt i32 %1539, 5
  br i1 %cmp4310, label %for.body4311, label %for.end4316

for.body4311:                                     ; preds = %for.cond4309
  %1540 = load i32* %i4308, align 4
  %idxprom4312 = sext i32 %1540 to i64
  %arrayidx4313 = getelementptr inbounds [5 x i32]* %l_2319, i32 0, i64 %idxprom4312
  store i32 -808444999, i32* %arrayidx4313, align 4
  br label %for.inc4314

for.inc4314:                                      ; preds = %for.body4311
  %1541 = load i32* %i4308, align 4
  %inc4315 = add nsw i32 %1541, 1
  store i32 %inc4315, i32* %i4308, align 4
  br label %for.cond4309

for.end4316:                                      ; preds = %for.cond4309
  %1542 = load i32* %l_2273, align 4
  %xor4317 = xor i32 %1542, 521472745
  store i32 %xor4317, i32* %l_2273, align 4
  %1543 = load i32* @_ZL5g_796, align 4
  %conv4318 = trunc i32 %1543 to i16
  %1544 = load volatile i16* @_ZL6g_1442, align 2
  %conv4319 = zext i16 %1544 to i32
  %call4320 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv4318, i32 %conv4319)
  %conv4321 = sext i16 %call4320 to i32
  %1545 = load i16* @_ZL4g_56, align 2
  %conv4322 = sext i16 %1545 to i32
  %neg4323 = xor i32 %conv4322, -1
  %arrayidx4324 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 0
  %1546 = load i16* %arrayidx4324, align 2
  %conv4325 = sext i16 %1546 to i32
  %cmp4326 = icmp slt i32 %neg4323, %conv4325
  %conv4327 = zext i1 %cmp4326 to i32
  %cmp4328 = icmp slt i32 %conv4321, %conv4327
  %conv4329 = zext i1 %cmp4328 to i16
  %arrayidx4330 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 1
  %1547 = load i16* %arrayidx4330, align 2
  %conv4331 = sext i16 %1547 to i32
  %1548 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 5), align 4
  %1549 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp4332 = icmp eq i32 %1548, %1549
  %conv4333 = zext i1 %cmp4332 to i32
  %cmp4334 = icmp sgt i32 %conv4331, %conv4333
  %conv4335 = zext i1 %cmp4334 to i32
  %call4336 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext -24866, i32 5)
  %conv4337 = sext i16 %call4336 to i32
  %call4338 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv4337, i32 -6)
  %1550 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %call4339 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %call4338, i32 %1550)
  %tobool4340 = icmp ne i32 %call4339, 0
  %conv4341 = zext i1 %tobool4340 to i32
  %1551 = load i32* %l_1883, align 4
  %cmp4342 = icmp sge i32 %conv4341, %1551
  %conv4343 = zext i1 %cmp4342 to i32
  %cmp4344 = icmp eq i32 %conv4343, 0
  %conv4345 = zext i1 %cmp4344 to i16
  %arrayidx4346 = getelementptr inbounds [2 x i32]* %l_2275, i32 0, i64 1
  %1552 = load i32* %arrayidx4346, align 4
  %call4347 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv4345, i32 %1552)
  %conv4348 = zext i16 %call4347 to i32
  %1553 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %cmp4349 = icmp ule i32 %conv4348, %1553
  %conv4350 = zext i1 %cmp4349 to i32
  %and4351 = and i32 %conv4335, %conv4350
  %conv4352 = trunc i32 %and4351 to i16
  %call4353 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv4329, i16 zeroext %conv4352)
  %call4354 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %call4353, i16 signext 6)
  %conv4355 = sext i16 %call4354 to i32
  %cmp4356 = icmp eq i32 %conv4355, 18002
  %conv4357 = zext i1 %cmp4356 to i16
  %1554 = load i32* %l_1771, align 4
  %conv4358 = trunc i32 %1554 to i16
  %call4359 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv4357, i16 signext %conv4358)
  %conv4360 = sext i16 %call4359 to i32
  %or4361 = or i32 %conv4360, -1
  store i32 %or4361, i32* %l_820, align 4
  store i32 %or4361, i32* %l_1877, align 4
  store i32 1, i32* %l_659, align 4
  br label %for.cond4362

for.cond4362:                                     ; preds = %for.inc4478, %for.end4316
  %1555 = load i32* %l_659, align 4
  %cmp4363 = icmp sge i32 %1555, 0
  br i1 %cmp4363, label %for.body4364, label %for.end4480

for.body4364:                                     ; preds = %for.cond4362
  %1556 = load i32* %l_1300, align 4
  %add4368 = add nsw i32 %1556, 3
  %idxprom4369 = sext i32 %add4368 to i64
  %1557 = load i16* @_ZL4g_60, align 2
  %conv4370 = zext i16 %1557 to i32
  %add4371 = add nsw i32 %conv4370, 1
  %idxprom4372 = sext i32 %add4371 to i64
  %1558 = load i32* %l_659, align 4
  %idxprom4373 = sext i32 %1558 to i64
  %arrayidx4374 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 %idxprom4373
  %arrayidx4375 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4374, i32 0, i64 %idxprom4372
  %arrayidx4376 = getelementptr inbounds [5 x i32]* %arrayidx4375, i32 0, i64 %idxprom4369
  %1559 = load i32* %arrayidx4376, align 4
  %tobool4377 = icmp ne i32 %1559, 0
  br i1 %tobool4377, label %land.rhs4378, label %land.end4389

land.rhs4378:                                     ; preds = %for.body4364
  %1560 = load i32* %l_659, align 4
  %add4379 = add nsw i32 %1560, 1
  %idxprom4380 = sext i32 %add4379 to i64
  %1561 = load i16* @_ZL4g_60, align 2
  %conv4381 = zext i16 %1561 to i32
  %add4382 = add nsw i32 %conv4381, 1
  %idxprom4383 = sext i32 %add4382 to i64
  %1562 = load i32* %l_1300, align 4
  %idxprom4384 = sext i32 %1562 to i64
  %arrayidx4385 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 %idxprom4384
  %arrayidx4386 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4385, i32 0, i64 %idxprom4383
  %arrayidx4387 = getelementptr inbounds [5 x i32]* %arrayidx4386, i32 0, i64 %idxprom4380
  %1563 = load i32* %arrayidx4387, align 4
  %tobool4388 = icmp ne i32 %1563, 0
  br label %land.end4389

land.end4389:                                     ; preds = %land.rhs4378, %for.body4364
  %1564 = phi i1 [ false, %for.body4364 ], [ %tobool4388, %land.rhs4378 ]
  %conv4390 = zext i1 %1564 to i16
  %1565 = load i32* getelementptr inbounds ([1 x [6 x i32]]* @_ZL5g_860, i32 0, i64 0, i64 4), align 4
  %call4391 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv4390, i32 %1565)
  %1566 = load i32* %l_2306, align 4
  %1567 = load i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 1, i64 0, i64 6), align 2
  store i16 %1567, i16* @_ZL6g_1736, align 2
  %conv4392 = zext i16 %1567 to i32
  %1568 = load i32* %l_2316, align 4
  %1569 = load i16* @_ZL6g_1430, align 2
  %conv4393 = sext i16 %1569 to i32
  %call4394 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %1568, i32 %conv4393)
  %1570 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 7, i64 3), align 4
  %and4395 = and i32 %1570, %call4394
  store i32 %and4395, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 7, i64 3), align 4
  %call4396 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %and4395, i32 33775671)
  %cmp4397 = icmp ne i32 %conv4392, %call4396
  %conv4398 = zext i1 %cmp4397 to i16
  %1571 = load i32* @_ZL5g_859, align 4
  %conv4399 = trunc i32 %1571 to i16
  %call4400 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv4398, i16 signext %conv4399)
  %conv4401 = sext i16 %call4400 to i32
  %1572 = load i32* @_ZL4g_36, align 4
  %cmp4402 = icmp ule i32 %conv4401, %1572
  %conv4403 = zext i1 %cmp4402 to i32
  %1573 = load i32* %l_659, align 4
  %add4404 = add nsw i32 %1573, 1
  %idxprom4405 = sext i32 %add4404 to i64
  %1574 = load i16* @_ZL4g_60, align 2
  %conv4406 = zext i16 %1574 to i32
  %add4407 = add nsw i32 %conv4406, 1
  %idxprom4408 = sext i32 %add4407 to i64
  %1575 = load i32* %l_1300, align 4
  %idxprom4409 = sext i32 %1575 to i64
  %arrayidx4410 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 %idxprom4409
  %arrayidx4411 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4410, i32 0, i64 %idxprom4408
  %arrayidx4412 = getelementptr inbounds [5 x i32]* %arrayidx4411, i32 0, i64 %idxprom4405
  %1576 = load i32* %arrayidx4412, align 4
  %cmp4413 = icmp ugt i32 %conv4403, %1576
  %conv4414 = zext i1 %cmp4413 to i32
  %cmp4415 = icmp sgt i32 25872, %conv4414
  %conv4416 = zext i1 %cmp4415 to i32
  %1577 = load i16* @_ZL4g_60, align 2
  %idxprom4417 = zext i16 %1577 to i64
  %arrayidx4418 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 %idxprom4417
  %1578 = load i16* %arrayidx4418, align 2
  %conv4419 = sext i16 %1578 to i32
  %and4420 = and i32 %conv4416, %conv4419
  %cmp4421 = icmp sle i32 6, %and4420
  %conv4422 = zext i1 %cmp4421 to i32
  %arrayidx4423 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 0
  %arrayidx4424 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4423, i32 0, i64 4
  %arrayidx4425 = getelementptr inbounds [5 x i32]* %arrayidx4424, i32 0, i64 0
  %1579 = load i32* %arrayidx4425, align 4
  %cmp4426 = icmp ule i32 %conv4422, %1579
  %conv4427 = zext i1 %cmp4426 to i16
  %call4428 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv4427, i32 1)
  %conv4429 = sext i16 %call4428 to i32
  %call4430 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %1566, i32 %conv4429)
  %conv4431 = trunc i32 %call4430 to i16
  %1580 = load i16* %l_2317, align 2
  %conv4432 = zext i16 %1580 to i32
  %call4433 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv4431, i32 %conv4432)
  %conv4434 = zext i16 %call4433 to i32
  %1581 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 0, i64 0, i64 1), align 4
  %cmp4435 = icmp ne i32 %conv4434, %1581
  %conv4436 = zext i1 %cmp4435 to i32
  %1582 = load i32* @_ZL6g_2318, align 4
  %and4437 = and i32 %conv4436, %1582
  store i32 %and4437, i32* @_ZL6g_1295, align 4
  %1583 = load i32* @_ZL4g_48, align 4
  %xor4438 = xor i32 %and4437, %1583
  %cmp4439 = icmp sle i32 %xor4438, 719320534
  br i1 %cmp4439, label %land.rhs4440, label %land.end4442

land.rhs4440:                                     ; preds = %land.end4389
  %1584 = load i16* @_ZL6g_1430, align 2
  %tobool4441 = icmp ne i16 %1584, 0
  br label %land.end4442

land.end4442:                                     ; preds = %land.rhs4440, %land.end4389
  %1585 = phi i1 [ false, %land.end4389 ], [ %tobool4441, %land.rhs4440 ]
  %conv4443 = zext i1 %1585 to i32
  %1586 = load i16* @_ZL4g_60, align 2
  %idxprom4444 = zext i16 %1586 to i64
  %arrayidx4445 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 %idxprom4444
  %1587 = load i32* %arrayidx4445, align 4
  %cmp4446 = icmp ne i32 %conv4443, %1587
  %conv4447 = zext i1 %cmp4446 to i32
  %cmp4448 = icmp slt i32 %conv4447, 0
  %conv4449 = zext i1 %cmp4448 to i16
  %call4450 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv4449, i32 5)
  %conv4451 = sext i16 %call4450 to i32
  %cmp4452 = icmp eq i32 %conv4451, 61545
  %conv4453 = zext i1 %cmp4452 to i32
  %arrayidx4454 = getelementptr inbounds [5 x i32]* %l_2319, i32 0, i64 0
  %1588 = load i32* %arrayidx4454, align 4
  %xor4455 = xor i32 %1588, %conv4453
  store i32 %xor4455, i32* %arrayidx4454, align 4
  %conv4456 = trunc i32 %xor4455 to i16
  %call4457 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %call4391, i16 zeroext %conv4456)
  %tobool4458 = icmp ne i16 %call4457, 0
  br i1 %tobool4458, label %land.rhs4459, label %land.end4460

land.rhs4459:                                     ; preds = %land.end4442
  br label %land.end4460

land.end4460:                                     ; preds = %land.rhs4459, %land.end4442
  %1589 = phi i1 [ false, %land.end4442 ], [ true, %land.rhs4459 ]
  %conv4461 = zext i1 %1589 to i32
  %1590 = load i32* @_ZL5g_796, align 4
  %cmp4462 = icmp ne i32 %conv4461, %1590
  %conv4463 = zext i1 %cmp4462 to i32
  store i32 %conv4463, i32* %l_1883, align 4
  %arrayidx4464 = getelementptr inbounds [7 x i32]* %l_2274, i32 0, i64 0
  %1591 = load i32* %arrayidx4464, align 4
  %or4465 = or i32 %1591, %conv4463
  store i32 %or4465, i32* %arrayidx4464, align 4
  %1592 = load i32* @_ZL6g_1666, align 4
  %1593 = load i32* %l_659, align 4
  %add4466 = add nsw i32 %1593, 1
  %idxprom4467 = sext i32 %add4466 to i64
  %1594 = load i16* @_ZL4g_60, align 2
  %conv4468 = zext i16 %1594 to i32
  %add4469 = add nsw i32 %conv4468, 1
  %idxprom4470 = sext i32 %add4469 to i64
  %1595 = load i32* %l_1300, align 4
  %idxprom4471 = sext i32 %1595 to i64
  %arrayidx4472 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 %idxprom4471
  %arrayidx4473 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4472, i32 0, i64 %idxprom4470
  %arrayidx4474 = getelementptr inbounds [5 x i32]* %arrayidx4473, i32 0, i64 %idxprom4467
  %1596 = load i32* %arrayidx4474, align 4
  %cmp4475 = icmp eq i32 %1592, %1596
  %conv4476 = zext i1 %cmp4475 to i32
  %1597 = load i32* @_ZL6g_2318, align 4
  %or4477 = or i32 %1597, %conv4476
  store i32 %or4477, i32* @_ZL6g_2318, align 4
  br label %for.inc4478

for.inc4478:                                      ; preds = %land.end4460
  %1598 = load i32* %l_659, align 4
  %sub4479 = sub nsw i32 %1598, 1
  store i32 %sub4479, i32* %l_659, align 4
  br label %for.cond4362

for.end4480:                                      ; preds = %for.cond4362
  store i32 -1, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 2), align 4
  store i32 -1, i32* @_ZL6g_2106, align 4
  store i32 0, i32* %l_2181, align 4
  br label %for.cond4481

for.cond4481:                                     ; preds = %for.inc4585, %for.end4480
  %1599 = load i32* %l_2181, align 4
  %cmp4482 = icmp sle i32 %1599, 1
  br i1 %cmp4482, label %for.body4483, label %for.end4587

for.body4483:                                     ; preds = %for.cond4481
  %1600 = load i32* @_ZL6g_2318, align 4
  %xor4487 = xor i32 %1600, -1
  store i32 %xor4487, i32* @_ZL6g_2318, align 4
  %1601 = load i32* %l_2181, align 4
  %add4488 = add nsw i32 %1601, 1
  %idxprom4489 = sext i32 %add4488 to i64
  %1602 = load i32* %l_2181, align 4
  %add4490 = add nsw i32 %1602, 1
  %idxprom4491 = sext i32 %add4490 to i64
  %1603 = load i32* %l_1300, align 4
  %idxprom4492 = sext i32 %1603 to i64
  %arrayidx4493 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 %idxprom4492
  %arrayidx4494 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4493, i32 0, i64 %idxprom4491
  %arrayidx4495 = getelementptr inbounds [5 x i32]* %arrayidx4494, i32 0, i64 %idxprom4489
  %1604 = load i32* %arrayidx4495, align 4
  %tobool4496 = icmp ne i32 %1604, 0
  br i1 %tobool4496, label %if.then4497, label %if.end4498

if.then4497:                                      ; preds = %for.body4483
  br label %for.end4587

if.end4498:                                       ; preds = %for.body4483
  %1605 = load i16* @_ZL4g_60, align 2
  %idxprom4499 = zext i16 %1605 to i64
  %arrayidx4500 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 %idxprom4499
  %1606 = load i16* %arrayidx4500, align 2
  %conv4501 = sext i16 %1606 to i32
  %arrayidx4502 = getelementptr inbounds [7 x i32]* %l_2274, i32 0, i64 0
  %1607 = load i32* %arrayidx4502, align 4
  %call4503 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv4501, i32 %1607)
  %arrayidx4504 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 2
  %1608 = load i32* %arrayidx4504, align 4
  %conv4505 = trunc i32 %1608 to i16
  %1609 = load i32* @_ZL5g_930, align 4
  %cmp4506 = icmp ne i32 %1609, 42117
  %conv4507 = zext i1 %cmp4506 to i32
  %call4508 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv4507, i32 -1)
  %1610 = load i32* @_ZL6g_2318, align 4
  %cmp4509 = icmp ult i32 %call4508, %1610
  %conv4510 = zext i1 %cmp4509 to i32
  %call4511 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv4505, i32 %conv4510)
  %conv4512 = zext i16 %call4511 to i32
  %tobool4513 = icmp ne i32 %conv4512, 0
  %lnot4514 = xor i1 %tobool4513, true
  %conv4515 = zext i1 %lnot4514 to i32
  %cmp4516 = icmp eq i32 1, %conv4515
  %conv4517 = zext i1 %cmp4516 to i16
  %1611 = load volatile i32* @_ZL6g_1892, align 4
  %1612 = load i16* @_ZL5g_394, align 2
  %conv4518 = zext i16 %1612 to i32
  %cmp4519 = icmp eq i32 %1611, %conv4518
  %conv4520 = zext i1 %cmp4519 to i32
  %1613 = load i32* @_ZL4g_48, align 4
  %call4521 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv4520, i32 %1613)
  %1614 = load i16* %l_2336, align 2
  %conv4522 = zext i16 %1614 to i32
  %cmp4523 = icmp sle i32 %call4521, %conv4522
  %conv4524 = zext i1 %cmp4523 to i16
  %call4525 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv4524, i16 zeroext -23636)
  store i16 %call4525, i16* @_ZL6g_1430, align 2
  %1615 = load i32* @_ZL4g_36, align 4
  %call4526 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %call4525, i32 %1615)
  %call4527 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv4517, i16 signext %call4526)
  %conv4528 = sext i16 %call4527 to i32
  %cmp4529 = icmp ule i32 %call4503, %conv4528
  %conv4530 = zext i1 %cmp4529 to i32
  %arrayidx4531 = getelementptr inbounds [7 x i32]* %l_2337, i32 0, i64 1
  %1616 = load i32* %arrayidx4531, align 4
  %and4532 = and i32 %conv4530, %1616
  %1617 = load i16* @_ZL4g_60, align 2
  %idxprom4533 = zext i16 %1617 to i64
  %arrayidx4534 = getelementptr inbounds [6 x i32]* %l_1837, i32 0, i64 %idxprom4533
  %1618 = load i32* %arrayidx4534, align 4
  %cmp4535 = icmp ugt i32 %and4532, %1618
  %conv4536 = zext i1 %cmp4535 to i32
  store i32 %conv4536, i32* @_ZL3g_2, align 4
  store i32 -2119071522, i32* %l_2272, align 4
  %arrayidx4537 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 4
  %arrayidx4538 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx4537, i32 0, i64 1
  %arrayidx4539 = getelementptr inbounds [6 x i32]* %arrayidx4538, i32 0, i64 3
  store i32 -2119071522, i32* %arrayidx4539, align 4
  %1619 = load i16* @_ZL6g_1430, align 2
  %conv4540 = sext i16 %1619 to i32
  store i32 %conv4540, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  store i16 -15224, i16* @_ZL6g_1066, align 2
  store i32 50312, i32* %l_1877, align 4
  %call4541 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext -15224, i32 9)
  %conv4542 = zext i16 %call4541 to i32
  %1620 = load i32* %l_1190, align 4
  store i32 %1620, i32* @_ZL3g_2, align 4
  %cmp4543 = icmp sge i32 %conv4542, %1620
  %conv4544 = zext i1 %cmp4543 to i16
  %1621 = load i16* @_ZL6g_1477, align 2
  %call4545 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext 28366, i16 signext %1621)
  %tobool4546 = icmp ne i16 %call4545, 0
  br i1 %tobool4546, label %land.lhs.true4547, label %land.end4555

land.lhs.true4547:                                ; preds = %if.end4498
  %1622 = load i16* getelementptr inbounds ([2 x [1 x [7 x i16]]]* @_ZL6g_2124, i32 0, i64 1, i64 0, i64 0), align 2
  %tobool4548 = icmp ne i16 %1622, 0
  br i1 %tobool4548, label %land.lhs.true4549, label %land.end4555

land.lhs.true4549:                                ; preds = %land.lhs.true4547
  %1623 = load i16* @_ZL4g_60, align 2
  %tobool4550 = icmp ne i16 %1623, 0
  br i1 %tobool4550, label %land.rhs4551, label %land.end4555

land.rhs4551:                                     ; preds = %land.lhs.true4549
  %1624 = load i16* @_ZL4g_60, align 2
  %idxprom4552 = zext i16 %1624 to i64
  %arrayidx4553 = getelementptr inbounds [6 x i16]* %l_1888, i32 0, i64 %idxprom4552
  %1625 = load i16* %arrayidx4553, align 2
  %tobool4554 = icmp ne i16 %1625, 0
  br label %land.end4555

land.end4555:                                     ; preds = %land.rhs4551, %land.lhs.true4549, %land.lhs.true4547, %if.end4498
  %1626 = phi i1 [ false, %land.lhs.true4549 ], [ false, %land.lhs.true4547 ], [ false, %if.end4498 ], [ %tobool4554, %land.rhs4551 ]
  %conv4556 = zext i1 %1626 to i16
  store i16 %conv4556, i16* @_ZL4g_56, align 2
  %conv4557 = sext i16 %conv4556 to i32
  %or4558 = or i32 -6, %conv4557
  %conv4559 = trunc i32 %or4558 to i16
  %call4560 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv4559, i16 zeroext -5)
  %call4561 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv4544, i16 signext %call4560)
  %conv4562 = sext i16 %call4561 to i32
  %1627 = load i32* %l_1300, align 4
  %call4563 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv4562, i32 %1627)
  %or4564 = or i32 %call4563, -9
  %tobool4565 = icmp ne i32 %or4564, 0
  %lnot4566 = xor i1 %tobool4565, true
  %conv4567 = zext i1 %lnot4566 to i32
  %or4568 = or i32 %conv4540, %conv4567
  %or4569 = or i32 0, %or4568
  %cmp4570 = icmp sge i32 7, %or4569
  %conv4571 = zext i1 %cmp4570 to i32
  %arrayidx4572 = getelementptr inbounds [4 x [6 x [6 x i32]]]* %l_1891, i32 0, i64 2
  %arrayidx4573 = getelementptr inbounds [6 x [6 x i32]]* %arrayidx4572, i32 0, i64 1
  %arrayidx4574 = getelementptr inbounds [6 x i32]* %arrayidx4573, i32 0, i64 5
  %1628 = load i32* %arrayidx4574, align 4
  %or4575 = or i32 %conv4571, %1628
  %cmp4576 = icmp sgt i32 %or4575, 40540
  %conv4577 = zext i1 %cmp4576 to i16
  %1629 = load i32* %l_1853, align 4
  %call4578 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv4577, i32 %1629)
  %call4579 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext 19515, i16 signext %call4578)
  %conv4580 = sext i16 %call4579 to i32
  %arrayidx4581 = getelementptr inbounds [7 x i32]* %l_2274, i32 0, i64 0
  store i32 %conv4580, i32* %arrayidx4581, align 4
  %conv4582 = trunc i32 %conv4580 to i16
  %call4583 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv4582, i32 15)
  %conv4584 = sext i16 %call4583 to i32
  store i32 %conv4584, i32* %l_1589, align 4
  br label %for.inc4585

for.inc4585:                                      ; preds = %land.end4555
  %1630 = load i32* %l_2181, align 4
  %add4586 = add nsw i32 %1630, 1
  store i32 %add4586, i32* %l_2181, align 4
  br label %for.cond4481

for.end4587:                                      ; preds = %if.then4497, %for.cond4481
  br label %for.inc4588

for.inc4588:                                      ; preds = %for.end4587
  %1631 = load i32* %l_1300, align 4
  %add4589 = add nsw i32 %1631, 1
  store i32 %add4589, i32* %l_1300, align 4
  br label %for.cond4305

for.end4590:                                      ; preds = %for.cond4305
  br label %for.inc4591

for.inc4591:                                      ; preds = %for.end4590
  %1632 = load i16* @_ZL4g_60, align 2
  %conv4592 = zext i16 %1632 to i32
  %add4593 = add nsw i32 %conv4592, 1
  %conv4594 = trunc i32 %add4593 to i16
  store i16 %conv4594, i16* @_ZL4g_60, align 2
  br label %for.cond4236

for.end4595:                                      ; preds = %for.cond4236
  %1633 = load i32* %l_2355, align 4
  %inc4596 = add i32 %1633, 1
  store i32 %inc4596, i32* %l_2355, align 4
  %1634 = load i32* %l_820, align 4
  store i32 %1634, i32* %l_2273, align 4
  %cmp4597 = icmp ule i32 %1634, 0
  %conv4598 = zext i1 %cmp4597 to i32
  store i32 %conv4598, i32* %l_1589, align 4
  %1635 = load i32* %l_2272, align 4
  %1636 = load i32* %l_1877, align 4
  %and4599 = and i32 %1636, %1635
  store i32 %and4599, i32* %l_1877, align 4
  store i32 %and4599, i32* %l_1879, align 4
  %1637 = load i16* @_ZL6g_1580, align 2
  %conv4600 = sext i16 %1637 to i32
  %xor4601 = xor i32 %conv4600, %and4599
  %conv4602 = trunc i32 %xor4601 to i16
  store i16 %conv4602, i16* @_ZL6g_1580, align 2
  %call4603 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv4602, i16 signext -2)
  %conv4604 = sext i16 %call4603 to i32
  %arrayidx4605 = getelementptr inbounds [6 x i32]* %l_1449, i32 0, i64 0
  %1638 = load i32* %arrayidx4605, align 4
  %conv4606 = trunc i32 %1638 to i16
  %call4607 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv4606, i16 zeroext 1431)
  %1639 = load i32* getelementptr inbounds ([6 x i32]* @_ZL6g_1311, i32 0, i64 5), align 4
  %conv4608 = trunc i32 %1639 to i16
  %call4609 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %call4607, i16 signext %conv4608)
  %conv4610 = sext i16 %call4609 to i32
  %cmp4611 = icmp sle i32 58499, %conv4610
  %conv4612 = zext i1 %cmp4611 to i32
  %cmp4613 = icmp sle i32 %conv4604, %conv4612
  br i1 %cmp4613, label %lor.end4615, label %lor.rhs4614

lor.rhs4614:                                      ; preds = %for.end4595
  br label %lor.end4615

lor.end4615:                                      ; preds = %lor.rhs4614, %for.end4595
  %1640 = phi i1 [ true, %for.end4595 ], [ true, %lor.rhs4614 ]
  br i1 %1640, label %lor.end4619, label %lor.rhs4617

lor.rhs4617:                                      ; preds = %lor.end4615
  %1641 = load i32* %l_2306, align 4
  %tobool4618 = icmp ne i32 %1641, 0
  br label %lor.end4619

lor.end4619:                                      ; preds = %lor.rhs4617, %lor.end4615
  %1642 = phi i1 [ true, %lor.end4615 ], [ %tobool4618, %lor.rhs4617 ]
  %conv4620 = zext i1 %1642 to i32
  %1643 = load i16* %l_2145, align 2
  %conv4621 = sext i16 %1643 to i32
  %or4622 = or i32 %conv4620, %conv4621
  %cmp4623 = icmp ule i32 %or4622, 3
  %conv4624 = zext i1 %cmp4623 to i16
  store i16 %conv4624, i16* @_ZL4g_46, align 2
  %1644 = load i32* %l_1258, align 4
  %conv4625 = trunc i32 %1644 to i16
  %call4626 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv4624, i16 signext %conv4625)
  %arrayidx4627 = getelementptr inbounds [2 x [8 x [5 x i32]]]* %l_1301, i32 0, i64 1
  %arrayidx4628 = getelementptr inbounds [8 x [5 x i32]]* %arrayidx4627, i32 0, i64 3
  %arrayidx4629 = getelementptr inbounds [5 x i32]* %arrayidx4628, i32 0, i64 2
  %1645 = load i32* %arrayidx4629, align 4
  %conv4630 = trunc i32 %1645 to i16
  %call4631 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %call4626, i16 signext %conv4630)
  %conv4632 = sext i16 %call4631 to i32
  %call4633 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 4, i32 %conv4632)
  %1646 = load i32* @_ZL5g_622, align 4
  %xor4634 = xor i32 %call4633, %1646
  %tobool4635 = icmp ne i32 %xor4634, 0
  br i1 %tobool4635, label %lor.end4638, label %lor.rhs4636

lor.rhs4636:                                      ; preds = %lor.end4619
  %1647 = load i32* @_ZL5g_930, align 4
  %tobool4637 = icmp ne i32 %1647, 0
  br label %lor.end4638

lor.end4638:                                      ; preds = %lor.rhs4636, %lor.end4619
  %1648 = phi i1 [ true, %lor.end4619 ], [ %tobool4637, %lor.rhs4636 ]
  %conv4639 = zext i1 %1648 to i32
  %cmp4640 = icmp ne i32 %conv4639, 40878
  %conv4641 = zext i1 %cmp4640 to i32
  %xor4642 = xor i32 65529, %conv4641
  %or4643 = or i32 34610, %xor4642
  %tobool4644 = icmp ne i32 %or4643, 0
  br i1 %tobool4644, label %land.rhs4645, label %land.end4646

land.rhs4645:                                     ; preds = %lor.end4638
  br label %land.end4646

land.end4646:                                     ; preds = %land.rhs4645, %lor.end4638
  %1649 = phi i1 [ false, %lor.end4638 ], [ false, %land.rhs4645 ]
  %conv4647 = zext i1 %1649 to i32
  %cmp4648 = icmp ne i32 %conv4598, %conv4647
  br i1 %cmp4648, label %land.lhs.true4649, label %if.else4793

land.lhs.true4649:                                ; preds = %land.end4646
  %1650 = load volatile i32* @_ZL5g_778, align 4
  %tobool4650 = icmp ne i32 %1650, 0
  br i1 %tobool4650, label %if.then4651, label %if.else4793

if.then4651:                                      ; preds = %land.lhs.true4649
  store i16 -9728, i16* %l_2370, align 2
  store i32 -9, i32* %l_2371, align 4
  %1651 = bitcast [10 x [5 x i32]]* %l_2373 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1651, i8* bitcast ([10 x [5 x i32]]* @_ZZL6func_1vE6l_2373 to i8*), i64 200, i32 16, i1 false)
  store i32 -800057511, i32* %l_2396, align 4
  %1652 = bitcast [10 x [2 x [3 x i32]]]* %l_2407 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1652, i8* bitcast ([10 x [2 x [3 x i32]]]* @_ZZL6func_1vE6l_2407 to i8*), i64 240, i32 16, i1 false)
  %1653 = load i32* %l_2374, align 4
  %dec4655 = add i32 %1653, -1
  store i32 %dec4655, i32* %l_2374, align 4
  %1654 = load i32* @_ZL4g_55, align 4
  %tobool4656 = icmp ne i32 %1654, 0
  br i1 %tobool4656, label %lor.end4708, label %lor.rhs4657

lor.rhs4657:                                      ; preds = %if.then4651
  %1655 = load i32* @_ZL5g_622, align 4
  %inc4658 = add i32 %1655, 1
  store i32 %inc4658, i32* @_ZL5g_622, align 4
  %cmp4659 = icmp ule i32 1, %1655
  %conv4660 = zext i1 %cmp4659 to i32
  %1656 = load i16* @_ZL4g_60, align 2
  %conv4661 = zext i16 %1656 to i32
  %neg4662 = xor i32 %conv4661, -1
  %1657 = load i16* %l_2370, align 2
  %conv4663 = sext i16 %1657 to i32
  %arrayidx4664 = getelementptr inbounds [7 x [4 x [2 x i32]]]* %l_1890, i32 0, i64 2
  %arrayidx4665 = getelementptr inbounds [4 x [2 x i32]]* %arrayidx4664, i32 0, i64 1
  %arrayidx4666 = getelementptr inbounds [2 x i32]* %arrayidx4665, i32 0, i64 0
  %1658 = load i32* %arrayidx4666, align 4
  %and4667 = and i32 %conv4663, %1658
  %1659 = load i32* @_ZL5g_489, align 4
  %tobool4668 = icmp ne i32 %1659, 0
  br i1 %tobool4668, label %lor.end4683, label %lor.rhs4669

lor.rhs4669:                                      ; preds = %lor.rhs4657
  %arrayidx4670 = getelementptr inbounds [2 x [7 x [2 x i32]]]* %l_2372, i32 0, i64 1
  %arrayidx4671 = getelementptr inbounds [7 x [2 x i32]]* %arrayidx4670, i32 0, i64 1
  %arrayidx4672 = getelementptr inbounds [2 x i32]* %arrayidx4671, i32 0, i64 1
  %1660 = load i32* %arrayidx4672, align 4
  %call4673 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext 27111, i32 %1660)
  %conv4674 = sext i16 %call4673 to i32
  %1661 = load i32* @_ZL6g_1666, align 4
  %cmp4675 = icmp ult i32 %conv4674, %1661
  %conv4676 = zext i1 %cmp4675 to i32
  %1662 = load i16* @_ZL6g_1430, align 2
  %conv4677 = sext i16 %1662 to i32
  %or4678 = or i32 %conv4676, %conv4677
  %1663 = load volatile i16* @_ZL6g_1442, align 2
  %conv4679 = zext i16 %1663 to i32
  %and4680 = and i32 %or4678, %conv4679
  %1664 = load i16* %l_2370, align 2
  %conv4681 = sext i16 %1664 to i32
  %cmp4682 = icmp sge i32 %and4680, %conv4681
  br label %lor.end4683

lor.end4683:                                      ; preds = %lor.rhs4669, %lor.rhs4657
  %1665 = phi i1 [ true, %lor.rhs4657 ], [ %cmp4682, %lor.rhs4669 ]
  %conv4684 = zext i1 %1665 to i32
  %cmp4685 = icmp sge i32 %and4667, %conv4684
  %conv4686 = zext i1 %cmp4685 to i16
  %call4687 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv4686, i16 signext -10)
  %tobool4688 = icmp ne i16 %call4687, 0
  br i1 %tobool4688, label %lor.end4691, label %lor.rhs4689

lor.rhs4689:                                      ; preds = %lor.end4683
  %1666 = load i16* %l_1748, align 2
  %tobool4690 = icmp ne i16 %1666, 0
  br label %lor.end4691

lor.end4691:                                      ; preds = %lor.rhs4689, %lor.end4683
  %1667 = phi i1 [ true, %lor.end4683 ], [ %tobool4690, %lor.rhs4689 ]
  %conv4692 = zext i1 %1667 to i32
  %arrayidx4693 = getelementptr inbounds [5 x [5 x [6 x i32]]]* %l_4, i32 0, i64 3
  %arrayidx4694 = getelementptr inbounds [5 x [6 x i32]]* %arrayidx4693, i32 0, i64 4
  %arrayidx4695 = getelementptr inbounds [6 x i32]* %arrayidx4694, i32 0, i64 5
  %1668 = load i32* %arrayidx4695, align 4
  %cmp4696 = icmp slt i32 %conv4692, %1668
  %conv4697 = zext i1 %cmp4696 to i32
  %and4698 = and i32 %conv4697, 3
  %cmp4699 = icmp ult i32 %neg4662, %and4698
  %conv4700 = zext i1 %cmp4699 to i32
  %1669 = load i32* @_ZL5g_615, align 4
  %cmp4701 = icmp ne i32 %conv4700, %1669
  %conv4702 = zext i1 %cmp4701 to i32
  %cmp4703 = icmp eq i32 -1203004141, %conv4702
  %conv4704 = zext i1 %cmp4703 to i16
  %call4705 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv4704, i32 15)
  %conv4706 = sext i16 %call4705 to i32
  %cmp4707 = icmp sgt i32 %conv4660, %conv4706
  br label %lor.end4708

lor.end4708:                                      ; preds = %lor.end4691, %if.then4651
  %1670 = phi i1 [ true, %if.then4651 ], [ %cmp4707, %lor.end4691 ]
  %conv4709 = zext i1 %1670 to i32
  %1671 = load i32* @_ZL6g_1834, align 4
  %and4710 = and i32 %1671, %conv4709
  store i32 %and4710, i32* @_ZL6g_1834, align 4
  %cmp4711 = icmp ule i32 %and4710, -4
  br i1 %cmp4711, label %if.then4712, label %if.else4720

if.then4712:                                      ; preds = %lor.end4708
  store i32 0, i32* %l_1688, align 4
  br label %for.cond4713

for.cond4713:                                     ; preds = %for.inc4717, %if.then4712
  %1672 = load i32* %l_1688, align 4
  %cmp4714 = icmp ugt i32 %1672, 6
  br i1 %cmp4714, label %for.body4715, label %for.end4719

for.body4715:                                     ; preds = %for.cond4713
  %1673 = load i16* %l_2390, align 2
  %conv4716 = zext i16 %1673 to i32
  store i32 %conv4716, i32* %retval
  br label %return

for.inc4717:                                      ; No predecessors!
  %1674 = load i32* %l_1688, align 4
  %call4718 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %1674, i32 1)
  store i32 %call4718, i32* %l_1688, align 4
  br label %for.cond4713

for.end4719:                                      ; preds = %for.cond4713
  br label %if.end4792

if.else4720:                                      ; preds = %lor.end4708
  %1675 = bitcast [10 x [2 x i32]]* %l_2408 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1675, i8* bitcast ([10 x [2 x i32]]* @_ZZL6func_1vE6l_2408 to i8*), i64 80, i32 16, i1 false)
  store i32 -347445003, i32* %l_2413, align 4
  %1676 = load i32* @_ZL5g_396, align 4
  %1677 = load i32* %l_2273, align 4
  %xor4723 = xor i32 %1677, %1676
  store i32 %xor4723, i32* %l_2273, align 4
  %tobool4724 = icmp ne i32 %xor4723, 0
  br i1 %tobool4724, label %if.then4725, label %if.else4770

if.then4725:                                      ; preds = %if.else4720
  store i32 1, i32* %l_2395, align 4
  %1678 = load i32* %l_2272, align 4
  %1679 = load i16* @_ZL4g_60, align 2
  %conv4726 = zext i16 %1679 to i32
  %xor4727 = xor i32 %conv4726, %1678
  %conv4728 = trunc i32 %xor4727 to i16
  store i16 %conv4728, i16* @_ZL4g_60, align 2
  %conv4729 = zext i16 %conv4728 to i32
  %1680 = load i32* %l_2371, align 4
  %1681 = load i32* %l_1955, align 4
  %arrayidx4730 = getelementptr inbounds [10 x [5 x i32]]* %l_2373, i32 0, i64 2
  %arrayidx4731 = getelementptr inbounds [5 x i32]* %arrayidx4730, i32 0, i64 0
  %1682 = load i32* %arrayidx4731, align 4
  %cmp4732 = icmp uge i32 %1681, %1682
  %conv4733 = zext i1 %cmp4732 to i32
  %1683 = load i32* %l_2395, align 4
  %arrayidx4734 = getelementptr inbounds [7 x [4 x [2 x i32]]]* %l_1890, i32 0, i64 4
  %arrayidx4735 = getelementptr inbounds [4 x [2 x i32]]* %arrayidx4734, i32 0, i64 1
  %arrayidx4736 = getelementptr inbounds [2 x i32]* %arrayidx4735, i32 0, i64 0
  store i32 %1683, i32* %arrayidx4736, align 4
  %cmp4737 = icmp eq i32 %conv4733, %1683
  %conv4738 = zext i1 %cmp4737 to i32
  %1684 = load i32* %l_2396, align 4
  %and4739 = and i32 %1684, %conv4738
  store i32 %and4739, i32* %l_2396, align 4
  %1685 = load i16* @_ZL6g_1477, align 2
  %conv4740 = sext i16 %1685 to i32
  store i16 15626, i16* @_ZL5g_394, align 2
  %1686 = load i32* %l_2395, align 4
  %conv4741 = trunc i32 %1686 to i16
  %1687 = load i32* %l_2406, align 4
  %1688 = load i32* @_ZL6g_1873, align 4
  %call4742 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %1687, i32 %1688)
  %1689 = load i32* @_ZL6g_1021, align 4
  %cmp4743 = icmp ult i32 %call4742, %1689
  %conv4744 = zext i1 %cmp4743 to i32
  %neg4745 = xor i32 %conv4744, -1
  %xor4746 = xor i32 %neg4745, 976697150
  %1690 = load i32* %l_2371, align 4
  %or4747 = or i32 %xor4746, %1690
  %call4748 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv4741, i32 %or4747)
  %conv4749 = zext i16 %call4748 to i32
  %1691 = load i32* %l_2265, align 4
  %cmp4750 = icmp ule i32 %conv4749, %1691
  %conv4751 = zext i1 %cmp4750 to i32
  %cmp4752 = icmp slt i32 15626, %conv4751
  %conv4753 = zext i1 %cmp4752 to i32
  %xor4754 = xor i32 %conv4740, %conv4753
  store i32 %xor4754, i32* @_ZL5g_859, align 4
  %cmp4755 = icmp sle i32 %and4739, %xor4754
  %conv4756 = zext i1 %cmp4755 to i32
  %cmp4757 = icmp ult i32 %conv4756, 0
  %conv4758 = zext i1 %cmp4757 to i32
  %arrayidx4759 = getelementptr inbounds [2 x [7 x [2 x i32]]]* %l_2372, i32 0, i64 1
  %arrayidx4760 = getelementptr inbounds [7 x [2 x i32]]* %arrayidx4759, i32 0, i64 1
  %arrayidx4761 = getelementptr inbounds [2 x i32]* %arrayidx4760, i32 0, i64 0
  %1692 = load i32* %arrayidx4761, align 4
  %and4762 = and i32 %1692, %conv4758
  store i32 %and4762, i32* %arrayidx4761, align 4
  %1693 = load i32* @_ZL5g_930, align 4
  %cmp4763 = icmp eq i32 %and4762, %1693
  %conv4764 = zext i1 %cmp4763 to i32
  %call4765 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %1680, i32 %conv4764)
  %cmp4766 = icmp ugt i32 %conv4729, %call4765
  %conv4767 = zext i1 %cmp4766 to i16
  %call4768 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv4767, i16 signext 6)
  %conv4769 = sext i16 %call4768 to i32
  store i32 %conv4769, i32* @_ZL6g_2318, align 4
  br label %if.end4774

if.else4770:                                      ; preds = %if.else4720
  %arrayidx4771 = getelementptr inbounds [10 x [2 x [3 x i32]]]* %l_2407, i32 0, i64 7
  %arrayidx4772 = getelementptr inbounds [2 x [3 x i32]]* %arrayidx4771, i32 0, i64 1
  %arrayidx4773 = getelementptr inbounds [3 x i32]* %arrayidx4772, i32 0, i64 1
  %1694 = load i32* %arrayidx4773, align 4
  store i32 %1694, i32* %l_2273, align 4
  br label %if.end4774

if.end4774:                                       ; preds = %if.else4770, %if.then4725
  %arrayidx4775 = getelementptr inbounds [10 x [2 x i32]]* %l_2408, i32 0, i64 4
  %arrayidx4776 = getelementptr inbounds [2 x i32]* %arrayidx4775, i32 0, i64 1
  %1695 = load i32* %arrayidx4776, align 4
  %dec4777 = add i32 %1695, -1
  store i32 %dec4777, i32* %arrayidx4776, align 4
  store i32 0, i32* %l_1190, align 4
  br label %for.cond4778

for.cond4778:                                     ; preds = %for.inc4789, %if.end4774
  %1696 = load i32* %l_1190, align 4
  %cmp4779 = icmp sle i32 %1696, 4
  br i1 %cmp4779, label %for.body4780, label %for.end4791

for.body4780:                                     ; preds = %for.cond4778
  %1697 = load i16* @_ZL6g_1066, align 2
  %dec4781 = add i16 %1697, -1
  store i16 %dec4781, i16* @_ZL6g_1066, align 2
  %call4782 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %1697, i32 14)
  %conv4783 = zext i16 %call4782 to i32
  %arrayidx4784 = getelementptr inbounds [2 x [7 x [2 x i32]]]* %l_2372, i32 0, i64 1
  %arrayidx4785 = getelementptr inbounds [7 x [2 x i32]]* %arrayidx4784, i32 0, i64 3
  %arrayidx4786 = getelementptr inbounds [2 x i32]* %arrayidx4785, i32 0, i64 0
  %1698 = load i32* %arrayidx4786, align 4
  %and4787 = and i32 %1698, %conv4783
  store i32 %and4787, i32* %arrayidx4786, align 4
  %1699 = load i32* %l_2413, align 4
  %and4788 = and i32 %1699, 885102886
  store i32 %and4788, i32* %l_2413, align 4
  br label %for.inc4789

for.inc4789:                                      ; preds = %for.body4780
  %1700 = load i32* %l_1190, align 4
  %add4790 = add nsw i32 %1700, 1
  store i32 %add4790, i32* %l_1190, align 4
  br label %for.cond4778

for.end4791:                                      ; preds = %for.cond4778
  br label %if.end4792

if.end4792:                                       ; preds = %for.end4791, %for.end4719
  br label %if.end4794

if.else4793:                                      ; preds = %land.lhs.true4649, %land.end4646
  store i32 1, i32* %l_2416, align 4
  %1701 = load i32* %l_2416, align 4
  store i32 %1701, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 1, i64 1), align 4
  br label %if.end4794

if.end4794:                                       ; preds = %if.else4793, %if.end4792
  br label %if.end4795

if.end4795:                                       ; preds = %if.end4794, %lor.end4230
  %1702 = load i32* @_ZL4g_36, align 4
  %tobool4796 = icmp ne i32 %1702, 0
  br i1 %tobool4796, label %if.then4797, label %if.end4798

if.then4797:                                      ; preds = %if.end4795
  br label %lbl_2417

if.end4798:                                       ; preds = %if.end4795
  store i32 709875194, i32* %l_2418, align 4
  br label %if.end4799

if.end4799:                                       ; preds = %if.end4798, %for.end2942
  %1703 = load i32* %l_2419, align 4
  store i32 %1703, i32* %retval
  br label %return

return:                                           ; preds = %if.end4799, %for.body4715, %if.else3986, %land.end3906, %land.end3769, %if.end3135, %for.body2965, %land.end2911, %if.then2070, %lor.end1731, %if.else1546, %for.body919, %if.else721, %if.then689, %if.end611, %land.end585, %if.else469, %for.body27
  %1704 = load i32* %retval
  ret i32 %1704
}

; Function Attrs: uwtable
define internal void @_ZL15transparent_crcjPci(i32 %val, i8* %vname, i32 %flag) #0 {
entry:
  %val.addr = alloca i32, align 4
  %vname.addr = alloca i8*, align 8
  %flag.addr = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  store i8* %vname, i8** %vname.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32* %val.addr, align 4
  call void @_ZL12crc32_8bytesj(i32 %0)
  %1 = load i32* %flag.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8** %vname.addr, align 8
  %3 = load i32* @_ZL13crc32_context, align 4
  %xor = xor i32 %3, -1
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([35 x i8]* @.str46, i32 0, i32 0), i8* %2, i32 %xor)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: uwtable
define internal void @_ZL17platform_main_endji(i32 %crc, i32 %flag) #0 {
entry:
  %crc.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  store i32 %crc, i32* %crc.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32* %crc.addr, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str45, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: uwtable
define internal void @_ZL12crc32_8bytesj(i32 %val) #0 {
entry:
  %val.addr = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  %0 = load i32* %val.addr, align 4
  %shr = lshr i32 %0, 0
  %and = and i32 %shr, 255
  %conv = trunc i32 %and to i8
  call void @_ZL10crc32_byteh(i8 zeroext %conv)
  %1 = load i32* %val.addr, align 4
  %shr1 = lshr i32 %1, 8
  %and2 = and i32 %shr1, 255
  %conv3 = trunc i32 %and2 to i8
  call void @_ZL10crc32_byteh(i8 zeroext %conv3)
  %2 = load i32* %val.addr, align 4
  %shr4 = lshr i32 %2, 16
  %and5 = and i32 %shr4, 255
  %conv6 = trunc i32 %and5 to i8
  call void @_ZL10crc32_byteh(i8 zeroext %conv6)
  %3 = load i32* %val.addr, align 4
  %shr7 = lshr i32 %3, 24
  %and8 = and i32 %shr7, 255
  %conv9 = trunc i32 %and8 to i8
  call void @_ZL10crc32_byteh(i8 zeroext %conv9)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_ZL10crc32_byteh(i8 zeroext %b) #2 {
entry:
  %b.addr = alloca i8, align 1
  store i8 %b, i8* %b.addr, align 1
  %0 = load i32* @_ZL13crc32_context, align 4
  %shr = lshr i32 %0, 8
  %and = and i32 %shr, 16777215
  %1 = load i32* @_ZL13crc32_context, align 4
  %2 = load i8* %b.addr, align 1
  %conv = zext i8 %2 to i32
  %xor = xor i32 %1, %conv
  %and1 = and i32 %xor, 255
  %idxprom = zext i32 %and1 to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @_ZL9crc32_tab, i32 0, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  %xor2 = xor i32 %and, %3
  store i32 %xor2, i32* @_ZL13crc32_context, align 4
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal i32 @_ZL7func_10t(i16 zeroext %p_11) #2 {
entry:
  %p_11.addr = alloca i16, align 2
  %l_607 = alloca i16, align 2
  %l_608 = alloca i32, align 4
  %l_609 = alloca i32, align 4
  %l_610 = alloca i32, align 4
  %l_611 = alloca i32, align 4
  %l_612 = alloca i32, align 4
  %l_613 = alloca [2 x [6 x [3 x i32]]], align 16
  %l_614 = alloca [10 x i16], align 16
  %l_616 = alloca i32, align 4
  %l_617 = alloca i32, align 4
  %l_618 = alloca [10 x [4 x i32]], align 16
  %l_619 = alloca i16, align 2
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i16 %p_11, i16* %p_11.addr, align 2
  store i16 -605, i16* %l_607, align 2
  store i32 0, i32* %l_608, align 4
  store i32 6, i32* %l_609, align 4
  store i32 -6, i32* %l_610, align 4
  store i32 -10, i32* %l_611, align 4
  store i32 646896091, i32* %l_612, align 4
  %0 = bitcast [2 x [6 x [3 x i32]]]* %l_613 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([2 x [6 x [3 x i32]]]* @_ZZL7func_10tE5l_613 to i8*), i64 144, i32 16, i1 false)
  %1 = bitcast [10 x i16]* %l_614 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([10 x i16]* @_ZZL7func_10tE5l_614 to i8*), i64 20, i32 16, i1 false)
  store i32 584910769, i32* %l_616, align 4
  store i32 636287609, i32* %l_617, align 4
  %2 = bitcast [10 x [4 x i32]]* %l_618 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([10 x [4 x i32]]* @_ZZL7func_10tE5l_618 to i8*), i64 160, i32 16, i1 false)
  store i16 -32442, i16* %l_619, align 2
  %3 = load i32* @_ZL4g_36, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* @_ZL4g_36, align 4
  %neg = xor i32 %inc, -1
  store i32 %neg, i32* @_ZL3g_2, align 4
  store i16 -2905, i16* %l_607, align 2
  %4 = load i16* %l_619, align 2
  %inc1 = add i16 %4, 1
  store i16 %inc1, i16* %l_619, align 2
  %5 = load i16* %p_11.addr, align 2
  %conv = zext i16 %5 to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL7func_12jii(i32 %p_13, i32 %p_14, i32 %p_15) #2 {
entry:
  %retval = alloca i16, align 2
  %p_13.addr = alloca i32, align 4
  %p_14.addr = alloca i32, align 4
  %p_15.addr = alloca i32, align 4
  %l_405 = alloca i16, align 2
  %l_406 = alloca i32, align 4
  %l_415 = alloca [8 x i32], align 16
  %l_488 = alloca i32, align 4
  %l_576 = alloca [7 x [5 x i32]], align 16
  %l_578 = alloca i16, align 2
  %l_602 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l_407 = alloca [5 x i16], align 2
  %l_413 = alloca i32, align 4
  %l_414 = alloca i32, align 4
  %l_416 = alloca i32, align 4
  %l_420 = alloca i16, align 2
  %l_455 = alloca [8 x i32], align 16
  %l_553 = alloca [3 x i16], align 2
  %i4 = alloca i32, align 4
  %l_417 = alloca i32, align 4
  %l_456 = alloca [3 x i32], align 4
  %l_537 = alloca i32, align 4
  %l_568 = alloca i32, align 4
  %i35 = alloca i32, align 4
  %l_412 = alloca i16, align 2
  %l_440 = alloca i32, align 4
  %l_444 = alloca i32, align 4
  %l_516 = alloca i32, align 4
  %l_465 = alloca i16, align 2
  %l_487 = alloca i32, align 4
  %l_533 = alloca i32, align 4
  %l_550 = alloca i32, align 4
  %l_552 = alloca i32, align 4
  %l_554 = alloca [2 x [1 x [4 x i32]]], align 16
  %i240 = alloca i32, align 4
  %j241 = alloca i32, align 4
  %k = alloca i32, align 4
  %l_534 = alloca i32, align 4
  %l_548 = alloca [1 x [10 x [10 x i16]]], align 16
  %l_549 = alloca [2 x i32], align 4
  %l_551 = alloca i16, align 2
  %i330 = alloca i32, align 4
  %j331 = alloca i32, align 4
  %k332 = alloca i32, align 4
  %l_561 = alloca [3 x [4 x i32]], align 16
  %i394 = alloca i32, align 4
  %j395 = alloca i32, align 4
  %l_581 = alloca i16, align 2
  %l_582 = alloca [7 x i32], align 16
  %l_583 = alloca i32, align 4
  %l_584 = alloca i32, align 4
  %i508 = alloca i32, align 4
  %i521 = alloca i32, align 4
  %j522 = alloca i32, align 4
  %i526 = alloca i32, align 4
  %j527 = alloca i32, align 4
  store i32 %p_13, i32* %p_13.addr, align 4
  store i32 %p_14, i32* %p_14.addr, align 4
  store i32 %p_15, i32* %p_15.addr, align 4
  store i16 -10129, i16* %l_405, align 2
  store i32 934576439, i32* %l_406, align 4
  store i32 -1196718166, i32* %l_488, align 4
  %0 = bitcast [7 x [5 x i32]]* %l_576 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([7 x [5 x i32]]* @_ZZL7func_12jiiE5l_576 to i8*), i64 140, i32 16, i1 false)
  store i16 13909, i16* %l_578, align 2
  store i32 9, i32* %l_602, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i16 0, i16* @_ZL4g_46, align 2
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc499, %for.end
  %4 = load i16* @_ZL4g_46, align 2
  %conv = sext i16 %4 to i32
  %cmp2 = icmp sle i32 %conv, -6
  br i1 %cmp2, label %for.body3, label %for.end503

for.body3:                                        ; preds = %for.cond1
  store i32 987156770, i32* %l_413, align 4
  store i32 203719925, i32* %l_414, align 4
  store i32 0, i32* %l_416, align 4
  store i16 18767, i16* %l_420, align 2
  %5 = bitcast [8 x i32]* %l_455 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 32, i32 16, i1 false)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc10, %for.body3
  %6 = load i32* %i4, align 4
  %cmp6 = icmp slt i32 %6, 5
  br i1 %cmp6, label %for.body7, label %for.end12

for.body7:                                        ; preds = %for.cond5
  %7 = load i32* %i4, align 4
  %idxprom8 = sext i32 %7 to i64
  %arrayidx9 = getelementptr inbounds [5 x i16]* %l_407, i32 0, i64 %idxprom8
  store i16 -9676, i16* %arrayidx9, align 2
  br label %for.inc10

for.inc10:                                        ; preds = %for.body7
  %8 = load i32* %i4, align 4
  %inc11 = add nsw i32 %8, 1
  store i32 %inc11, i32* %i4, align 4
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  store i32 0, i32* %i4, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc18, %for.end12
  %9 = load i32* %i4, align 4
  %cmp14 = icmp slt i32 %9, 3
  br i1 %cmp14, label %for.body15, label %for.end20

for.body15:                                       ; preds = %for.cond13
  %10 = load i32* %i4, align 4
  %idxprom16 = sext i32 %10 to i64
  %arrayidx17 = getelementptr inbounds [3 x i16]* %l_553, i32 0, i64 %idxprom16
  store i16 26131, i16* %arrayidx17, align 2
  br label %for.inc18

for.inc18:                                        ; preds = %for.body15
  %11 = load i32* %i4, align 4
  %inc19 = add nsw i32 %11, 1
  store i32 %inc19, i32* %i4, align 4
  br label %for.cond13

for.end20:                                        ; preds = %for.cond13
  %12 = load i16* @_ZL4g_60, align 2
  %conv21 = zext i16 %12 to i32
  %cmp22 = icmp ule i32 %conv21, -9
  %conv23 = zext i1 %cmp22 to i32
  %13 = load i16* %l_405, align 2
  %conv24 = sext i16 %13 to i32
  %xor = xor i32 %conv23, %conv24
  %14 = load i32* %p_13.addr, align 4
  %call = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %xor, i32 %14)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.end20
  %15 = load i32* @_ZL4g_55, align 4
  %conv25 = trunc i32 %15 to i16
  store i16 %conv25, i16* @_ZL4g_56, align 2
  %tobool26 = icmp ne i16 %conv25, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.end20
  %16 = phi i1 [ false, %for.end20 ], [ %tobool26, %land.rhs ]
  %conv27 = zext i1 %16 to i32
  %call28 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext 2, i32 %conv27)
  %conv29 = zext i16 %call28 to i32
  store i32 %conv29, i32* %l_406, align 4
  %arrayidx30 = getelementptr inbounds [5 x i16]* %l_407, i32 0, i64 2
  %17 = load i16* %arrayidx30, align 2
  %tobool31 = icmp ne i16 %17, 0
  br i1 %tobool31, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  br label %for.end503

if.end:                                           ; preds = %land.end
  store i32 0, i32* %l_406, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc493, %if.end
  %18 = load i32* %l_406, align 4
  %cmp33 = icmp sge i32 %18, 18
  br i1 %cmp33, label %for.body34, label %for.end495

for.body34:                                       ; preds = %for.cond32
  store i32 -1218546878, i32* %l_417, align 4
  store i32 0, i32* %l_537, align 4
  store i32 231469658, i32* %l_568, align 4
  store i32 0, i32* %i35, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc41, %for.body34
  %19 = load i32* %i35, align 4
  %cmp37 = icmp slt i32 %19, 3
  br i1 %cmp37, label %for.body38, label %for.end43

for.body38:                                       ; preds = %for.cond36
  %20 = load i32* %i35, align 4
  %idxprom39 = sext i32 %20 to i64
  %arrayidx40 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 %idxprom39
  store i32 764313300, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %for.body38
  %21 = load i32* %i35, align 4
  %inc42 = add nsw i32 %21, 1
  store i32 %inc42, i32* %i35, align 4
  br label %for.cond36

for.end43:                                        ; preds = %for.cond36
  %22 = load i16* @_ZL5g_394, align 2
  %inc44 = add i16 %22, 1
  store i16 %inc44, i16* @_ZL5g_394, align 2
  %conv45 = zext i16 %22 to i32
  %cmp46 = icmp sgt i32 28973, %conv45
  br i1 %cmp46, label %if.then47, label %if.else393

if.then47:                                        ; preds = %for.end43
  store i16 30723, i16* %l_412, align 2
  store i32 1, i32* %l_440, align 4
  store i32 -1878280740, i32* %l_444, align 4
  store i32 1703761305, i32* %l_516, align 4
  %23 = load i32* %l_417, align 4
  %inc48 = add i32 %23, 1
  store i32 %inc48, i32* %l_417, align 4
  %24 = load i16* %l_420, align 2
  %conv49 = sext i16 %24 to i32
  %25 = load i32* %p_13.addr, align 4
  %call50 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 1881697234)
  %arrayidx51 = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 7
  store i32 %call50, i32* %arrayidx51, align 4
  store i32 1, i32* %p_14.addr, align 4
  store i32 1, i32* %l_440, align 4
  %26 = load i16* %l_412, align 2
  %tobool52 = icmp ne i16 %26, 0
  br i1 %tobool52, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then47
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then47
  %27 = phi i1 [ true, %if.then47 ], [ true, %lor.rhs ]
  %conv53 = zext i1 %27 to i32
  %28 = load i32* %p_15.addr, align 4
  %cmp54 = icmp sge i32 %conv53, %28
  %conv55 = zext i1 %cmp54 to i32
  %cmp56 = icmp uge i32 -1, %conv55
  %conv57 = zext i1 %cmp56 to i32
  %29 = load i32* %l_406, align 4
  %cmp58 = icmp eq i32 %conv57, %29
  %conv59 = zext i1 %cmp58 to i32
  %cmp60 = icmp slt i32 1, %conv59
  %conv61 = zext i1 %cmp60 to i32
  %arrayidx62 = getelementptr inbounds [5 x i16]* %l_407, i32 0, i64 2
  %30 = load i16* %arrayidx62, align 2
  %conv63 = zext i16 %30 to i32
  %cmp64 = icmp sle i32 %conv61, %conv63
  %conv65 = zext i1 %cmp64 to i32
  %xor66 = xor i32 1, %conv65
  %conv67 = trunc i32 %xor66 to i16
  %call68 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv67, i16 zeroext -29410)
  %tobool69 = icmp ne i16 %call68, 0
  br i1 %tobool69, label %land.rhs70, label %land.end72

land.rhs70:                                       ; preds = %lor.end
  %31 = load i32* %l_417, align 4
  %tobool71 = icmp ne i32 %31, 0
  br label %land.end72

land.end72:                                       ; preds = %land.rhs70, %lor.end
  %32 = phi i1 [ false, %lor.end ], [ %tobool71, %land.rhs70 ]
  %conv73 = zext i1 %32 to i32
  %cmp74 = icmp eq i32 %conv73, 1
  %conv75 = zext i1 %cmp74 to i32
  store i32 %conv75, i32* %l_444, align 4
  %conv76 = trunc i32 %conv75 to i16
  %33 = load i32* %l_417, align 4
  %conv77 = trunc i32 %33 to i16
  %call78 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv76, i16 signext %conv77)
  %conv79 = sext i16 %call78 to i32
  %34 = load i32* %p_13.addr, align 4
  %xor80 = xor i32 %conv79, %34
  %conv81 = trunc i32 %xor80 to i16
  %call82 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext -1, i16 zeroext %conv81)
  %conv83 = zext i16 %call82 to i32
  %cmp84 = icmp eq i32 -700806837, %conv83
  %conv85 = zext i1 %cmp84 to i32
  %neg = xor i32 %conv85, -1
  %conv86 = trunc i32 %neg to i16
  %call87 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv86, i16 zeroext -3)
  %conv88 = zext i16 %call87 to i32
  %cmp89 = icmp sgt i32 %call50, %conv88
  %conv90 = zext i1 %cmp89 to i32
  %35 = load i32* %p_13.addr, align 4
  %call91 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %conv90, i32 %35)
  %36 = load i32* @_ZL5g_396, align 4
  %call92 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %call91, i32 %36)
  %or = or i32 %25, %call92
  %conv93 = trunc i32 %or to i16
  %37 = load i32* %p_13.addr, align 4
  %conv94 = trunc i32 %37 to i16
  %call95 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv93, i16 signext %conv94)
  %38 = load i16* %l_405, align 2
  %call96 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call95, i16 signext %38)
  %conv97 = sext i16 %call96 to i32
  %cmp98 = icmp eq i32 %conv49, %conv97
  %conv99 = zext i1 %cmp98 to i32
  %39 = load i32* @_ZL4g_55, align 4
  %xor100 = xor i32 %39, %conv99
  store i32 %xor100, i32* @_ZL4g_55, align 4
  store i32 %xor100, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 4, i64 3), align 4
  %40 = load i32* %l_417, align 4
  %xor101 = xor i32 15380, %40
  %conv102 = trunc i32 %xor101 to i16
  %41 = load i32* %p_13.addr, align 4
  %tobool103 = icmp ne i32 %41, 0
  br i1 %tobool103, label %lor.end107, label %lor.rhs104

lor.rhs104:                                       ; preds = %land.end72
  %arrayidx105 = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 7
  %42 = load i32* %arrayidx105, align 4
  %tobool106 = icmp ne i32 %42, 0
  br label %lor.end107

lor.end107:                                       ; preds = %lor.rhs104, %land.end72
  %43 = phi i1 [ true, %land.end72 ], [ %tobool106, %lor.rhs104 ]
  %conv108 = zext i1 %43 to i32
  store i32 %conv108, i32* %l_414, align 4
  %44 = load i32* @_ZL5g_398, align 4
  %call109 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv108, i32 %44)
  %arrayidx110 = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 7
  store i32 %call109, i32* %arrayidx110, align 4
  %45 = load i32* @_ZL5g_166, align 4
  %call111 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %call109, i32 %45)
  %46 = load i32* %p_14.addr, align 4
  %cmp112 = icmp ne i32 %call111, %46
  %conv113 = zext i1 %cmp112 to i32
  %47 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 1), align 4
  %cmp114 = icmp eq i32 %conv113, %47
  %conv115 = zext i1 %cmp114 to i32
  %48 = load i16* @_ZL5g_394, align 2
  %conv116 = zext i16 %48 to i32
  %cmp117 = icmp sle i32 %conv115, %conv116
  %conv118 = zext i1 %cmp117 to i32
  %49 = load i32* %p_15.addr, align 4
  %cmp119 = icmp sgt i32 %conv118, %49
  %conv120 = zext i1 %cmp119 to i16
  %arrayidx121 = getelementptr inbounds [8 x i32]* %l_455, i32 0, i64 0
  %50 = load i32* %arrayidx121, align 4
  %call122 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv120, i32 %50)
  %tobool123 = icmp ne i16 %call122, 0
  br i1 %tobool123, label %land.rhs124, label %land.end125

land.rhs124:                                      ; preds = %lor.end107
  br label %land.end125

land.end125:                                      ; preds = %land.rhs124, %lor.end107
  %51 = phi i1 [ false, %lor.end107 ], [ false, %land.rhs124 ]
  %conv126 = zext i1 %51 to i32
  %or127 = or i32 %conv126, 65530
  %52 = load i32* @_ZL5g_166, align 4
  %cmp128 = icmp uge i32 %or127, %52
  %conv129 = zext i1 %cmp128 to i32
  %cmp130 = icmp sge i32 877573186, %conv129
  %conv131 = zext i1 %cmp130 to i32
  %or132 = or i32 -1003529729, %conv131
  %53 = load i32* %l_417, align 4
  %cmp133 = icmp ule i32 %or132, %53
  %conv134 = zext i1 %cmp133 to i32
  %cmp135 = icmp ugt i32 %conv134, -933050623
  %conv136 = zext i1 %cmp135 to i32
  %54 = load i16* %l_412, align 2
  %conv137 = sext i16 %54 to i32
  %cmp138 = icmp sle i32 %conv136, %conv137
  %conv139 = zext i1 %cmp138 to i32
  %arrayidx140 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  store i32 %conv139, i32* %arrayidx140, align 4
  %55 = load i32* %p_15.addr, align 4
  %or141 = or i32 %conv139, %55
  %call142 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext -4471, i32 %or141)
  %conv143 = zext i16 %call142 to i32
  %cmp144 = icmp sgt i32 %conv143, 50745
  %conv145 = zext i1 %cmp144 to i32
  %cmp146 = icmp sgt i32 58159, %conv145
  %conv147 = zext i1 %cmp146 to i32
  %56 = load i32* %p_15.addr, align 4
  %cmp148 = icmp slt i32 %conv147, %56
  %conv149 = zext i1 %cmp148 to i16
  %call150 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv102, i16 zeroext %conv149)
  %conv151 = zext i16 %call150 to i32
  %57 = load i16* @_ZL5g_394, align 2
  %conv152 = zext i16 %57 to i32
  %or153 = or i32 %conv151, %conv152
  %tobool154 = icmp ne i32 %or153, 0
  br i1 %tobool154, label %if.then155, label %if.else

if.then155:                                       ; preds = %land.end125
  store i32 0, i32* @_ZL4g_36, align 4
  br label %for.cond156

for.cond156:                                      ; preds = %for.inc237, %if.then155
  %58 = load i32* @_ZL4g_36, align 4
  %cmp157 = icmp ult i32 %58, 45
  br i1 %cmp157, label %for.body158, label %for.end239

for.body158:                                      ; preds = %for.cond156
  store i16 0, i16* %l_465, align 2
  store i32 -1616823460, i32* %l_487, align 4
  %59 = load i16* %l_465, align 2
  %dec = add i16 %59, -1
  store i16 %dec, i16* %l_465, align 2
  %conv159 = zext i16 %59 to i32
  %60 = load i32* %l_444, align 4
  %cmp160 = icmp sle i32 %conv159, %60
  %conv161 = zext i1 %cmp160 to i16
  %61 = load i16* @_ZL4g_56, align 2
  %conv162 = sext i16 %61 to i32
  %neg163 = xor i32 %conv162, -1
  %conv164 = trunc i32 %neg163 to i16
  %call165 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv161, i16 zeroext %conv164)
  %conv166 = zext i16 %call165 to i32
  %62 = load i16* @_ZL4g_60, align 2
  %conv167 = zext i16 %62 to i32
  %arrayidx168 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  %63 = load i32* %arrayidx168, align 4
  %arrayidx169 = getelementptr inbounds [5 x i16]* %l_407, i32 0, i64 2
  %64 = load i16* %arrayidx169, align 2
  %call170 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext 0, i32 15)
  %65 = load i32* @_ZL5g_166, align 4
  %66 = load i32* %l_417, align 4
  %conv171 = trunc i32 %66 to i16
  %67 = load i32* %p_15.addr, align 4
  %cmp172 = icmp sle i32 %67, 56212
  %conv173 = zext i1 %cmp172 to i32
  %cmp174 = icmp sle i32 %conv173, -1
  %conv175 = zext i1 %cmp174 to i32
  %68 = load i32* %p_15.addr, align 4
  %cmp176 = icmp ne i32 %conv175, %68
  %conv177 = zext i1 %cmp176 to i16
  %call178 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv177, i16 zeroext -3)
  %conv179 = zext i16 %call178 to i32
  %call180 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv179, i32 3)
  %69 = load i32* %l_487, align 4
  %cmp181 = icmp ne i32 %call180, %69
  %conv182 = zext i1 %cmp181 to i32
  %70 = load i16* %l_405, align 2
  %conv183 = sext i16 %70 to i32
  %cmp184 = icmp sgt i32 %conv182, %conv183
  %conv185 = zext i1 %cmp184 to i16
  %call186 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv185, i16 signext -1)
  %call187 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv171, i16 signext %call186)
  %conv188 = sext i16 %call187 to i32
  %call189 = call i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %65, i32 %conv188)
  %tobool190 = icmp ne i32 %call189, 0
  br i1 %tobool190, label %land.rhs191, label %land.end192

land.rhs191:                                      ; preds = %for.body158
  br label %land.end192

land.end192:                                      ; preds = %land.rhs191, %for.body158
  %71 = phi i1 [ false, %for.body158 ], [ true, %land.rhs191 ]
  %conv193 = zext i1 %71 to i16
  %call194 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %call170, i16 signext %conv193)
  %conv195 = sext i16 %call194 to i32
  %72 = load i32* %l_440, align 4
  %xor196 = xor i32 %72, %conv195
  store i32 %xor196, i32* %l_440, align 4
  %conv197 = trunc i32 %xor196 to i16
  %call198 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %64, i16 zeroext %conv197)
  %conv199 = zext i16 %call198 to i32
  %73 = load i32* %p_14.addr, align 4
  %cmp200 = icmp ne i32 %conv199, %73
  %conv201 = zext i1 %cmp200 to i32
  %74 = load i32* %l_488, align 4
  %cmp202 = icmp eq i32 %conv201, %74
  br i1 %cmp202, label %land.rhs203, label %land.end205

land.rhs203:                                      ; preds = %land.end192
  %75 = load i32* %p_13.addr, align 4
  %tobool204 = icmp ne i32 %75, 0
  br label %land.end205

land.end205:                                      ; preds = %land.rhs203, %land.end192
  %76 = phi i1 [ false, %land.end192 ], [ %tobool204, %land.rhs203 ]
  %conv206 = zext i1 %76 to i32
  %cmp207 = icmp ne i32 %conv206, 46489
  %conv208 = zext i1 %cmp207 to i32
  %cmp209 = icmp sge i32 %63, %conv208
  %conv210 = zext i1 %cmp209 to i32
  %77 = load i32* @_ZL5g_166, align 4
  %cmp211 = icmp sle i32 %conv210, %77
  %conv212 = zext i1 %cmp211 to i16
  store i16 %conv212, i16* @_ZL5g_394, align 2
  %conv213 = zext i16 %conv212 to i32
  store i32 %conv213, i32* @_ZL5g_489, align 4
  %cmp214 = icmp eq i32 %conv167, %conv213
  br i1 %cmp214, label %lor.end217, label %lor.rhs215

lor.rhs215:                                       ; preds = %land.end205
  %78 = load volatile i16* @_ZL5g_277, align 2
  %tobool216 = icmp ne i16 %78, 0
  br label %lor.end217

lor.end217:                                       ; preds = %lor.rhs215, %land.end205
  %79 = phi i1 [ true, %land.end205 ], [ %tobool216, %lor.rhs215 ]
  %conv218 = zext i1 %79 to i16
  %80 = load i32* %p_15.addr, align 4
  %conv219 = trunc i32 %80 to i16
  %call220 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv218, i16 zeroext %conv219)
  %conv221 = zext i16 %call220 to i32
  %cmp222 = icmp eq i32 %conv221, 2080583085
  %conv223 = zext i1 %cmp222 to i32
  %call224 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv166, i32 %conv223)
  %81 = load i32* @_ZL5g_396, align 4
  %or225 = or i32 %call224, %81
  %conv226 = trunc i32 %or225 to i16
  %82 = load i32* @_ZL4g_55, align 4
  %conv227 = trunc i32 %82 to i16
  %call228 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv226, i16 signext %conv227)
  %conv229 = sext i16 %call228 to i32
  %83 = load i32* %l_487, align 4
  %cmp230 = icmp eq i32 %conv229, %83
  %conv231 = zext i1 %cmp230 to i32
  %84 = load i16* %l_412, align 2
  %conv232 = sext i16 %84 to i32
  %cmp233 = icmp sge i32 %conv231, %conv232
  %conv234 = zext i1 %cmp233 to i32
  store i32 %conv234, i32* %l_487, align 4
  store i32 %conv234, i32* %p_14.addr, align 4
  %arrayidx235 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  %85 = load i32* %arrayidx235, align 4
  %conv236 = trunc i32 %85 to i16
  store i16 %conv236, i16* %retval
  br label %return

for.inc237:                                       ; No predecessors!
  %86 = load i32* @_ZL4g_36, align 4
  %call238 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %86, i32 2)
  store i32 %call238, i32* @_ZL4g_36, align 4
  br label %for.cond156

for.end239:                                       ; preds = %for.cond156
  br label %if.end392

if.else:                                          ; preds = %land.end125
  store i32 -1011792934, i32* %l_533, align 4
  store i32 6, i32* %l_550, align 4
  store i32 1341101113, i32* %l_552, align 4
  %87 = bitcast [2 x [1 x [4 x i32]]]* %l_554 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %87, i8* bitcast ([2 x [1 x [4 x i32]]]* @_ZZL7func_12jiiE5l_554 to i8*), i64 32, i32 16, i1 false)
  %88 = load i32* %p_14.addr, align 4
  %89 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 5, i64 3), align 4
  %90 = load i32* %p_14.addr, align 4
  %91 = load i32* %l_516, align 4
  %92 = load i32* @_ZL3g_2, align 4
  %conv242 = trunc i32 %92 to i16
  %93 = load i32* @_ZL4g_36, align 4
  %inc243 = add i32 %93, 1
  store i32 %inc243, i32* @_ZL4g_36, align 4
  %94 = load i32* %l_444, align 4
  %95 = load i32* %l_516, align 4
  %conv244 = trunc i32 %95 to i16
  %96 = load i32* %p_13.addr, align 4
  %conv245 = trunc i32 %96 to i16
  %call246 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv244, i16 signext %conv245)
  %conv247 = sext i16 %call246 to i32
  %cmp248 = icmp slt i32 %94, %conv247
  %conv249 = zext i1 %cmp248 to i32
  %97 = load i32* %p_14.addr, align 4
  %cmp250 = icmp sgt i32 %conv249, %97
  %conv251 = zext i1 %cmp250 to i32
  %98 = load i16* @_ZL4g_46, align 2
  %conv252 = sext i16 %98 to i32
  %cmp253 = icmp sle i32 %conv251, %conv252
  %conv254 = zext i1 %cmp253 to i32
  %99 = load i32* @_ZL3g_2, align 4
  %cmp255 = icmp ne i32 %conv254, %99
  %conv256 = zext i1 %cmp255 to i32
  %xor257 = xor i32 %93, %conv256
  %tobool258 = icmp ne i32 %xor257, 0
  br i1 %tobool258, label %land.rhs260, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %100 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 4, i64 4), align 4
  %tobool259 = icmp ne i32 %100, 0
  br i1 %tobool259, label %land.rhs260, label %land.end261

land.rhs260:                                      ; preds = %lor.lhs.false, %if.else
  br label %land.end261

land.end261:                                      ; preds = %land.rhs260, %lor.lhs.false
  %101 = phi i1 [ false, %lor.lhs.false ], [ true, %land.rhs260 ]
  %conv262 = zext i1 %101 to i32
  %cmp263 = icmp ne i32 %conv262, 1
  %conv264 = zext i1 %cmp263 to i16
  %call265 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv264, i32 15)
  %conv266 = zext i16 %call265 to i32
  %102 = load i32* @_ZL3g_2, align 4
  %call267 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv266, i32 %102)
  %conv268 = trunc i32 %call267 to i16
  %103 = load i32* %p_13.addr, align 4
  %call269 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv268, i32 %103)
  %conv270 = zext i16 %call269 to i32
  %104 = load i16* @_ZL4g_60, align 2
  %conv271 = zext i16 %104 to i32
  %cmp272 = icmp sge i32 %conv270, %conv271
  %conv273 = zext i1 %cmp272 to i16
  %call274 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv273, i32 13)
  %call275 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv242, i16 zeroext %call274)
  %call276 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %call275, i32 15)
  %conv277 = zext i16 %call276 to i32
  %105 = load i32* @_ZL5g_168, align 4
  %or278 = or i32 %conv277, %105
  %cmp279 = icmp ne i32 %or278, 56912
  %conv280 = zext i1 %cmp279 to i32
  %cmp281 = icmp eq i32 %91, %conv280
  %conv282 = zext i1 %cmp281 to i32
  store i32 %conv282, i32* %l_414, align 4
  %call283 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext -8, i32 %conv282)
  %conv284 = zext i16 %call283 to i32
  %106 = load i32* %p_14.addr, align 4
  %xor285 = xor i32 %conv284, %106
  %conv286 = trunc i32 %xor285 to i16
  %107 = load i32* %p_13.addr, align 4
  %call287 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv286, i32 %107)
  %conv288 = zext i16 %call287 to i32
  %108 = load i32* %p_13.addr, align 4
  %and = and i32 %conv288, %108
  %109 = load i32* %p_14.addr, align 4
  %cmp289 = icmp ult i32 %and, %109
  %conv290 = zext i1 %cmp289 to i32
  %arrayidx291 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 2
  store i32 %conv290, i32* %arrayidx291, align 4
  %conv292 = trunc i32 %conv290 to i16
  %110 = load i32* %l_533, align 4
  %conv293 = trunc i32 %110 to i16
  %call294 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv292, i16 zeroext %conv293)
  %conv295 = zext i16 %call294 to i32
  %111 = load i32* %p_14.addr, align 4
  %cmp296 = icmp sge i32 %conv295, %111
  %conv297 = zext i1 %cmp296 to i32
  %112 = load i32* @_ZL3g_2, align 4
  %cmp298 = icmp sge i32 %conv297, %112
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %l_533, align 4
  store i32 %conv299, i32* @_ZL4g_55, align 4
  %cmp300 = icmp ne i32 2032877630, %conv299
  %conv301 = zext i1 %cmp300 to i32
  %neg302 = xor i32 %conv301, -1
  %conv303 = trunc i32 %neg302 to i16
  %113 = load i32* %p_13.addr, align 4
  %conv304 = trunc i32 %113 to i16
  %call305 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv303, i16 zeroext %conv304)
  %conv306 = zext i16 %call305 to i32
  %call307 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %conv306, i32 0)
  %neg308 = xor i32 %call307, -1
  %xor309 = xor i32 %90, %neg308
  %conv310 = trunc i32 %xor309 to i16
  %call311 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv310, i32 0)
  %114 = load i16* @_ZL4g_56, align 2
  %call312 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call311, i16 signext %114)
  %conv313 = sext i16 %call312 to i32
  %cmp314 = icmp sgt i32 %89, %conv313
  %conv315 = zext i1 %cmp314 to i32
  %115 = load i16* %l_420, align 2
  %conv316 = sext i16 %115 to i32
  %call317 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv315, i32 %conv316)
  %116 = load i32* @_ZL5g_168, align 4
  %call318 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %call317, i32 %116)
  %conv319 = trunc i32 %call318 to i16
  %117 = load i16* @_ZL4g_56, align 2
  %call320 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv319, i16 signext %117)
  %conv321 = sext i16 %call320 to i32
  %118 = load i16* @_ZL4g_46, align 2
  %conv322 = sext i16 %118 to i32
  %call323 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv321, i32 %conv322)
  %conv324 = trunc i32 %call323 to i16
  %call325 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv324, i16 zeroext -13953)
  %conv326 = zext i16 %call325 to i32
  %and327 = and i32 %88, %conv326
  %tobool328 = icmp ne i32 %and327, 0
  br i1 %tobool328, label %if.then329, label %if.else389

if.then329:                                       ; preds = %land.end261
  store i32 1278155158, i32* %l_534, align 4
  %119 = bitcast [1 x [10 x [10 x i16]]]* %l_548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %119, i8* bitcast ([1 x [10 x [10 x i16]]]* @_ZZL7func_12jiiE5l_548 to i8*), i64 200, i32 16, i1 false)
  store i16 1, i16* %l_551, align 2
  store i32 0, i32* %i330, align 4
  br label %for.cond333

for.cond333:                                      ; preds = %for.inc338, %if.then329
  %120 = load i32* %i330, align 4
  %cmp334 = icmp slt i32 %120, 2
  br i1 %cmp334, label %for.body335, label %for.end340

for.body335:                                      ; preds = %for.cond333
  %121 = load i32* %i330, align 4
  %idxprom336 = sext i32 %121 to i64
  %arrayidx337 = getelementptr inbounds [2 x i32]* %l_549, i32 0, i64 %idxprom336
  store i32 1, i32* %arrayidx337, align 4
  br label %for.inc338

for.inc338:                                       ; preds = %for.body335
  %122 = load i32* %i330, align 4
  %inc339 = add nsw i32 %122, 1
  store i32 %inc339, i32* %i330, align 4
  br label %for.cond333

for.end340:                                       ; preds = %for.cond333
  %123 = load i32* %l_534, align 4
  %tobool341 = icmp ne i32 %123, 0
  %conv342 = zext i1 %tobool341 to i32
  %124 = load i32* %l_537, align 4
  %125 = load i32* @_ZL4g_48, align 4
  %cmp343 = icmp ugt i32 %124, %125
  %conv344 = zext i1 %cmp343 to i32
  %126 = load i16* @_ZL5g_394, align 2
  %inc345 = add i16 %126, 1
  store i16 %inc345, i16* @_ZL5g_394, align 2
  %conv346 = zext i16 %inc345 to i32
  %cmp347 = icmp uge i32 4, %conv346
  br i1 %cmp347, label %lor.end363, label %lor.rhs348

lor.rhs348:                                       ; preds = %for.end340
  %127 = load i32* @_ZL3g_2, align 4
  %128 = load i32* %p_15.addr, align 4
  %cmp349 = icmp slt i32 %127, %128
  br i1 %cmp349, label %land.lhs.true, label %land.end358

land.lhs.true:                                    ; preds = %lor.rhs348
  %129 = load i16* %l_405, align 2
  %tobool350 = icmp ne i16 %129, 0
  br i1 %tobool350, label %land.rhs351, label %land.end358

land.rhs351:                                      ; preds = %land.lhs.true
  %130 = load i32* %l_533, align 4
  %cmp352 = icmp ule i32 %130, 7
  %conv353 = zext i1 %cmp352 to i16
  %arrayidx354 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  %131 = load i32* %arrayidx354, align 4
  %call355 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv353, i32 %131)
  %conv356 = zext i16 %call355 to i32
  %132 = load i32* %l_440, align 4
  %cmp357 = icmp sle i32 %conv356, %132
  br label %land.end358

land.end358:                                      ; preds = %land.rhs351, %land.lhs.true, %lor.rhs348
  %133 = phi i1 [ false, %land.lhs.true ], [ false, %lor.rhs348 ], [ %cmp357, %land.rhs351 ]
  %conv359 = zext i1 %133 to i16
  %call360 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv359, i16 zeroext -12321)
  %conv361 = zext i16 %call360 to i32
  %134 = load i32* %l_534, align 4
  %cmp362 = icmp sle i32 %conv361, %134
  br label %lor.end363

lor.end363:                                       ; preds = %land.end358, %for.end340
  %135 = phi i1 [ true, %for.end340 ], [ %cmp362, %land.end358 ]
  %conv364 = zext i1 %135 to i16
  %arrayidx365 = getelementptr inbounds [1 x [10 x [10 x i16]]]* %l_548, i32 0, i64 0
  %arrayidx366 = getelementptr inbounds [10 x [10 x i16]]* %arrayidx365, i32 0, i64 1
  %arrayidx367 = getelementptr inbounds [10 x i16]* %arrayidx366, i32 0, i64 0
  %136 = load i16* %arrayidx367, align 2
  %call368 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv364, i16 zeroext %136)
  %137 = load i32* %p_13.addr, align 4
  %call369 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %call368, i32 %137)
  %conv370 = sext i16 %call369 to i32
  %138 = load i32* %p_13.addr, align 4
  %cmp371 = icmp ne i32 %conv370, %138
  %conv372 = zext i1 %cmp371 to i32
  %and373 = and i32 %conv344, %conv372
  %139 = load i32* %p_14.addr, align 4
  %cmp374 = icmp sgt i32 %and373, %139
  %conv375 = zext i1 %cmp374 to i16
  %140 = load i32* %p_13.addr, align 4
  %conv376 = trunc i32 %140 to i16
  %call377 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv375, i16 zeroext %conv376)
  %conv378 = zext i16 %call377 to i32
  %cmp379 = icmp sle i32 %conv378, 0
  %conv380 = zext i1 %cmp379 to i32
  %cmp381 = icmp sle i32 %conv342, %conv380
  %conv382 = zext i1 %cmp381 to i32
  %141 = load i32* @_ZL4g_55, align 4
  %xor383 = xor i32 %141, %conv382
  store i32 %xor383, i32* @_ZL4g_55, align 4
  %arrayidx384 = getelementptr inbounds [2 x [1 x [4 x i32]]]* %l_554, i32 0, i64 0
  %arrayidx385 = getelementptr inbounds [1 x [4 x i32]]* %arrayidx384, i32 0, i64 0
  %arrayidx386 = getelementptr inbounds [4 x i32]* %arrayidx385, i32 0, i64 0
  %142 = load i32* %arrayidx386, align 4
  %inc387 = add i32 %142, 1
  store i32 %inc387, i32* %arrayidx386, align 4
  %143 = load i32* @_ZL5g_396, align 4
  %conv388 = trunc i32 %143 to i16
  store i16 %conv388, i16* %retval
  br label %return

if.else389:                                       ; preds = %land.end261
  %144 = load i32* @_ZL3g_2, align 4
  store i32 %144, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %arrayidx390 = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 7
  %145 = load i32* %arrayidx390, align 4
  %conv391 = trunc i32 %145 to i16
  store i16 %conv391, i16* %retval
  br label %return

if.end392:                                        ; preds = %for.end239
  br label %if.end449

if.else393:                                       ; preds = %for.end43
  %146 = bitcast [3 x [4 x i32]]* %l_561 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %146, i8* bitcast ([3 x [4 x i32]]* @_ZZL7func_12jiiE5l_561 to i8*), i64 48, i32 16, i1 false)
  %arrayidx396 = getelementptr inbounds [3 x [4 x i32]]* %l_561, i32 0, i64 0
  %arrayidx397 = getelementptr inbounds [4 x i32]* %arrayidx396, i32 0, i64 1
  %147 = load i32* %arrayidx397, align 4
  %conv398 = trunc i32 %147 to i16
  %148 = load i32* %p_14.addr, align 4
  %149 = load i32* %p_15.addr, align 4
  %150 = load i16* @_ZL5g_394, align 2
  %conv399 = zext i16 %150 to i32
  %and400 = and i32 %conv399, 0
  %conv401 = trunc i32 %and400 to i16
  store i16 %conv401, i16* @_ZL5g_394, align 2
  %conv402 = zext i16 %conv401 to i32
  %cmp403 = icmp ne i32 %149, %conv402
  %conv404 = zext i1 %cmp403 to i32
  %cmp405 = icmp ne i32 %148, %conv404
  %conv406 = zext i1 %cmp405 to i32
  %151 = load i32* %p_15.addr, align 4
  %arrayidx407 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  %152 = load i32* %arrayidx407, align 4
  %arrayidx408 = getelementptr inbounds [3 x [4 x i32]]* %l_561, i32 0, i64 0
  %arrayidx409 = getelementptr inbounds [4 x i32]* %arrayidx408, i32 0, i64 1
  %153 = load i32* %arrayidx409, align 4
  %cmp410 = icmp uge i32 %152, %153
  %conv411 = zext i1 %cmp410 to i32
  %cmp412 = icmp sge i32 %151, %conv411
  %conv413 = zext i1 %cmp412 to i32
  %arrayidx414 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  store i32 %conv413, i32* %arrayidx414, align 4
  %cmp415 = icmp ne i32 %conv406, %conv413
  %conv416 = zext i1 %cmp415 to i32
  %arrayidx417 = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 6
  %154 = load i32* %arrayidx417, align 4
  %155 = load i32* %p_13.addr, align 4
  %cmp418 = icmp ne i32 %154, %155
  %conv419 = zext i1 %cmp418 to i32
  %arrayidx420 = getelementptr inbounds [3 x [4 x i32]]* %l_561, i32 0, i64 2
  %arrayidx421 = getelementptr inbounds [4 x i32]* %arrayidx420, i32 0, i64 2
  %156 = load i32* %arrayidx421, align 4
  %and422 = and i32 %conv419, %156
  %call423 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %and422, i32 312860369)
  %cmp424 = icmp slt i32 %call423, 46821
  %conv425 = zext i1 %cmp424 to i32
  %cmp426 = icmp ne i32 %conv416, %conv425
  %conv427 = zext i1 %cmp426 to i32
  %157 = load i32* %p_13.addr, align 4
  %call428 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv427, i32 %157)
  %conv429 = trunc i32 %call428 to i16
  %call430 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv429, i32 12)
  %tobool431 = icmp ne i16 %call430, 0
  br i1 %tobool431, label %lor.end433, label %lor.rhs432

lor.rhs432:                                       ; preds = %if.else393
  br label %lor.end433

lor.end433:                                       ; preds = %lor.rhs432, %if.else393
  %158 = phi i1 [ true, %if.else393 ], [ true, %lor.rhs432 ]
  %conv434 = zext i1 %158 to i32
  %159 = load i32* %l_568, align 4
  %xor435 = xor i32 %159, %conv434
  store i32 %xor435, i32* %l_568, align 4
  %call436 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv398, i32 %xor435)
  %tobool437 = icmp ne i16 %call436, 0
  br i1 %tobool437, label %lor.end441, label %lor.rhs438

lor.rhs438:                                       ; preds = %lor.end433
  %arrayidx439 = getelementptr inbounds [3 x i32]* %l_456, i32 0, i64 0
  %160 = load i32* %arrayidx439, align 4
  %tobool440 = icmp ne i32 %160, 0
  br label %lor.end441

lor.end441:                                       ; preds = %lor.rhs438, %lor.end433
  %161 = phi i1 [ true, %lor.end433 ], [ %tobool440, %lor.rhs438 ]
  %conv442 = zext i1 %161 to i32
  %call443 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 1766309995, i32 %conv442)
  %tobool444 = icmp ne i32 %call443, 0
  br i1 %tobool444, label %if.then445, label %if.else447

if.then445:                                       ; preds = %lor.end441
  %162 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 6, i64 2), align 4
  %conv446 = trunc i32 %162 to i16
  store i16 %conv446, i16* %retval
  br label %return

if.else447:                                       ; preds = %lor.end441
  %163 = load i32* %l_537, align 4
  %conv448 = trunc i32 %163 to i16
  store i16 %conv448, i16* %retval
  br label %return

if.end449:                                        ; preds = %if.end392
  %164 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 2), align 4
  %tobool450 = icmp ne i32 %164, 0
  br i1 %tobool450, label %if.then451, label %if.end452

if.then451:                                       ; preds = %if.end449
  br label %for.inc493

if.end452:                                        ; preds = %if.end449
  %165 = load i32* %p_14.addr, align 4
  store i32 %165, i32* @_ZL5g_396, align 4
  %166 = load i32* %p_14.addr, align 4
  %167 = load i32* @_ZL4g_33, align 4
  %cmp453 = icmp uge i32 -927794644, %167
  %conv454 = zext i1 %cmp453 to i32
  %168 = load i32* %p_14.addr, align 4
  %tobool455 = icmp ne i32 %168, 0
  br i1 %tobool455, label %lor.end457, label %lor.rhs456

lor.rhs456:                                       ; preds = %if.end452
  br label %lor.end457

lor.end457:                                       ; preds = %lor.rhs456, %if.end452
  %169 = phi i1 [ true, %if.end452 ], [ true, %lor.rhs456 ]
  %conv458 = zext i1 %169 to i32
  %arrayidx459 = getelementptr inbounds [8 x i32]* %l_415, i32 0, i64 6
  %170 = load i32* %arrayidx459, align 4
  %cmp460 = icmp ult i32 -1, %170
  %conv461 = zext i1 %cmp460 to i32
  %171 = load i32* %p_13.addr, align 4
  %cmp462 = icmp ne i32 %conv461, %171
  %conv463 = zext i1 %cmp462 to i32
  %172 = load i32* %l_488, align 4
  %xor464 = xor i32 %172, %conv463
  store i32 %xor464, i32* %l_488, align 4
  %conv465 = trunc i32 %xor464 to i16
  %173 = load i32* %l_568, align 4
  %conv466 = trunc i32 %173 to i16
  %call467 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %conv465, i16 zeroext %conv466)
  %conv468 = zext i16 %call467 to i32
  %174 = load i32* @_ZL5g_489, align 4
  %cmp469 = icmp sge i32 %conv468, %174
  %conv470 = zext i1 %cmp469 to i32
  %cmp471 = icmp sgt i32 %conv458, %conv470
  %conv472 = zext i1 %cmp471 to i32
  %cmp473 = icmp sgt i32 %conv472, 1748470924
  %conv474 = zext i1 %cmp473 to i32
  %cmp475 = icmp slt i32 %conv454, %conv474
  %conv476 = zext i1 %cmp475 to i32
  %or477 = or i32 %166, %conv476
  %cmp478 = icmp sgt i32 %or477, 0
  %conv479 = zext i1 %cmp478 to i32
  %and480 = and i32 %165, %conv479
  %call481 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %and480, i32 648237508)
  %175 = load i16* %l_405, align 2
  %conv482 = sext i16 %175 to i32
  %cmp483 = icmp ugt i32 %call481, %conv482
  %conv484 = zext i1 %cmp483 to i32
  %arrayidx485 = getelementptr inbounds [3 x i16]* %l_553, i32 0, i64 0
  %176 = load i16* %arrayidx485, align 2
  %conv486 = sext i16 %176 to i32
  %or487 = or i32 %conv484, %conv486
  %call488 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext -8, i32 %or487)
  %conv489 = zext i16 %call488 to i32
  store i32 %conv489, i32* %p_14.addr, align 4
  %177 = load i32* %l_417, align 4
  %cmp490 = icmp ugt i32 %conv489, %177
  %conv491 = zext i1 %cmp490 to i32
  %178 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %xor492 = xor i32 %178, %conv491
  store i32 %xor492, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  br label %for.inc493

for.inc493:                                       ; preds = %lor.end457, %if.then451
  %179 = load i32* %l_406, align 4
  %call494 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %179, i32 9)
  store i32 %call494, i32* %l_406, align 4
  br label %for.cond32

for.end495:                                       ; preds = %for.cond32
  %arrayidx496 = getelementptr inbounds [8 x i32]* %l_455, i32 0, i64 0
  %180 = load i32* %arrayidx496, align 4
  store i32 %180, i32* @_ZL5g_396, align 4
  %cmp497 = icmp ult i32 427448648, %180
  %conv498 = zext i1 %cmp497 to i32
  store i32 %conv498, i32* %p_14.addr, align 4
  br label %for.inc499

for.inc499:                                       ; preds = %for.end495
  %181 = load i16* @_ZL4g_46, align 2
  %conv500 = sext i16 %181 to i32
  %call501 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv500, i32 7)
  %conv502 = trunc i32 %call501 to i16
  store i16 %conv502, i16* @_ZL4g_46, align 2
  br label %for.cond1

for.end503:                                       ; preds = %if.then, %for.cond1
  %182 = load i16* %l_578, align 2
  %inc504 = add i16 %182, 1
  store i16 %inc504, i16* %l_578, align 2
  store i32 4, i32* %p_14.addr, align 4
  br label %for.cond505

for.cond505:                                      ; preds = %for.inc620, %for.end503
  %183 = load i32* %p_14.addr, align 4
  %cmp506 = icmp sge i32 %183, 0
  br i1 %cmp506, label %for.body507, label %for.end622

for.body507:                                      ; preds = %for.cond505
  store i16 27148, i16* %l_581, align 2
  store i32 1, i32* %l_583, align 4
  store i32 1, i32* %l_584, align 4
  store i32 0, i32* %i508, align 4
  br label %for.cond509

for.cond509:                                      ; preds = %for.inc514, %for.body507
  %184 = load i32* %i508, align 4
  %cmp510 = icmp slt i32 %184, 7
  br i1 %cmp510, label %for.body511, label %for.end516

for.body511:                                      ; preds = %for.cond509
  %185 = load i32* %i508, align 4
  %idxprom512 = sext i32 %185 to i64
  %arrayidx513 = getelementptr inbounds [7 x i32]* %l_582, i32 0, i64 %idxprom512
  store i32 667780537, i32* %arrayidx513, align 4
  br label %for.inc514

for.inc514:                                       ; preds = %for.body511
  %186 = load i32* %i508, align 4
  %inc515 = add nsw i32 %186, 1
  store i32 %inc515, i32* %i508, align 4
  br label %for.cond509

for.end516:                                       ; preds = %for.cond509
  %187 = load i32* %l_584, align 4
  %dec517 = add i32 %187, -1
  store i32 %dec517, i32* %l_584, align 4
  store i32 3, i32* %l_583, align 4
  br label %for.cond518

for.cond518:                                      ; preds = %for.inc617, %for.end516
  %188 = load i32* %l_583, align 4
  %cmp519 = icmp sge i32 %188, 1
  br i1 %cmp519, label %for.body520, label %for.end619

for.body520:                                      ; preds = %for.cond518
  store i32 4, i32* %l_488, align 4
  br label %for.cond523

for.cond523:                                      ; preds = %for.inc539, %for.body520
  %189 = load i32* %l_488, align 4
  %cmp524 = icmp sge i32 %189, 0
  br i1 %cmp524, label %for.body525, label %for.end540

for.body525:                                      ; preds = %for.cond523
  %190 = load i32* %p_14.addr, align 4
  %idxprom528 = sext i32 %190 to i64
  %191 = load i32* %l_488, align 4
  %idxprom529 = sext i32 %191 to i64
  %arrayidx530 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom529
  %arrayidx531 = getelementptr inbounds [5 x i32]* %arrayidx530, i32 0, i64 %idxprom528
  %192 = load i32* %arrayidx531, align 4
  %xor532 = xor i32 %192, -1
  store i32 %xor532, i32* %arrayidx531, align 4
  %193 = load i32* %l_583, align 4
  %add = add nsw i32 %193, 1
  %idxprom533 = sext i32 %add to i64
  %194 = load i32* %l_583, align 4
  %add534 = add nsw i32 %194, 4
  %idxprom535 = sext i32 %add534 to i64
  %arrayidx536 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom535
  %arrayidx537 = getelementptr inbounds [5 x i32]* %arrayidx536, i32 0, i64 %idxprom533
  %195 = load i32* %arrayidx537, align 4
  %conv538 = trunc i32 %195 to i16
  store i16 %conv538, i16* %retval
  br label %return

for.inc539:                                       ; No predecessors!
  %196 = load i32* %l_488, align 4
  %sub = sub nsw i32 %196, 1
  store i32 %sub, i32* %l_488, align 4
  br label %for.cond523

for.end540:                                       ; preds = %for.cond523
  %197 = load i32* %l_583, align 4
  %add541 = add nsw i32 %197, 1
  %idxprom542 = sext i32 %add541 to i64
  %198 = load i32* %l_583, align 4
  %add543 = add nsw i32 %198, 1
  %idxprom544 = sext i32 %add543 to i64
  %arrayidx545 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom544
  %arrayidx546 = getelementptr inbounds [5 x i32]* %arrayidx545, i32 0, i64 %idxprom542
  %199 = load i32* %arrayidx546, align 4
  %200 = load i32* %p_14.addr, align 4
  %idxprom547 = sext i32 %200 to i64
  %201 = load i32* %l_583, align 4
  %idxprom548 = sext i32 %201 to i64
  %arrayidx549 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom548
  %arrayidx550 = getelementptr inbounds [5 x i32]* %arrayidx549, i32 0, i64 %idxprom547
  %202 = load i32* %arrayidx550, align 4
  %arrayidx551 = getelementptr inbounds [7 x i32]* %l_582, i32 0, i64 6
  store i32 %202, i32* %arrayidx551, align 4
  %203 = load i32* %p_14.addr, align 4
  %idxprom552 = sext i32 %203 to i64
  %204 = load i32* %l_583, align 4
  %add553 = add nsw i32 %204, 1
  %idxprom554 = sext i32 %add553 to i64
  %arrayidx555 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom554
  %arrayidx556 = getelementptr inbounds [5 x i32]* %arrayidx555, i32 0, i64 %idxprom552
  %205 = load i32* %arrayidx556, align 4
  %tobool557 = icmp ne i32 %205, 0
  br i1 %tobool557, label %land.rhs558, label %land.end599

land.rhs558:                                      ; preds = %for.end540
  %206 = load i32* @_ZL5g_396, align 4
  %conv559 = trunc i32 %206 to i16
  %207 = load i32* %p_14.addr, align 4
  %idxprom560 = sext i32 %207 to i64
  %208 = load i32* %l_583, align 4
  %add561 = add nsw i32 %208, 1
  %idxprom562 = sext i32 %add561 to i64
  %arrayidx563 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom562
  %arrayidx564 = getelementptr inbounds [5 x i32]* %arrayidx563, i32 0, i64 %idxprom560
  %209 = load i32* %arrayidx564, align 4
  %or565 = or i32 3, %209
  %conv566 = trunc i32 %or565 to i16
  %210 = load i32* @_ZL5g_398, align 4
  %211 = load i32* %p_15.addr, align 4
  %call567 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %210, i32 %211)
  %conv568 = trunc i32 %call567 to i16
  store i16 %conv568, i16* @_ZL5g_394, align 2
  %conv569 = zext i16 %conv568 to i32
  %212 = load i16* %l_578, align 2
  %conv570 = zext i16 %212 to i32
  %cmp571 = icmp ne i32 %conv569, %conv570
  %conv572 = zext i1 %cmp571 to i16
  %213 = load volatile i32* getelementptr inbounds ([5 x [1 x [2 x i32]]]* @_ZL5g_577, i32 0, i64 4, i64 0, i64 0), align 4
  %conv573 = trunc i32 %213 to i16
  %call574 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv572, i16 signext %conv573)
  %conv575 = sext i16 %call574 to i32
  %214 = load i32* %l_583, align 4
  %add576 = add nsw i32 %214, 1
  %idxprom577 = sext i32 %add576 to i64
  %215 = load i32* %l_583, align 4
  %add578 = add nsw i32 %215, 1
  %idxprom579 = sext i32 %add578 to i64
  %arrayidx580 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom579
  %arrayidx581 = getelementptr inbounds [5 x i32]* %arrayidx580, i32 0, i64 %idxprom577
  %216 = load i32* %arrayidx581, align 4
  %cmp582 = icmp sle i32 %conv575, %216
  %conv583 = zext i1 %cmp582 to i32
  %cmp584 = icmp ugt i32 %conv583, -5
  %conv585 = zext i1 %cmp584 to i16
  %call586 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv566, i16 signext %conv585)
  %tobool587 = icmp ne i16 %call586, 0
  br i1 %tobool587, label %lor.end595, label %lor.rhs588

lor.rhs588:                                       ; preds = %land.rhs558
  %217 = load i32* %p_14.addr, align 4
  %idxprom589 = sext i32 %217 to i64
  %218 = load i32* %l_583, align 4
  %add590 = add nsw i32 %218, 1
  %idxprom591 = sext i32 %add590 to i64
  %arrayidx592 = getelementptr inbounds [10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 %idxprom591
  %arrayidx593 = getelementptr inbounds [5 x i32]* %arrayidx592, i32 0, i64 %idxprom589
  %219 = load i32* %arrayidx593, align 4
  %tobool594 = icmp ne i32 %219, 0
  br label %lor.end595

lor.end595:                                       ; preds = %lor.rhs588, %land.rhs558
  %220 = phi i1 [ true, %land.rhs558 ], [ %tobool594, %lor.rhs588 ]
  %conv596 = zext i1 %220 to i16
  %call597 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv559, i16 zeroext %conv596)
  %tobool598 = icmp ne i16 %call597, 0
  br label %land.end599

land.end599:                                      ; preds = %lor.end595, %for.end540
  %221 = phi i1 [ false, %for.end540 ], [ %tobool598, %lor.end595 ]
  %conv600 = zext i1 %221 to i32
  %222 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp601 = icmp sge i32 %conv600, %222
  %conv602 = zext i1 %cmp601 to i16
  store i16 %conv602, i16* @_ZL4g_56, align 2
  %conv603 = sext i16 %conv602 to i32
  %223 = load i32* %p_13.addr, align 4
  %xor604 = xor i32 %conv603, %223
  %conv605 = trunc i32 %xor604 to i16
  %call606 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv605, i16 zeroext -8)
  %conv607 = zext i16 %call606 to i32
  %224 = load i32* %l_602, align 4
  %cmp608 = icmp ne i32 %conv607, %224
  %conv609 = zext i1 %cmp608 to i32
  %arrayidx610 = getelementptr inbounds [7 x [5 x i32]]* %l_576, i32 0, i64 2
  %arrayidx611 = getelementptr inbounds [5 x i32]* %arrayidx610, i32 0, i64 0
  %225 = load i32* %arrayidx611, align 4
  %call612 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv609, i32 %225)
  %and613 = and i32 %202, %call612
  %and614 = and i32 %199, %and613
  %call615 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %and614, i32 -370404665)
  %call616 = call i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %call615)
  store i32 %call616, i32* @_ZL4g_55, align 4
  br label %for.inc617

for.inc617:                                       ; preds = %land.end599
  %226 = load i32* %l_583, align 4
  %sub618 = sub nsw i32 %226, 1
  store i32 %sub618, i32* %l_583, align 4
  br label %for.cond518

for.end619:                                       ; preds = %for.cond518
  br label %for.inc620

for.inc620:                                       ; preds = %for.end619
  %227 = load i32* %p_14.addr, align 4
  %sub621 = sub nsw i32 %227, 1
  store i32 %sub621, i32* %p_14.addr, align 4
  br label %for.cond505

for.end622:                                       ; preds = %for.cond505
  %228 = load i32* %l_406, align 4
  %conv623 = trunc i32 %228 to i16
  store i16 %conv623, i16* %retval
  br label %return

return:                                           ; preds = %for.end622, %for.body525, %if.else447, %if.then445, %if.else389, %lor.end363, %lor.end217
  %229 = load i16* %retval
  ret i16 %229
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL7func_16jtjj(i32 %p_17, i16 zeroext %p_18, i32 %p_19, i32 %p_20) #2 {
entry:
  %p_17.addr = alloca i32, align 4
  %p_18.addr = alloca i16, align 2
  %p_19.addr = alloca i32, align 4
  %p_20.addr = alloca i32, align 4
  %l_290 = alloca i32, align 4
  %l_300 = alloca i32, align 4
  %l_316 = alloca i32, align 4
  %l_317 = alloca i32, align 4
  %l_318 = alloca [7 x [3 x i32]], align 16
  %l_373 = alloca i16, align 2
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l_345 = alloca [2 x i16], align 2
  %l_346 = alloca [6 x [3 x [4 x i32]]], align 16
  %i102 = alloca i32, align 4
  %j103 = alloca i32, align 4
  %k = alloca i32, align 4
  %l_395 = alloca i16, align 2
  %l_397 = alloca i32, align 4
  store i32 %p_17, i32* %p_17.addr, align 4
  store i16 %p_18, i16* %p_18.addr, align 2
  store i32 %p_19, i32* %p_19.addr, align 4
  store i32 %p_20, i32* %p_20.addr, align 4
  store i32 0, i32* %l_290, align 4
  store i32 1, i32* %l_300, align 4
  store i32 1, i32* %l_316, align 4
  store i32 0, i32* %l_317, align 4
  store i16 0, i16* %l_373, align 2
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32* %i, align 4
  %idxprom4 = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [7 x [3 x i32]]* %l_318, i32 0, i64 %idxprom4
  %arrayidx5 = getelementptr inbounds [3 x i32]* %arrayidx, i32 0, i64 %idxprom
  store i32 -7, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %4 = load i32* %j, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %5 = load i32* %i, align 4
  %inc7 = add nsw i32 %5, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %6 = load i32* %l_290, align 4
  %7 = load i32* %p_17.addr, align 4
  store i32 %7, i32* %l_300, align 4
  %8 = load i32* %p_20.addr, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.end8
  %9 = load i32* %l_290, align 4
  %conv = trunc i32 %9 to i16
  %10 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %conv9 = trunc i32 %10 to i16
  %call = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv, i16 zeroext %conv9)
  %conv10 = zext i16 %call to i32
  %11 = load i32* @_ZL3g_2, align 4
  %cmp11 = icmp sge i32 %conv10, %11
  %conv12 = zext i1 %cmp11 to i16
  %call13 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %conv12, i32 8)
  %tobool14 = icmp ne i16 %call13, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.end8
  %12 = phi i1 [ true, %for.end8 ], [ %tobool14, %lor.rhs ]
  %conv15 = zext i1 %12 to i32
  %13 = load i16* @_ZL4g_46, align 2
  %conv16 = sext i16 %13 to i32
  %and = and i32 4, %conv16
  %cmp17 = icmp eq i32 %and, -5
  %conv18 = zext i1 %cmp17 to i32
  %14 = load i32* @_ZL5g_168, align 4
  %cmp19 = icmp ne i32 %conv18, %14
  %conv20 = zext i1 %cmp19 to i32
  %call21 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 -6, i32 %conv20)
  %cmp22 = icmp sgt i32 %call21, 0
  %conv23 = zext i1 %cmp22 to i16
  %15 = load i32* @_ZL4g_33, align 4
  %conv24 = trunc i32 %15 to i16
  %call25 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv23, i16 signext %conv24)
  %conv26 = sext i16 %call25 to i32
  %cmp27 = icmp slt i32 %conv15, %conv26
  %conv28 = zext i1 %cmp27 to i32
  %16 = load i32* %l_290, align 4
  %xor = xor i32 %conv28, %16
  %tobool29 = icmp ne i32 %xor, 0
  br i1 %tobool29, label %lor.end32, label %lor.rhs30

lor.rhs30:                                        ; preds = %lor.end
  %17 = load i32* %p_20.addr, align 4
  %tobool31 = icmp ne i32 %17, 0
  br label %lor.end32

lor.end32:                                        ; preds = %lor.rhs30, %lor.end
  %18 = phi i1 [ true, %lor.end ], [ %tobool31, %lor.rhs30 ]
  %conv33 = zext i1 %18 to i32
  %neg = xor i32 %conv33, -1
  %conv34 = trunc i32 %neg to i16
  %19 = load i32* %l_290, align 4
  %conv35 = trunc i32 %19 to i16
  %call36 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv34, i16 signext %conv35)
  %conv37 = sext i16 %call36 to i32
  %20 = load i32* %p_20.addr, align 4
  %cmp38 = icmp uge i32 %conv37, %20
  %conv39 = zext i1 %cmp38 to i16
  %21 = load i32* %p_20.addr, align 4
  %call40 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv39, i32 %21)
  %conv41 = zext i16 %call40 to i32
  %22 = load i32* %l_290, align 4
  %and42 = and i32 %conv41, %22
  %23 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp43 = icmp sge i32 %and42, %23
  %conv44 = zext i1 %cmp43 to i32
  store i32 %conv44, i32* %l_316, align 4
  br i1 %cmp43, label %lor.end47, label %lor.rhs45

lor.rhs45:                                        ; preds = %lor.end32
  %24 = load i32* %p_17.addr, align 4
  %tobool46 = icmp ne i32 %24, 0
  br label %lor.end47

lor.end47:                                        ; preds = %lor.rhs45, %lor.end32
  %25 = phi i1 [ true, %lor.end32 ], [ %tobool46, %lor.rhs45 ]
  %conv48 = zext i1 %25 to i32
  %26 = load i32* @_ZL4g_55, align 4
  %and49 = and i32 %conv48, %26
  %xor50 = xor i32 %7, %and49
  %xor51 = xor i32 %xor50, -1
  %27 = load i32* %l_290, align 4
  %xor52 = xor i32 %xor51, %27
  %28 = load i32* %l_290, align 4
  %xor53 = xor i32 %xor52, %28
  %29 = load i16* %p_18.addr, align 2
  %conv54 = zext i16 %29 to i32
  %cmp55 = icmp ult i32 %xor53, %conv54
  %conv56 = zext i1 %cmp55 to i16
  %30 = load i32* @_ZL3g_2, align 4
  %call57 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv56, i32 %30)
  %conv58 = sext i16 %call57 to i32
  %call59 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv58, i32 -641501883)
  %31 = load i32* %l_317, align 4
  %cmp60 = icmp ugt i32 %call59, %31
  %conv61 = zext i1 %cmp60 to i32
  %and62 = and i32 %conv61, 1
  %32 = load i32* %l_290, align 4
  %and63 = and i32 %and62, %32
  %33 = load i32* %l_290, align 4
  %call64 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %and63, i32 %33)
  %call65 = call i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %call64)
  %34 = load i32* @_ZL4g_33, align 4
  %call66 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %call65, i32 %34)
  %cmp67 = icmp eq i32 %call66, 1
  %conv68 = zext i1 %cmp67 to i32
  %35 = load i32* %l_290, align 4
  %cmp69 = icmp sle i32 %conv68, %35
  br i1 %cmp69, label %lor.end71, label %lor.rhs70

lor.rhs70:                                        ; preds = %lor.end47
  br label %lor.end71

lor.end71:                                        ; preds = %lor.rhs70, %lor.end47
  %36 = phi i1 [ true, %lor.end47 ], [ true, %lor.rhs70 ]
  %conv72 = zext i1 %36 to i32
  %or = or i32 %6, %conv72
  %conv73 = trunc i32 %or to i16
  %call74 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv73, i16 signext 25965)
  %call75 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %call74, i32 1)
  %conv76 = zext i16 %call75 to i32
  %37 = load volatile i16* @_ZL5g_277, align 2
  %conv77 = zext i16 %37 to i32
  %cmp78 = icmp sge i32 %conv76, %conv77
  %conv79 = zext i1 %cmp78 to i32
  %cmp80 = icmp ule i32 -99138619, %conv79
  %conv81 = zext i1 %cmp80 to i32
  %xor82 = xor i32 %conv81, -643998184
  %38 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 1, i64 1), align 4
  %cmp83 = icmp eq i32 %xor82, %38
  %conv84 = zext i1 %cmp83 to i32
  %39 = load i32* %l_317, align 4
  %call85 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv84, i32 %39)
  %40 = load i32* %l_317, align 4
  %cmp86 = icmp ult i32 %call85, %40
  %conv87 = zext i1 %cmp86 to i32
  %41 = load i32* %l_290, align 4
  %call88 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv87, i32 %41)
  %42 = load i32* %l_290, align 4
  %cmp89 = icmp ne i32 %call88, %42
  %conv90 = zext i1 %cmp89 to i16
  %43 = load i32* %l_290, align 4
  %conv91 = trunc i32 %43 to i16
  %call92 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv90, i16 signext %conv91)
  %conv93 = sext i16 %call92 to i32
  %44 = load i32* @_ZL5g_166, align 4
  %call94 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %conv93, i32 %44)
  store i32 %call94, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 9, i64 0), align 4
  %arrayidx95 = getelementptr inbounds [7 x [3 x i32]]* %l_318, i32 0, i64 3
  %arrayidx96 = getelementptr inbounds [3 x i32]* %arrayidx95, i32 0, i64 2
  %45 = load i32* %arrayidx96, align 4
  %xor97 = xor i32 %45, %call94
  store i32 %xor97, i32* %arrayidx96, align 4
  store i16 5, i16* @_ZL4g_56, align 2
  br label %for.cond98

for.cond98:                                       ; preds = %for.inc185, %lor.end71
  %46 = load i16* @_ZL4g_56, align 2
  %conv99 = sext i16 %46 to i32
  %cmp100 = icmp slt i32 %conv99, 21
  br i1 %cmp100, label %for.body101, label %for.end187

for.body101:                                      ; preds = %for.cond98
  %47 = bitcast [6 x [3 x [4 x i32]]]* %l_346 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* bitcast ([6 x [3 x [4 x i32]]]* @_ZZL7func_16jtjjE5l_346 to i8*), i64 288, i32 16, i1 false)
  store i32 0, i32* %i102, align 4
  br label %for.cond104

for.cond104:                                      ; preds = %for.inc109, %for.body101
  %48 = load i32* %i102, align 4
  %cmp105 = icmp slt i32 %48, 2
  br i1 %cmp105, label %for.body106, label %for.end111

for.body106:                                      ; preds = %for.cond104
  %49 = load i32* %i102, align 4
  %idxprom107 = sext i32 %49 to i64
  %arrayidx108 = getelementptr inbounds [2 x i16]* %l_345, i32 0, i64 %idxprom107
  store i16 14557, i16* %arrayidx108, align 2
  br label %for.inc109

for.inc109:                                       ; preds = %for.body106
  %50 = load i32* %i102, align 4
  %inc110 = add nsw i32 %50, 1
  store i32 %inc110, i32* %i102, align 4
  br label %for.cond104

for.end111:                                       ; preds = %for.cond104
  %51 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %52 = load i32* %p_19.addr, align 4
  %conv112 = trunc i32 %52 to i16
  %call113 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext 7, i32 15)
  %conv114 = zext i16 %call113 to i32
  %call115 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv112, i32 %conv114)
  %53 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %conv116 = trunc i32 %53 to i16
  %call117 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %call115, i16 zeroext %conv116)
  %conv118 = zext i16 %call117 to i32
  %cmp119 = icmp ne i32 %51, %conv118
  %conv120 = zext i1 %cmp119 to i32
  %call121 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext -8062, i32 14)
  %54 = load i32* %p_20.addr, align 4
  %tobool122 = icmp ne i32 %54, 0
  br i1 %tobool122, label %lor.end125, label %lor.rhs123

lor.rhs123:                                       ; preds = %for.end111
  %55 = load i32* @_ZL5g_166, align 4
  %tobool124 = icmp ne i32 %55, 0
  br label %lor.end125

lor.end125:                                       ; preds = %lor.rhs123, %for.end111
  %56 = phi i1 [ true, %for.end111 ], [ %tobool124, %lor.rhs123 ]
  %conv126 = zext i1 %56 to i32
  %57 = load i16* @_ZL4g_56, align 2
  %conv127 = sext i16 %57 to i32
  store i32 %conv127, i32* %l_316, align 4
  %arrayidx128 = getelementptr inbounds [7 x [3 x i32]]* %l_318, i32 0, i64 5
  %arrayidx129 = getelementptr inbounds [3 x i32]* %arrayidx128, i32 0, i64 2
  %58 = load i32* %arrayidx129, align 4
  %conv130 = trunc i32 %58 to i16
  %call131 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv130, i32 9)
  %conv132 = sext i16 %call131 to i32
  %and133 = and i32 %conv132, 42179
  %conv134 = trunc i32 %and133 to i16
  %call135 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv134, i32 4)
  %conv136 = zext i16 %call135 to i32
  store i32 %conv136, i32* %l_290, align 4
  %59 = load i32* %p_19.addr, align 4
  %cmp137 = icmp uge i32 %conv136, %59
  br i1 %cmp137, label %lor.end140, label %lor.rhs138

lor.rhs138:                                       ; preds = %lor.end125
  %60 = load i32* %p_19.addr, align 4
  %tobool139 = icmp ne i32 %60, 0
  br label %lor.end140

lor.end140:                                       ; preds = %lor.rhs138, %lor.end125
  %61 = phi i1 [ true, %lor.end125 ], [ %tobool139, %lor.rhs138 ]
  %conv141 = zext i1 %61 to i32
  %call142 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv141, i32 -1019708308)
  %conv143 = trunc i32 %call142 to i16
  %call144 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv143, i32 12)
  %conv145 = zext i16 %call144 to i32
  %arrayidx146 = getelementptr inbounds [2 x i16]* %l_345, i32 0, i64 0
  %62 = load i16* %arrayidx146, align 2
  %conv147 = zext i16 %62 to i32
  %cmp148 = icmp ne i32 %conv145, %conv147
  %conv149 = zext i1 %cmp148 to i32
  %63 = load i32* @_ZL3g_2, align 4
  %cmp150 = icmp slt i32 %conv149, %63
  %conv151 = zext i1 %cmp150 to i32
  %cmp152 = icmp sle i32 %conv151, 5
  %conv153 = zext i1 %cmp152 to i32
  store i32 %conv153, i32* @_ZL4g_36, align 4
  %64 = load i32* @_ZL4g_55, align 4
  %call154 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv153, i32 %64)
  %conv155 = trunc i32 %call154 to i16
  %call156 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv155, i32 10)
  %conv157 = sext i16 %call156 to i32
  %65 = load i16* %p_18.addr, align 2
  %conv158 = zext i16 %65 to i32
  %cmp159 = icmp ne i32 %conv157, %conv158
  br i1 %cmp159, label %lor.end163, label %lor.rhs160

lor.rhs160:                                       ; preds = %lor.end140
  %arrayidx161 = getelementptr inbounds [2 x i16]* %l_345, i32 0, i64 0
  %66 = load i16* %arrayidx161, align 2
  %tobool162 = icmp ne i16 %66, 0
  br label %lor.end163

lor.end163:                                       ; preds = %lor.rhs160, %lor.end140
  %67 = phi i1 [ true, %lor.end140 ], [ %tobool162, %lor.rhs160 ]
  %conv164 = zext i1 %67 to i16
  store i16 %conv164, i16* @_ZL4g_46, align 2
  %conv165 = sext i16 %conv164 to i32
  %cmp166 = icmp eq i32 %conv127, %conv165
  %conv167 = zext i1 %cmp166 to i32
  %or168 = or i32 %conv126, %conv167
  %conv169 = trunc i32 %or168 to i16
  %call170 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv169, i32 6)
  %tobool171 = icmp ne i16 %call170, 0
  br i1 %tobool171, label %lor.end175, label %lor.rhs172

lor.rhs172:                                       ; preds = %lor.end163
  %arrayidx173 = getelementptr inbounds [2 x i16]* %l_345, i32 0, i64 0
  %68 = load i16* %arrayidx173, align 2
  %tobool174 = icmp ne i16 %68, 0
  br label %lor.end175

lor.end175:                                       ; preds = %lor.rhs172, %lor.end163
  %69 = phi i1 [ true, %lor.end163 ], [ %tobool174, %lor.rhs172 ]
  %conv176 = zext i1 %69 to i16
  %call177 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %call121, i16 zeroext %conv176)
  %conv178 = zext i16 %call177 to i32
  %cmp179 = icmp slt i32 %conv120, %conv178
  %conv180 = zext i1 %cmp179 to i32
  %70 = load i32* @_ZL4g_48, align 4
  %xor181 = xor i32 %conv180, %70
  %arrayidx182 = getelementptr inbounds [6 x [3 x [4 x i32]]]* %l_346, i32 0, i64 2
  %arrayidx183 = getelementptr inbounds [3 x [4 x i32]]* %arrayidx182, i32 0, i64 1
  %arrayidx184 = getelementptr inbounds [4 x i32]* %arrayidx183, i32 0, i64 3
  store i32 %xor181, i32* %arrayidx184, align 4
  br label %for.inc185

for.inc185:                                       ; preds = %lor.end175
  %71 = load i16* @_ZL4g_56, align 2
  %inc186 = add i16 %71, 1
  store i16 %inc186, i16* @_ZL4g_56, align 2
  br label %for.cond98

for.end187:                                       ; preds = %for.cond98
  %72 = load i32* @_ZL5g_168, align 4
  %73 = load i32* %l_300, align 4
  %74 = load i32* %l_300, align 4
  %tobool188 = icmp ne i32 %74, 0
  br i1 %tobool188, label %lor.end235, label %lor.rhs189

lor.rhs189:                                       ; preds = %for.end187
  %75 = load i16* @_ZL4g_46, align 2
  %conv190 = sext i16 %75 to i32
  %76 = load i32* %p_17.addr, align 4
  %cmp191 = icmp uge i32 %conv190, %76
  %lnot = xor i1 %cmp191, true
  %conv192 = zext i1 %lnot to i32
  %77 = load i16* %p_18.addr, align 2
  %conv193 = zext i16 %77 to i32
  %or194 = or i32 %conv193, 31773
  %conv195 = trunc i32 %or194 to i16
  store i16 %conv195, i16* %p_18.addr, align 2
  %tobool196 = icmp ne i16 %conv195, 0
  %lnot197 = xor i1 %tobool196, true
  %conv198 = zext i1 %lnot197 to i32
  %arrayidx199 = getelementptr inbounds [7 x [3 x i32]]* %l_318, i32 0, i64 3
  %arrayidx200 = getelementptr inbounds [3 x i32]* %arrayidx199, i32 0, i64 1
  %78 = load i32* %arrayidx200, align 4
  %79 = load volatile i16* @_ZL5g_277, align 2
  %conv201 = zext i16 %79 to i32
  %80 = load i32* %l_316, align 4
  %call202 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv201, i32 %80)
  %81 = load i16* @_ZL4g_46, align 2
  %conv203 = sext i16 %81 to i32
  %cmp204 = icmp ne i32 %call202, %conv203
  %conv205 = zext i1 %cmp204 to i32
  %cmp206 = icmp sge i32 %78, %conv205
  %conv207 = zext i1 %cmp206 to i16
  %82 = load i32* %p_17.addr, align 4
  %conv208 = trunc i32 %82 to i16
  %call209 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv207, i16 signext %conv208)
  %conv210 = sext i16 %call209 to i32
  %and211 = and i32 %conv210, 5658
  %conv212 = trunc i32 %and211 to i16
  %83 = load i32* @_ZL5g_166, align 4
  %call213 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv212, i32 %83)
  %conv214 = zext i16 %call213 to i32
  %cmp215 = icmp ne i32 %conv214, 12802
  br i1 %cmp215, label %lor.end218, label %lor.rhs216

lor.rhs216:                                       ; preds = %lor.rhs189
  %84 = load i32* @_ZL4g_33, align 4
  %tobool217 = icmp ne i32 %84, 0
  br label %lor.end218

lor.end218:                                       ; preds = %lor.rhs216, %lor.rhs189
  %85 = phi i1 [ true, %lor.rhs189 ], [ %tobool217, %lor.rhs216 ]
  %conv219 = zext i1 %85 to i32
  %86 = load i16* %l_373, align 2
  %conv220 = sext i16 %86 to i32
  %cmp221 = icmp sle i32 %conv219, %conv220
  %conv222 = zext i1 %cmp221 to i32
  %and223 = and i32 %conv198, %conv222
  %conv224 = trunc i32 %and223 to i16
  %87 = load i32* %l_290, align 4
  %call225 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv224, i32 %87)
  %conv226 = zext i16 %call225 to i32
  %88 = load i32* %p_19.addr, align 4
  %cmp227 = icmp ugt i32 %conv226, %88
  %conv228 = zext i1 %cmp227 to i32
  %89 = load i32* %p_17.addr, align 4
  %cmp229 = icmp ule i32 %conv228, %89
  %conv230 = zext i1 %cmp229 to i32
  %xor231 = xor i32 %conv192, %conv230
  %90 = load i32* %l_316, align 4
  %cmp232 = icmp sle i32 %xor231, %90
  %conv233 = zext i1 %cmp232 to i32
  %cmp234 = icmp sge i32 %conv233, 51553
  br label %lor.end235

lor.end235:                                       ; preds = %lor.end218, %for.end187
  %91 = phi i1 [ true, %for.end187 ], [ %cmp234, %lor.end218 ]
  %conv236 = zext i1 %91 to i16
  %92 = load i16* @_ZL4g_60, align 2
  %call237 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv236, i16 signext %92)
  %conv238 = sext i16 %call237 to i32
  %call239 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %73, i32 %conv238)
  %cmp240 = icmp eq i32 %72, %call239
  %conv241 = zext i1 %cmp240 to i32
  %cmp242 = icmp sle i32 %conv241, 43837
  %conv243 = zext i1 %cmp242 to i16
  %93 = load i32* %p_19.addr, align 4
  %conv244 = trunc i32 %93 to i16
  %call245 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv243, i16 zeroext %conv244)
  %94 = load i32* %l_316, align 4
  %conv246 = trunc i32 %94 to i16
  %call247 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call245, i16 zeroext %conv246)
  %tobool248 = icmp ne i16 %call247, 0
  br i1 %tobool248, label %lor.end251, label %lor.rhs249

lor.rhs249:                                       ; preds = %lor.end235
  %95 = load i16* %p_18.addr, align 2
  %tobool250 = icmp ne i16 %95, 0
  br label %lor.end251

lor.end251:                                       ; preds = %lor.rhs249, %lor.end235
  %96 = phi i1 [ true, %lor.end235 ], [ %tobool250, %lor.rhs249 ]
  %conv252 = zext i1 %96 to i32
  %call253 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext 1, i32 %conv252)
  %call254 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call253, i16 signext 31439)
  %conv255 = sext i16 %call254 to i32
  store i32 %conv255, i32* %l_300, align 4
  store i32 27, i32* %l_290, align 4
  br label %for.cond256

for.cond256:                                      ; preds = %for.inc328, %lor.end251
  %97 = load i32* %l_290, align 4
  %cmp257 = icmp slt i32 %97, -21
  br i1 %cmp257, label %for.body258, label %for.end329

for.body258:                                      ; preds = %for.cond256
  store i16 -10, i16* %l_395, align 2
  store i32 -5, i32* %l_397, align 4
  %98 = load i16* @_ZL4g_60, align 2
  %conv259 = zext i16 %98 to i32
  %99 = load i32* %p_19.addr, align 4
  %arrayidx260 = getelementptr inbounds [7 x [3 x i32]]* %l_318, i32 0, i64 3
  %arrayidx261 = getelementptr inbounds [3 x i32]* %arrayidx260, i32 0, i64 2
  %100 = load i32* %arrayidx261, align 4
  %101 = load i16* @_ZL4g_46, align 2
  %102 = load volatile i16* @_ZL5g_277, align 2
  %conv262 = zext i16 %102 to i32
  %103 = load i16* @_ZL4g_60, align 2
  %conv263 = zext i16 %103 to i32
  %cmp264 = icmp eq i32 %conv262, %conv263
  %conv265 = zext i1 %cmp264 to i32
  %cmp266 = icmp uge i32 %conv265, 1
  %conv267 = zext i1 %cmp266 to i16
  %call268 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv267, i32 2)
  %conv269 = zext i16 %call268 to i32
  %104 = load i32* %l_317, align 4
  %105 = load i32* %l_290, align 4
  %xor270 = xor i32 %104, %105
  %106 = load i16* @_ZL4g_46, align 2
  %conv271 = sext i16 %106 to i32
  %cmp272 = icmp slt i32 %xor270, %conv271
  %conv273 = zext i1 %cmp272 to i32
  %and274 = and i32 %conv273, 16206
  %conv275 = trunc i32 %and274 to i16
  store i16 %conv275, i16* @_ZL5g_394, align 2
  %conv276 = zext i16 %conv275 to i32
  %107 = load i16* @_ZL4g_46, align 2
  %conv277 = sext i16 %107 to i32
  %cmp278 = icmp sge i32 %conv276, %conv277
  %conv279 = zext i1 %cmp278 to i32
  %108 = load i32* @_ZL4g_36, align 4
  %cmp280 = icmp ugt i32 %conv279, %108
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %l_316, align 4
  br i1 %cmp280, label %lor.end284, label %lor.rhs282

lor.rhs282:                                       ; preds = %for.body258
  %109 = load i32* @_ZL3g_2, align 4
  %tobool283 = icmp ne i32 %109, 0
  br label %lor.end284

lor.end284:                                       ; preds = %lor.rhs282, %for.body258
  %110 = phi i1 [ true, %for.body258 ], [ %tobool283, %lor.rhs282 ]
  %conv285 = zext i1 %110 to i32
  store i32 %conv285, i32* @_ZL4g_48, align 4
  %cmp286 = icmp slt i32 %conv269, %conv285
  %conv287 = zext i1 %cmp286 to i32
  %111 = load i16* %l_373, align 2
  %conv288 = sext i16 %111 to i32
  %cmp289 = icmp sgt i32 %conv287, %conv288
  %conv290 = zext i1 %cmp289 to i32
  %call291 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %101, i32 %conv290)
  %conv292 = zext i16 %call291 to i32
  %and293 = and i32 %100, %conv292
  %and294 = and i32 %and293, 1
  %conv295 = trunc i32 %and294 to i16
  %call296 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv295, i16 signext 16110)
  %call297 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %call296, i32 4)
  %conv298 = zext i16 %call297 to i32
  %cmp299 = icmp ult i32 %conv298, 1
  %conv300 = zext i1 %cmp299 to i32
  %cmp301 = icmp ne i32 %conv300, -8
  %conv302 = zext i1 %cmp301 to i32
  %call303 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %conv302, i32 -2)
  %conv304 = trunc i32 %call303 to i16
  %112 = load i32* %l_300, align 4
  %conv305 = trunc i32 %112 to i16
  %call306 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv304, i16 signext %conv305)
  %conv307 = sext i16 %call306 to i32
  %call308 = call i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 -2111437446, i32 %conv307)
  %conv309 = trunc i32 %call308 to i16
  %113 = load i16* %l_395, align 2
  %call310 = call signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %conv309, i16 signext %113)
  %conv311 = sext i16 %call310 to i32
  %114 = load i32* @_ZL4g_36, align 4
  %or312 = or i32 %conv311, %114
  %115 = load i16* %p_18.addr, align 2
  %conv313 = zext i16 %115 to i32
  %cmp314 = icmp ne i32 %or312, %conv313
  %conv315 = zext i1 %cmp314 to i32
  %cmp316 = icmp sle i32 %conv315, 1
  %conv317 = zext i1 %cmp316 to i32
  %cmp318 = icmp slt i32 %conv317, 1
  %conv319 = zext i1 %cmp318 to i32
  %116 = load i32* %l_300, align 4
  %cmp320 = icmp eq i32 %conv319, %116
  %conv321 = zext i1 %cmp320 to i32
  %117 = load i32* @_ZL5g_396, align 4
  %and322 = and i32 %117, %conv321
  store i32 %and322, i32* @_ZL5g_396, align 4
  %and323 = and i32 %99, %and322
  %cmp324 = icmp uge i32 %conv259, %and323
  %conv325 = zext i1 %cmp324 to i16
  %call326 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv325, i16 signext -121)
  %conv327 = sext i16 %call326 to i32
  store i32 %conv327, i32* %l_397, align 4
  br label %for.inc328

for.inc328:                                       ; preds = %lor.end284
  %118 = load i32* %l_290, align 4
  %dec = add nsw i32 %118, -1
  store i32 %dec, i32* %l_290, align 4
  br label %for.cond256

for.end329:                                       ; preds = %for.cond256
  %119 = load i16* @_ZL4g_46, align 2
  %conv330 = sext i16 %119 to i32
  ret i32 %conv330
}

; Function Attrs: uwtable
define internal i32 @_ZL7func_21tsj(i16 zeroext %p_22, i16 signext %p_23, i32 %p_24) #0 {
entry:
  %retval = alloca i32, align 4
  %p_22.addr = alloca i16, align 2
  %p_23.addr = alloca i16, align 2
  %p_24.addr = alloca i32, align 4
  %l_72 = alloca [6 x i16], align 2
  %l_137 = alloca i32, align 4
  %l_188 = alloca [7 x i32], align 16
  %l_213 = alloca i32, align 4
  %l_238 = alloca i32, align 4
  %l_239 = alloca i32, align 4
  %l_248 = alloca i16, align 2
  %l_274 = alloca [8 x i32], align 16
  %l_275 = alloca i32, align 4
  %i = alloca i32, align 4
  %l_136 = alloca i32, align 4
  %l_237 = alloca i32, align 4
  %l_240 = alloca i32, align 4
  %l_241 = alloca i16, align 2
  %l_181 = alloca i32, align 4
  %l_195 = alloca i32, align 4
  %l_200 = alloca i32, align 4
  %l_201 = alloca i32, align 4
  %l_246 = alloca i16, align 2
  %l_247 = alloca [1 x [2 x [3 x i32]]], align 16
  %l_276 = alloca [5 x [5 x [7 x i16]]], align 16
  %i184 = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i16 %p_22, i16* %p_22.addr, align 2
  store i16 %p_23, i16* %p_23.addr, align 2
  store i32 %p_24, i32* %p_24.addr, align 4
  %0 = bitcast [6 x i16]* %l_72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([6 x i16]* @_ZZL7func_21tsjE4l_72 to i8*), i64 12, i32 2, i1 false)
  store i32 9, i32* %l_137, align 4
  %1 = bitcast [7 x i32]* %l_188 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([7 x i32]* @_ZZL7func_21tsjE5l_188 to i8*), i64 28, i32 16, i1 false)
  store i32 -1, i32* %l_213, align 4
  store i32 424955625, i32* %l_238, align 4
  store i32 -1492857413, i32* %l_239, align 4
  store i16 21112, i16* %l_248, align 2
  %2 = bitcast [8 x i32]* %l_274 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([8 x i32]* @_ZZL7func_21tsjE5l_274 to i8*), i64 32, i32 16, i1 false)
  store i32 -133807918, i32* %l_275, align 4
  store i32 0, i32* @_ZL4g_48, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc178, %entry
  %3 = load i32* @_ZL4g_48, align 4
  %cmp = icmp eq i32 %3, 12
  br i1 %cmp, label %for.body, label %for.end180

for.body:                                         ; preds = %for.cond
  store i32 -1, i32* %l_136, align 4
  store i32 -6, i32* %l_237, align 4
  store i32 1176661267, i32* %l_240, align 4
  store i16 9, i16* %l_241, align 2
  %4 = load i16* %p_23.addr, align 2
  %conv = sext i16 %4 to i32
  %5 = load i16* @_ZL4g_46, align 2
  %conv1 = sext i16 %5 to i32
  %arrayidx = getelementptr inbounds [6 x i16]* %l_72, i32 0, i64 0
  %6 = load i16* %arrayidx, align 2
  %arrayidx2 = getelementptr inbounds [6 x i16]* %l_72, i32 0, i64 0
  %7 = load i16* %arrayidx2, align 2
  %conv3 = sext i16 %7 to i32
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %lor.end32, label %lor.rhs

lor.rhs:                                          ; preds = %for.body
  store i32 0, i32* @_ZL3g_2, align 4
  %8 = load i16* %p_22.addr, align 2
  %conv4 = zext i16 %8 to i32
  %conv5 = trunc i32 %conv4 to i16
  store i16 %conv5, i16* %p_22.addr, align 2
  %9 = load i16* %p_23.addr, align 2
  %conv6 = sext i16 %9 to i32
  %call = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv5, i32 %conv6)
  %tobool7 = icmp ne i16 %call, 0
  br i1 %tobool7, label %lor.end, label %lor.rhs8

lor.rhs8:                                         ; preds = %lor.rhs
  %10 = load i32* %p_24.addr, align 4
  %cmp9 = icmp ult i32 -1389197385, %10
  %conv10 = zext i1 %cmp9 to i32
  %11 = load i16* @_ZL4g_46, align 2
  %conv11 = sext i16 %11 to i32
  %or = or i32 %conv10, %conv11
  %12 = load i16* @_ZL4g_46, align 2
  %conv12 = sext i16 %12 to i32
  %cmp13 = icmp eq i32 %or, %conv12
  %conv14 = zext i1 %cmp13 to i32
  %neg = xor i32 %conv14, -1
  %call15 = call i32 @_ZL7func_80j(i32 %neg)
  %13 = load i32* %p_24.addr, align 4
  %xor = xor i32 %call15, %13
  %14 = load i16* @_ZL4g_56, align 2
  %conv16 = sext i16 %14 to i32
  %cmp17 = icmp ne i32 %xor, %conv16
  %conv18 = zext i1 %cmp17 to i16
  %call19 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %conv18)
  %conv20 = sext i16 %call19 to i32
  %15 = load i32* %l_136, align 4
  %cmp21 = icmp sle i32 %conv20, %15
  %conv22 = zext i1 %cmp21 to i32
  %cmp23 = icmp eq i32 %conv22, 49345
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs8, %lor.rhs
  %16 = phi i1 [ true, %lor.rhs ], [ %cmp23, %lor.rhs8 ]
  %conv24 = zext i1 %16 to i32
  %cmp25 = icmp ne i32 %conv24, 1
  %conv26 = zext i1 %cmp25 to i16
  %arrayidx27 = getelementptr inbounds [6 x i16]* %l_72, i32 0, i64 4
  %17 = load i16* %arrayidx27, align 2
  %call28 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %conv26, i16 zeroext %17)
  %conv29 = zext i16 %call28 to i32
  store i32 %conv29, i32* %l_137, align 4
  %or30 = or i32 -980640621, %conv29
  %tobool31 = icmp ne i32 %or30, 0
  br label %lor.end32

lor.end32:                                        ; preds = %lor.end, %for.body
  %18 = phi i1 [ true, %for.body ], [ %tobool31, %lor.end ]
  %conv33 = zext i1 %18 to i32
  %call34 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %6, i32 %conv33)
  %conv35 = sext i16 %call34 to i32
  %cmp36 = icmp slt i32 %conv1, %conv35
  %conv37 = zext i1 %cmp36 to i32
  %19 = load i32* %p_24.addr, align 4
  %cmp38 = icmp ugt i32 %conv37, %19
  %conv39 = zext i1 %cmp38 to i32
  %20 = load i16* @_ZL4g_60, align 2
  %conv40 = zext i16 %20 to i32
  %21 = load i16* @_ZL4g_46, align 2
  %conv41 = sext i16 %21 to i32
  %call42 = call zeroext i16 @_ZL7func_66jji(i32 %conv39, i32 %conv40, i32 %conv41)
  %conv43 = zext i16 %call42 to i32
  %or44 = or i32 %conv, %conv43
  %tobool45 = icmp ne i32 %or44, 0
  br i1 %tobool45, label %lor.end47, label %lor.rhs46

lor.rhs46:                                        ; preds = %lor.end32
  br label %lor.end47

lor.end47:                                        ; preds = %lor.rhs46, %lor.end32
  %22 = phi i1 [ true, %lor.end32 ], [ true, %lor.rhs46 ]
  %conv48 = zext i1 %22 to i32
  %23 = load i32* %l_136, align 4
  %cmp49 = icmp sge i32 %conv48, %23
  br i1 %cmp49, label %lor.end51, label %lor.rhs50

lor.rhs50:                                        ; preds = %lor.end47
  br label %lor.end51

lor.end51:                                        ; preds = %lor.rhs50, %lor.end47
  %24 = phi i1 [ true, %lor.end47 ], [ true, %lor.rhs50 ]
  %conv52 = zext i1 %24 to i32
  %cmp53 = icmp eq i32 %conv52, 10958
  %conv54 = zext i1 %cmp53 to i32
  store i32 %conv54, i32* %l_136, align 4
  store i32 0, i32* %p_24.addr, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc175, %lor.end51
  %25 = load i32* %p_24.addr, align 4
  %cmp56 = icmp ugt i32 %25, 12
  br i1 %cmp56, label %for.body57, label %for.end176

for.body57:                                       ; preds = %for.cond55
  store i32 100306645, i32* %l_181, align 4
  store i32 9, i32* %l_195, align 4
  %26 = load i16* %p_23.addr, align 2
  %27 = load i32* %p_24.addr, align 4
  store i32 %27, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 4), align 4
  %cmp58 = icmp eq i32 %27, -7
  %conv59 = zext i1 %cmp58 to i16
  %call60 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %26, i16 zeroext %conv59)
  %conv61 = zext i16 %call60 to i32
  %28 = load i32* %l_136, align 4
  %xor62 = xor i32 %28, %conv61
  store i32 %xor62, i32* %l_136, align 4
  %29 = load i16* %p_22.addr, align 2
  %tobool63 = icmp ne i16 %29, 0
  br i1 %tobool63, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body57
  %30 = load i16* @_ZL4g_46, align 2
  %conv64 = sext i16 %30 to i32
  %xor65 = xor i32 %conv64, 64127
  %conv66 = trunc i32 %xor65 to i16
  store i16 %conv66, i16* @_ZL4g_46, align 2
  %tobool67 = icmp ne i16 %conv66, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body57
  %31 = phi i1 [ false, %for.body57 ], [ %tobool67, %land.rhs ]
  %conv68 = zext i1 %31 to i16
  %call69 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv68, i32 7)
  %32 = load i32* %l_181, align 4
  %arrayidx70 = getelementptr inbounds [7 x i32]* %l_188, i32 0, i64 3
  %33 = load i32* %arrayidx70, align 4
  %34 = load i16* %p_22.addr, align 2
  %35 = load i32* %p_24.addr, align 4
  %call71 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %34, i32 %35)
  %conv72 = sext i16 %call71 to i32
  store i32 %conv72, i32* %l_195, align 4
  %conv73 = trunc i32 %conv72 to i16
  %arrayidx74 = getelementptr inbounds [7 x i32]* %l_188, i32 0, i64 0
  %36 = load i32* %arrayidx74, align 4
  %tobool75 = icmp ne i32 %36, 0
  br i1 %tobool75, label %lor.end80, label %lor.rhs76

lor.rhs76:                                        ; preds = %land.end
  %37 = load i16* %p_23.addr, align 2
  %conv77 = sext i16 %37 to i32
  %38 = load i32* @_ZL5g_168, align 4
  %or78 = or i32 %conv77, %38
  %tobool79 = icmp ne i32 %or78, 0
  br label %lor.end80

lor.end80:                                        ; preds = %lor.rhs76, %land.end
  %39 = phi i1 [ true, %land.end ], [ %tobool79, %lor.rhs76 ]
  %conv81 = zext i1 %39 to i32
  %40 = load i32* %l_136, align 4
  %call82 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv81, i32 %40)
  %cmp83 = icmp sge i32 %call82, 1
  %conv84 = zext i1 %cmp83 to i32
  %call85 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv73, i32 %conv84)
  %conv86 = sext i16 %call85 to i32
  %41 = load i32* %p_24.addr, align 4
  %cmp87 = icmp uge i32 %conv86, %41
  %conv88 = zext i1 %cmp87 to i16
  %call89 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %conv88, i32 6)
  %conv90 = zext i16 %call89 to i32
  %call91 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %33, i32 %conv90)
  %42 = load i16* %p_23.addr, align 2
  %conv92 = sext i16 %42 to i32
  %call93 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %call91, i32 %conv92)
  %conv94 = trunc i32 %call93 to i16
  %call95 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext 1, i16 zeroext %conv94)
  %conv96 = zext i16 %call95 to i32
  %call97 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %32, i32 %conv96)
  %call98 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %call69, i32 %call97)
  %conv99 = sext i16 %call98 to i32
  %43 = load i16* %p_23.addr, align 2
  %conv100 = sext i16 %43 to i32
  %cmp101 = icmp eq i32 %conv99, %conv100
  br i1 %cmp101, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end80
  %44 = load i16* @_ZL4g_46, align 2
  %conv102 = sext i16 %44 to i32
  store i32 %conv102, i32* %retval
  br label %return

if.else:                                          ; preds = %lor.end80
  store i32 1524714027, i32* %l_200, align 4
  store i32 -2, i32* %l_201, align 4
  %45 = load i16* %p_22.addr, align 2
  %conv103 = zext i16 %45 to i32
  %46 = load i32* %p_24.addr, align 4
  %conv104 = trunc i32 %46 to i16
  %arrayidx105 = getelementptr inbounds [7 x i32]* %l_188, i32 0, i64 5
  %47 = load i32* %arrayidx105, align 4
  %48 = load i32* @_ZL4g_55, align 4
  %cmp106 = icmp ugt i32 %47, %48
  %conv107 = zext i1 %cmp106 to i32
  %call108 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %conv104, i32 %conv107)
  %conv109 = zext i16 %call108 to i32
  %49 = load i32* %l_200, align 4
  %xor110 = xor i32 %49, %conv109
  store i32 %xor110, i32* %l_200, align 4
  %or111 = or i32 %conv103, %xor110
  store i32 %or111, i32* %l_201, align 4
  %50 = load i32* %p_24.addr, align 4
  %51 = load i32* %l_181, align 4
  %52 = load i16* %p_23.addr, align 2
  %conv112 = sext i16 %52 to i32
  %xor113 = xor i32 %51, %conv112
  %call114 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 7, i32 %xor113)
  %tobool115 = icmp ne i32 %call114, 0
  %lnot = xor i1 %tobool115, true
  %conv116 = zext i1 %lnot to i32
  %arrayidx117 = getelementptr inbounds [6 x i16]* %l_72, i32 0, i64 4
  %53 = load i16* %arrayidx117, align 2
  %conv118 = sext i16 %53 to i32
  %cmp119 = icmp sgt i32 %conv116, %conv118
  %conv120 = zext i1 %cmp119 to i32
  %cmp121 = icmp ule i32 %50, %conv120
  %conv122 = zext i1 %cmp121 to i32
  %54 = load i16* @_ZL4g_60, align 2
  %55 = load i16* @_ZL4g_60, align 2
  %conv123 = zext i16 %55 to i32
  %cmp124 = icmp ne i32 45119, %conv123
  %conv125 = zext i1 %cmp124 to i16
  %call126 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv125, i32 6)
  %conv127 = zext i16 %call126 to i32
  %56 = load i16* %p_23.addr, align 2
  %conv128 = sext i16 %56 to i32
  %cmp129 = icmp slt i32 43067, %conv128
  %conv130 = zext i1 %cmp129 to i32
  %or131 = or i32 %conv127, %conv130
  %conv132 = trunc i32 %or131 to i16
  store i16 %conv132, i16* @_ZL4g_46, align 2
  %57 = load i32* %l_200, align 4
  %conv133 = trunc i32 %57 to i16
  %call134 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv132, i16 signext %conv133)
  %call135 = call zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %54, i16 zeroext %call134)
  %conv136 = zext i16 %call135 to i32
  %58 = load i32* %p_24.addr, align 4
  %cmp137 = icmp ugt i32 %conv136, %58
  %conv138 = zext i1 %cmp137 to i16
  %59 = load i32* %l_213, align 4
  %call139 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv138, i32 %59)
  %conv140 = sext i16 %call139 to i32
  %and = and i32 %conv122, %conv140
  %60 = load i32* @_ZL4g_36, align 4
  %xor141 = xor i32 %and, %60
  %61 = load i32* %l_136, align 4
  %or142 = or i32 %61, %xor141
  store i32 %or142, i32* %l_136, align 4
  store i16 0, i16* @_ZL4g_60, align 2
  br label %for.cond143

for.cond143:                                      ; preds = %for.inc, %if.else
  %62 = load i16* @_ZL4g_60, align 2
  %conv144 = zext i16 %62 to i32
  %cmp145 = icmp sle i32 %conv144, 6
  br i1 %cmp145, label %for.body146, label %for.end

for.body146:                                      ; preds = %for.cond143
  %63 = load i32* @_ZL4g_33, align 4
  store i32 %63, i32* %retval
  br label %return

for.inc:                                          ; No predecessors!
  %64 = load i16* @_ZL4g_60, align 2
  %conv147 = zext i16 %64 to i32
  %add = add nsw i32 %conv147, 1
  %conv148 = trunc i32 %add to i16
  store i16 %conv148, i16* @_ZL4g_60, align 2
  br label %for.cond143

for.end:                                          ; preds = %for.cond143
  %arrayidx149 = getelementptr inbounds [6 x i16]* %l_72, i32 0, i64 0
  %65 = load i16* %arrayidx149, align 2
  %conv150 = sext i16 %65 to i32
  %66 = load i32* @_ZL4g_36, align 4
  %tobool151 = icmp ne i32 %66, 0
  br i1 %tobool151, label %land.rhs152, label %land.end154

land.rhs152:                                      ; preds = %for.end
  %67 = load i32* @_ZL5g_168, align 4
  %cmp153 = icmp ule i32 %67, 0
  br label %land.end154

land.end154:                                      ; preds = %land.rhs152, %for.end
  %68 = phi i1 [ false, %for.end ], [ %cmp153, %land.rhs152 ]
  %conv155 = zext i1 %68 to i32
  %69 = load i16* @_ZL4g_46, align 2
  %conv156 = sext i16 %69 to i32
  %xor157 = xor i32 %conv155, %conv156
  %conv158 = trunc i32 %xor157 to i16
  %call159 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv158, i16 signext -1)
  %conv160 = sext i16 %call159 to i32
  %call161 = call i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %conv160)
  %70 = load i32* %l_136, align 4
  %call162 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %call161, i32 %70)
  store i32 %call162, i32* %l_195, align 4
  %conv163 = trunc i32 %call162 to i16
  %71 = load i16* %p_23.addr, align 2
  %call164 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %conv163, i16 zeroext %71)
  %72 = load i32* @_ZL4g_48, align 4
  %conv165 = trunc i32 %72 to i16
  %call166 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call164, i16 signext %conv165)
  %conv167 = sext i16 %call166 to i32
  %73 = load i16* %p_23.addr, align 2
  %conv168 = sext i16 %73 to i32
  %call169 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv167, i32 %conv168)
  %cmp170 = icmp ugt i32 65529, %call169
  %conv171 = zext i1 %cmp170 to i32
  %neg172 = xor i32 %conv171, -1
  %cmp173 = icmp ne i32 %conv150, %neg172
  %conv174 = zext i1 %cmp173 to i32
  store i32 %conv174, i32* %l_136, align 4
  br label %if.end

if.end:                                           ; preds = %land.end154
  br label %for.inc175

for.inc175:                                       ; preds = %if.end
  %74 = load i32* %p_24.addr, align 4
  %inc = add i32 %74, 1
  store i32 %inc, i32* %p_24.addr, align 4
  br label %for.cond55

for.end176:                                       ; preds = %for.cond55
  store i32 0, i32* %l_213, align 4
  %75 = load i16* %l_241, align 2
  %inc177 = add i16 %75, 1
  store i16 %inc177, i16* %l_241, align 2
  br label %for.inc178

for.inc178:                                       ; preds = %for.end176
  %76 = load i32* @_ZL4g_48, align 4
  %inc179 = add nsw i32 %76, 1
  store i32 %inc179, i32* @_ZL4g_48, align 4
  br label %for.cond

for.end180:                                       ; preds = %for.cond
  store i32 0, i32* %p_24.addr, align 4
  br label %for.cond181

for.cond181:                                      ; preds = %for.inc263, %for.end180
  %77 = load i32* %p_24.addr, align 4
  %cmp182 = icmp uge i32 %77, 23
  br i1 %cmp182, label %for.body183, label %for.end265

for.body183:                                      ; preds = %for.cond181
  store i16 27326, i16* %l_246, align 2
  %78 = bitcast [1 x [2 x [3 x i32]]]* %l_247 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* bitcast ([1 x [2 x [3 x i32]]]* @_ZZL7func_21tsjE5l_247 to i8*), i64 24, i32 16, i1 false)
  %79 = bitcast [5 x [5 x [7 x i16]]]* %l_276 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* bitcast ([5 x [5 x [7 x i16]]]* @_ZZL7func_21tsjE5l_276 to i8*), i64 350, i32 16, i1 false)
  %80 = load i16* %l_246, align 2
  %conv185 = zext i16 %80 to i32
  store i32 %conv185, i32* @_ZL4g_36, align 4
  %81 = load i32* %l_239, align 4
  %cmp186 = icmp ult i32 %conv185, %81
  %conv187 = zext i1 %cmp186 to i32
  %arrayidx188 = getelementptr inbounds [1 x [2 x [3 x i32]]]* %l_247, i32 0, i64 0
  %arrayidx189 = getelementptr inbounds [2 x [3 x i32]]* %arrayidx188, i32 0, i64 1
  %arrayidx190 = getelementptr inbounds [3 x i32]* %arrayidx189, i32 0, i64 0
  store i32 %conv187, i32* %arrayidx190, align 4
  %82 = load i16* %l_248, align 2
  %inc191 = add i16 %82, 1
  store i16 %inc191, i16* %l_248, align 2
  %83 = load i16* %p_22.addr, align 2
  %dec = add i16 %83, -1
  store i16 %dec, i16* %p_22.addr, align 2
  %arrayidx192 = getelementptr inbounds [1 x [2 x [3 x i32]]]* %l_247, i32 0, i64 0
  %arrayidx193 = getelementptr inbounds [2 x [3 x i32]]* %arrayidx192, i32 0, i64 0
  %arrayidx194 = getelementptr inbounds [3 x i32]* %arrayidx193, i32 0, i64 1
  %84 = load i32* %arrayidx194, align 4
  %conv195 = trunc i32 %84 to i16
  %call196 = call zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %83, i16 zeroext %conv195)
  %conv197 = zext i16 %call196 to i32
  %cmp198 = icmp sle i32 %conv197, 57647
  %conv199 = zext i1 %cmp198 to i32
  %85 = load i32* %p_24.addr, align 4
  %86 = load i16* @_ZL4g_46, align 2
  store i16 %86, i16* %p_23.addr, align 2
  %conv200 = sext i16 %86 to i32
  store i32 %conv200, i32* %l_238, align 4
  %conv201 = trunc i32 %conv200 to i16
  %arrayidx202 = getelementptr inbounds [1 x [2 x [3 x i32]]]* %l_247, i32 0, i64 0
  %arrayidx203 = getelementptr inbounds [2 x [3 x i32]]* %arrayidx202, i32 0, i64 1
  %arrayidx204 = getelementptr inbounds [3 x i32]* %arrayidx203, i32 0, i64 0
  %87 = load i32* %arrayidx204, align 4
  %88 = load i32* %p_24.addr, align 4
  %89 = load i32* @_ZL4g_36, align 4
  %90 = load i32* %p_24.addr, align 4
  %arrayidx205 = getelementptr inbounds [1 x [2 x [3 x i32]]]* %l_247, i32 0, i64 0
  %arrayidx206 = getelementptr inbounds [2 x [3 x i32]]* %arrayidx205, i32 0, i64 1
  %arrayidx207 = getelementptr inbounds [3 x i32]* %arrayidx206, i32 0, i64 0
  %91 = load i32* %arrayidx207, align 4
  %cmp208 = icmp eq i32 %90, %91
  %conv209 = zext i1 %cmp208 to i32
  %92 = load i32* %p_24.addr, align 4
  %cmp210 = icmp ule i32 %conv209, %92
  %conv211 = zext i1 %cmp210 to i32
  %cmp212 = icmp ult i32 %89, %conv211
  %conv213 = zext i1 %cmp212 to i32
  %cmp214 = icmp ne i32 %88, %conv213
  %conv215 = zext i1 %cmp214 to i32
  %cmp216 = icmp sge i32 %conv215, 1
  br i1 %cmp216, label %lor.end218, label %lor.rhs217

lor.rhs217:                                       ; preds = %for.body183
  br label %lor.end218

lor.end218:                                       ; preds = %lor.rhs217, %for.body183
  %93 = phi i1 [ true, %for.body183 ], [ false, %lor.rhs217 ]
  %conv219 = zext i1 %93 to i16
  %94 = load i32* @_ZL5g_166, align 4
  %call220 = call zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %conv219, i32 %94)
  %call221 = call zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %call220, i16 zeroext -8)
  %conv222 = zext i16 %call221 to i32
  %95 = load i32* %p_24.addr, align 4
  %or223 = or i32 %conv222, %95
  %tobool224 = icmp ne i32 %or223, 0
  %lnot225 = xor i1 %tobool224, true
  %conv226 = zext i1 %lnot225 to i32
  %cmp227 = icmp sge i32 %87, %conv226
  %conv228 = zext i1 %cmp227 to i16
  %96 = load i16* @_ZL4g_60, align 2
  %call229 = call signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %conv228, i16 signext %96)
  %conv230 = sext i16 %call229 to i32
  %arrayidx231 = getelementptr inbounds [8 x i32]* %l_274, i32 0, i64 5
  %97 = load i32* %arrayidx231, align 4
  %cmp232 = icmp sgt i32 %conv230, %97
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %l_137, align 4
  %98 = load i32* %l_275, align 4
  %cmp234 = icmp ne i32 %conv233, %98
  br i1 %cmp234, label %lor.end240, label %lor.rhs235

lor.rhs235:                                       ; preds = %lor.end218
  %arrayidx236 = getelementptr inbounds [5 x [5 x [7 x i16]]]* %l_276, i32 0, i64 0
  %arrayidx237 = getelementptr inbounds [5 x [7 x i16]]* %arrayidx236, i32 0, i64 4
  %arrayidx238 = getelementptr inbounds [7 x i16]* %arrayidx237, i32 0, i64 6
  %99 = load i16* %arrayidx238, align 2
  %tobool239 = icmp ne i16 %99, 0
  br label %lor.end240

lor.end240:                                       ; preds = %lor.rhs235, %lor.end218
  %100 = phi i1 [ true, %lor.end218 ], [ %tobool239, %lor.rhs235 ]
  %conv241 = zext i1 %100 to i32
  %cmp242 = icmp sgt i32 %conv241, -1
  %conv243 = zext i1 %cmp242 to i32
  %call244 = call signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %conv201, i32 %conv243)
  %101 = load volatile i16* @_ZL5g_277, align 2
  %conv245 = zext i16 %101 to i32
  %call246 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %call244, i32 %conv245)
  %conv247 = zext i16 %call246 to i32
  %cmp248 = icmp ule i32 %85, %conv247
  %conv249 = zext i1 %cmp248 to i32
  %cmp250 = icmp ult i32 %conv249, 1
  %conv251 = zext i1 %cmp250 to i32
  %102 = load i32* %p_24.addr, align 4
  %cmp252 = icmp ule i32 %conv251, %102
  %conv253 = zext i1 %cmp252 to i32
  %cmp254 = icmp slt i32 %conv199, %conv253
  %conv255 = zext i1 %cmp254 to i32
  %103 = load i32* %p_24.addr, align 4
  %and256 = and i32 %conv255, %103
  %104 = load i32* %l_213, align 4
  %and257 = and i32 %104, %and256
  store i32 %and257, i32* %l_213, align 4
  %or258 = or i32 %and257, -1
  %call259 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %or258, i32 191780441)
  %call260 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 1, i32 %call259)
  %cmp261 = icmp ult i32 %call260, 1
  %conv262 = zext i1 %cmp261 to i32
  store i32 %conv262, i32* %l_239, align 4
  %105 = load i32* %l_213, align 4
  store i32 %105, i32* @_ZL3g_2, align 4
  br label %for.inc263

for.inc263:                                       ; preds = %lor.end240
  %106 = load i32* %p_24.addr, align 4
  %inc264 = add i32 %106, 1
  store i32 %inc264, i32* %p_24.addr, align 4
  br label %for.cond181

for.end265:                                       ; preds = %for.cond181
  %107 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  store i32 %107, i32* %retval
  br label %return

return:                                           ; preds = %for.end265, %for.body146, %if.then
  %108 = load i32* %retval
  ret i32 %108
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_utj(i16 zeroext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i32* %right.addr, align 4
  %cmp = icmp uge i32 %0, 32
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16* %left.addr, align 2
  %conv = zext i16 %1 to i32
  %2 = load i32* %right.addr, align 4
  %shr = ashr i32 65535, %2
  %cmp1 = icmp sgt i32 %conv, %shr
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %3 = load i16* %left.addr, align 2
  %conv2 = zext i16 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %4 = load i16* %left.addr, align 2
  %conv3 = zext i16 %4 to i32
  %5 = load i32* %right.addr, align 4
  %shl = shl i32 %conv3, %5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %shl, %cond.false ]
  %conv4 = trunc i32 %cond to i16
  ret i16 %conv4
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_utj(i16 zeroext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i32* %right.addr, align 4
  %cmp = icmp uge i32 %0, 32
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i16* %left.addr, align 2
  %conv = zext i16 %1 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i16* %left.addr, align 2
  %conv1 = zext i16 %2 to i32
  %3 = load i32* %right.addr, align 4
  %shr = ashr i32 %conv1, %3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %shr, %cond.false ]
  %conv2 = trunc i32 %cond to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL25safe_div_func_int32_t_s_sii(i32 %si1, i32 %si2) #2 {
entry:
  %si1.addr = alloca i32, align 4
  %si2.addr = alloca i32, align 4
  store i32 %si1, i32* %si1.addr, align 4
  store i32 %si2, i32* %si2.addr, align 4
  %0 = load i32* %si2.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %si1.addr, align 4
  %cmp1 = icmp eq i32 %1, -2147483648
  br i1 %cmp1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i32* %si2.addr, align 4
  %cmp2 = icmp eq i32 %2, -1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  %3 = load i32* %si1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i32* %si1.addr, align 4
  %5 = load i32* %si2.addr, align 4
  %div = sdiv i32 %4, %5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %div, %cond.false ]
  ret i32 %cond
}

; Function Attrs: uwtable
define internal i32 @_ZL7func_34t(i16 zeroext %p_35) #0 {
entry:
  %p_35.addr = alloca i16, align 2
  %l_45 = alloca i32, align 4
  %l_47 = alloca i32, align 4
  %l_50 = alloca i32, align 4
  store i16 %p_35, i16* %p_35.addr, align 2
  store i32 1, i32* %l_45, align 4
  store i32 -263197491, i32* %l_47, align 4
  store i32 -1, i32* %l_50, align 4
  %0 = load i16* %p_35.addr, align 2
  %conv = zext i16 %0 to i32
  %1 = load i32* %l_45, align 4
  %2 = load i32* @_ZL4g_36, align 4
  %conv1 = trunc i32 %2 to i16
  %3 = load i32* %l_45, align 4
  %4 = load i16* %p_35.addr, align 2
  %conv2 = zext i16 %4 to i32
  %call = call zeroext i16 @_ZL7func_39jjtii(i32 %conv, i32 %1, i16 zeroext %conv1, i32 %3, i32 %conv2)
  %5 = load i32* @_ZL3g_2, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load i16* %p_35.addr, align 2
  %conv3 = zext i16 %6 to i32
  %7 = load i32* @_ZL3g_2, align 4
  %conv4 = trunc i32 %7 to i16
  store i16 %conv4, i16* @_ZL4g_46, align 2
  %conv5 = sext i16 %conv4 to i32
  %8 = load i16* %p_35.addr, align 2
  %9 = load i32* %l_47, align 4
  %10 = load i32* @_ZL3g_2, align 4
  %call6 = call zeroext i16 @_ZL7func_39jjtii(i32 %conv3, i32 %conv5, i16 zeroext %8, i32 %9, i32 %10)
  %tobool7 = icmp ne i16 %call6, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %11 = phi i1 [ true, %entry ], [ %tobool7, %lor.rhs ]
  %conv8 = zext i1 %11 to i32
  %12 = load i16* %p_35.addr, align 2
  %conv9 = zext i16 %12 to i32
  %cmp = icmp eq i32 %conv8, %conv9
  %conv10 = zext i1 %cmp to i32
  store i32 %conv10, i32* @_ZL4g_48, align 4
  %13 = load i32* @_ZL4g_36, align 4
  %14 = load i32* @_ZL3g_2, align 4
  %conv11 = trunc i32 %14 to i16
  %15 = load i32* @_ZL4g_36, align 4
  %16 = load i32* %l_45, align 4
  %call12 = call zeroext i16 @_ZL7func_39jjtii(i32 %conv10, i32 %13, i16 zeroext %conv11, i32 %15, i32 %16)
  %call13 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %call, i16 zeroext %call12)
  %conv14 = zext i16 %call13 to i32
  store i32 %conv14, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  store i32 %conv14, i32* %l_50, align 4
  %17 = load i32* @_ZL4g_36, align 4
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL26safe_mod_func_uint16_t_u_utt(i16 zeroext %ui1, i16 zeroext %ui2) #2 {
entry:
  %ui1.addr = alloca i16, align 2
  %ui2.addr = alloca i16, align 2
  store i16 %ui1, i16* %ui1.addr, align 2
  store i16 %ui2, i16* %ui2.addr, align 2
  %0 = load i16* %ui2.addr, align 2
  %conv = zext i16 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i16* %ui1.addr, align 2
  %conv1 = zext i16 %1 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i16* %ui1.addr, align 2
  %conv2 = zext i16 %2 to i32
  %3 = load i16* %ui2.addr, align 2
  %conv3 = zext i16 %3 to i32
  %rem = srem i32 %conv2, %conv3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv1, %cond.true ], [ %rem, %cond.false ]
  %conv4 = trunc i32 %cond to i16
  ret i16 %conv4
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL26safe_div_func_uint16_t_u_utt(i16 zeroext %ui1, i16 zeroext %ui2) #2 {
entry:
  %ui1.addr = alloca i16, align 2
  %ui2.addr = alloca i16, align 2
  store i16 %ui1, i16* %ui1.addr, align 2
  store i16 %ui2, i16* %ui2.addr, align 2
  %0 = load i16* %ui2.addr, align 2
  %conv = zext i16 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i16* %ui1.addr, align 2
  %conv1 = zext i16 %1 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i16* %ui1.addr, align 2
  %conv2 = zext i16 %2 to i32
  %3 = load i16* %ui2.addr, align 2
  %conv3 = zext i16 %3 to i32
  %div = sdiv i32 %conv2, %conv3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv1, %cond.true ], [ %div, %cond.false ]
  %conv4 = trunc i32 %cond to i16
  ret i16 %conv4
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %ui1, i16 zeroext %ui2) #2 {
entry:
  %ui1.addr = alloca i16, align 2
  %ui2.addr = alloca i16, align 2
  store i16 %ui1, i16* %ui1.addr, align 2
  store i16 %ui2, i16* %ui2.addr, align 2
  %0 = load i16* %ui1.addr, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16* %ui2.addr, align 2
  %conv1 = zext i16 %1 to i32
  %sub = sub nsw i32 %conv, %conv1
  %conv2 = trunc i32 %sub to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL25safe_div_func_int16_t_s_sss(i16 signext %si1, i16 signext %si2) #2 {
entry:
  %si1.addr = alloca i16, align 2
  %si2.addr = alloca i16, align 2
  store i16 %si1, i16* %si1.addr, align 2
  store i16 %si2, i16* %si2.addr, align 2
  %0 = load i16* %si2.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16* %si1.addr, align 2
  %conv1 = sext i16 %1 to i32
  %cmp2 = icmp eq i32 %conv1, -32768
  br i1 %cmp2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i16* %si2.addr, align 2
  %conv3 = sext i16 %2 to i32
  %cmp4 = icmp eq i32 %conv3, -1
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  %3 = load i16* %si1.addr, align 2
  %conv5 = sext i16 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i16* %si1.addr, align 2
  %conv6 = sext i16 %4 to i32
  %5 = load i16* %si2.addr, align 2
  %conv7 = sext i16 %5 to i32
  %div = sdiv i32 %conv6, %conv7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %div, %cond.false ]
  %conv8 = trunc i32 %cond to i16
  ret i16 %conv8
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %si1, i16 signext %si2) #2 {
entry:
  %si1.addr = alloca i16, align 2
  %si2.addr = alloca i16, align 2
  store i16 %si1, i16* %si1.addr, align 2
  store i16 %si2, i16* %si2.addr, align 2
  %0 = load i16* %si1.addr, align 2
  %conv = sext i16 %0 to i32
  %1 = load i16* %si2.addr, align 2
  %conv1 = sext i16 %1 to i32
  %add = add nsw i32 %conv, %conv1
  %conv2 = trunc i32 %add to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %si1, i32 %si2) #2 {
entry:
  %si1.addr = alloca i32, align 4
  %si2.addr = alloca i32, align 4
  store i32 %si1, i32* %si1.addr, align 4
  store i32 %si2, i32* %si2.addr, align 4
  %0 = load i32* %si1.addr, align 4
  %1 = load i32* %si2.addr, align 4
  %xor = xor i32 %0, %1
  %2 = load i32* %si1.addr, align 4
  %3 = load i32* %si1.addr, align 4
  %4 = load i32* %si2.addr, align 4
  %xor1 = xor i32 %3, %4
  %and = and i32 %xor1, -2147483648
  %xor2 = xor i32 %2, %and
  %5 = load i32* %si2.addr, align 4
  %sub = sub nsw i32 %xor2, %5
  %6 = load i32* %si2.addr, align 4
  %xor3 = xor i32 %sub, %6
  %and4 = and i32 %xor, %xor3
  %cmp = icmp slt i32 %and4, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load i32* %si1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32* %si1.addr, align 4
  %9 = load i32* %si2.addr, align 4
  %sub5 = sub nsw i32 %8, %9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ %sub5, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL32safe_unary_minus_func_uint16_t_ut(i16 zeroext %ui) #2 {
entry:
  %ui.addr = alloca i16, align 2
  store i16 %ui, i16* %ui.addr, align 2
  %0 = load i16* %ui.addr, align 2
  %conv = zext i16 %0 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i16
  ret i16 %conv1
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %si1, i16 signext %si2) #2 {
entry:
  %si1.addr = alloca i16, align 2
  %si2.addr = alloca i16, align 2
  store i16 %si1, i16* %si1.addr, align 2
  store i16 %si2, i16* %si2.addr, align 2
  %0 = load i16* %si1.addr, align 2
  %conv = sext i16 %0 to i32
  %1 = load i16* %si2.addr, align 2
  %conv1 = sext i16 %1 to i32
  %sub = sub nsw i32 %conv, %conv1
  %conv2 = trunc i32 %sub to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL26safe_mod_func_uint32_t_u_ujj(i32 %ui1, i32 %ui2) #2 {
entry:
  %ui1.addr = alloca i32, align 4
  %ui2.addr = alloca i32, align 4
  store i32 %ui1, i32* %ui1.addr, align 4
  store i32 %ui2, i32* %ui2.addr, align 4
  %0 = load i32* %ui2.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32* %ui1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32* %ui1.addr, align 4
  %3 = load i32* %ui2.addr, align 4
  %rem = urem i32 %2, %3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %1, %cond.true ], [ %rem, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i32* %right.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %right.addr, align 4
  %cmp1 = icmp sge i32 %1, 32
  br i1 %cmp1, label %cond.true, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i16* %left.addr, align 2
  %conv = zext i16 %2 to i32
  %3 = load i32* %right.addr, align 4
  %shr = ashr i32 65535, %3
  %cmp3 = icmp sgt i32 %conv, %shr
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %4 = load i16* %left.addr, align 2
  %conv4 = zext i16 %4 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false2
  %5 = load i16* %left.addr, align 2
  %conv5 = zext i16 %5 to i32
  %6 = load i32* %right.addr, align 4
  %shl = shl i32 %conv5, %6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %shl, %cond.false ]
  %conv6 = trunc i32 %cond to i16
  ret i16 %conv6
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %ui1, i32 %ui2) #2 {
entry:
  %ui1.addr = alloca i32, align 4
  %ui2.addr = alloca i32, align 4
  store i32 %ui1, i32* %ui1.addr, align 4
  store i32 %ui2, i32* %ui2.addr, align 4
  %0 = load i32* %ui1.addr, align 4
  %1 = load i32* %ui2.addr, align 4
  %add = add i32 %0, %1
  ret i32 %add
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i16* %left.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp slt i32 %conv, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %right.addr, align 4
  %cmp1 = icmp uge i32 %1, 32
  br i1 %cmp1, label %cond.true, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i16* %left.addr, align 2
  %conv3 = sext i16 %2 to i32
  %3 = load i32* %right.addr, align 4
  %shr = ashr i32 32767, %3
  %cmp4 = icmp sgt i32 %conv3, %shr
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %4 = load i16* %left.addr, align 2
  %conv5 = sext i16 %4 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false2
  %5 = load i16* %left.addr, align 2
  %conv6 = sext i16 %5 to i32
  %6 = load i32* %right.addr, align 4
  %shl = shl i32 %conv6, %6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %shl, %cond.false ]
  %conv7 = trunc i32 %cond to i16
  ret i16 %conv7
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %ui1, i32 %ui2) #2 {
entry:
  %ui1.addr = alloca i32, align 4
  %ui2.addr = alloca i32, align 4
  store i32 %ui1, i32* %ui1.addr, align 4
  store i32 %ui2, i32* %ui2.addr, align 4
  %0 = load i32* %ui2.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32* %ui1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32* %ui1.addr, align 4
  %3 = load i32* %ui2.addr, align 4
  %div = udiv i32 %2, %3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %1, %cond.true ], [ %div, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL25safe_add_func_int32_t_s_sii(i32 %si1, i32 %si2) #2 {
entry:
  %si1.addr = alloca i32, align 4
  %si2.addr = alloca i32, align 4
  store i32 %si1, i32* %si1.addr, align 4
  store i32 %si2, i32* %si2.addr, align 4
  %0 = load i32* %si1.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32* %si2.addr, align 4
  %cmp1 = icmp sgt i32 %1, 0
  br i1 %cmp1, label %land.lhs.true2, label %lor.lhs.false

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32* %si1.addr, align 4
  %3 = load i32* %si2.addr, align 4
  %sub = sub nsw i32 2147483647, %3
  %cmp3 = icmp sgt i32 %2, %sub
  br i1 %cmp3, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %4 = load i32* %si1.addr, align 4
  %cmp4 = icmp slt i32 %4, 0
  br i1 %cmp4, label %land.lhs.true5, label %cond.false

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %5 = load i32* %si2.addr, align 4
  %cmp6 = icmp slt i32 %5, 0
  br i1 %cmp6, label %land.lhs.true7, label %cond.false

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %6 = load i32* %si1.addr, align 4
  %7 = load i32* %si2.addr, align 4
  %sub8 = sub nsw i32 -2147483648, %7
  %cmp9 = icmp slt i32 %6, %sub8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true7, %land.lhs.true2
  %8 = load i32* %si1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true7, %land.lhs.true5, %lor.lhs.false
  %9 = load i32* %si1.addr, align 4
  %10 = load i32* %si2.addr, align 4
  %add = add nsw i32 %9, %10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ %add, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %ui1, i16 zeroext %ui2) #2 {
entry:
  %ui1.addr = alloca i16, align 2
  %ui2.addr = alloca i16, align 2
  store i16 %ui1, i16* %ui1.addr, align 2
  store i16 %ui2, i16* %ui2.addr, align 2
  %0 = load i16* %ui1.addr, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16* %ui2.addr, align 2
  %conv1 = zext i16 %1 to i32
  %add = add nsw i32 %conv, %conv1
  %conv2 = trunc i32 %add to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL28safe_lshift_func_int16_t_s_ssi(i16 signext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i16* %left.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp slt i32 %conv, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %right.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %cond.true, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32* %right.addr, align 4
  %cmp3 = icmp sge i32 %2, 32
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %3 = load i16* %left.addr, align 2
  %conv5 = sext i16 %3 to i32
  %4 = load i32* %right.addr, align 4
  %shr = ashr i32 32767, %4
  %cmp6 = icmp sgt i32 %conv5, %shr
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %5 = load i16* %left.addr, align 2
  %conv7 = sext i16 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false4
  %6 = load i16* %left.addr, align 2
  %conv8 = sext i16 %6 to i32
  %7 = load i32* %right.addr, align 4
  %shl = shl i32 %conv8, %7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv7, %cond.true ], [ %shl, %cond.false ]
  %conv9 = trunc i32 %cond to i16
  ret i16 %conv9
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL28safe_rshift_func_int16_t_s_ssi(i16 signext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i16* %left.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp slt i32 %conv, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %right.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %cond.true, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32* %right.addr, align 4
  %cmp3 = icmp sge i32 %2, 32
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %3 = load i16* %left.addr, align 2
  %conv4 = sext i16 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false2
  %4 = load i16* %left.addr, align 2
  %conv5 = sext i16 %4 to i32
  %5 = load i32* %right.addr, align 4
  %shr = ashr i32 %conv5, %5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %shr, %cond.false ]
  %conv6 = trunc i32 %cond to i16
  ret i16 %conv6
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL26safe_mul_func_uint16_t_u_utt(i16 zeroext %ui1, i16 zeroext %ui2) #2 {
entry:
  %ui1.addr = alloca i16, align 2
  %ui2.addr = alloca i16, align 2
  store i16 %ui1, i16* %ui1.addr, align 2
  store i16 %ui2, i16* %ui2.addr, align 2
  %0 = load i16* %ui1.addr, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16* %ui2.addr, align 2
  %conv1 = zext i16 %1 to i32
  %mul = mul i32 %conv, %conv1
  %conv2 = trunc i32 %mul to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL25safe_mod_func_int16_t_s_sss(i16 signext %si1, i16 signext %si2) #2 {
entry:
  %si1.addr = alloca i16, align 2
  %si2.addr = alloca i16, align 2
  store i16 %si1, i16* %si1.addr, align 2
  store i16 %si2, i16* %si2.addr, align 2
  %0 = load i16* %si2.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16* %si1.addr, align 2
  %conv1 = sext i16 %1 to i32
  %cmp2 = icmp eq i32 %conv1, -32768
  br i1 %cmp2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i16* %si2.addr, align 2
  %conv3 = sext i16 %2 to i32
  %cmp4 = icmp eq i32 %conv3, -1
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  %3 = load i16* %si1.addr, align 2
  %conv5 = sext i16 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i16* %si1.addr, align 2
  %conv6 = sext i16 %4 to i32
  %5 = load i16* %si2.addr, align 2
  %conv7 = sext i16 %5 to i32
  %rem = srem i32 %conv6, %conv7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %rem, %cond.false ]
  %conv8 = trunc i32 %cond to i16
  ret i16 %conv8
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %si) #2 {
entry:
  %si.addr = alloca i16, align 2
  store i16 %si, i16* %si.addr, align 2
  %0 = load i16* %si.addr, align 2
  %conv = sext i16 %0 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i16
  ret i16 %conv1
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %si1, i16 signext %si2) #2 {
entry:
  %si1.addr = alloca i16, align 2
  %si2.addr = alloca i16, align 2
  store i16 %si1, i16* %si1.addr, align 2
  store i16 %si2, i16* %si2.addr, align 2
  %0 = load i16* %si1.addr, align 2
  %conv = sext i16 %0 to i32
  %1 = load i16* %si2.addr, align 2
  %conv1 = sext i16 %1 to i32
  %mul = mul nsw i32 %conv, %conv1
  %conv2 = trunc i32 %mul to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %ui1, i32 %ui2) #2 {
entry:
  %ui1.addr = alloca i32, align 4
  %ui2.addr = alloca i32, align 4
  store i32 %ui1, i32* %ui1.addr, align 4
  store i32 %ui2, i32* %ui2.addr, align 4
  %0 = load i32* %ui1.addr, align 4
  %1 = load i32* %ui2.addr, align 4
  %sub = sub i32 %0, %1
  ret i32 %sub
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i16* %left.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp slt i32 %conv, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %right.addr, align 4
  %cmp1 = icmp uge i32 %1, 32
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %2 = load i16* %left.addr, align 2
  %conv2 = sext i16 %2 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %3 = load i16* %left.addr, align 2
  %conv3 = sext i16 %3 to i32
  %4 = load i32* %right.addr, align 4
  %shr = ashr i32 %conv3, %4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %shr, %cond.false ]
  %conv4 = trunc i32 %cond to i16
  ret i16 %conv4
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %si1, i32 %si2) #2 {
entry:
  %si1.addr = alloca i32, align 4
  %si2.addr = alloca i32, align 4
  store i32 %si1, i32* %si1.addr, align 4
  store i32 %si2, i32* %si2.addr, align 4
  %0 = load i32* %si2.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %si1.addr, align 4
  %cmp1 = icmp eq i32 %1, -2147483648
  br i1 %cmp1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i32* %si2.addr, align 4
  %cmp2 = icmp eq i32 %2, -1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  %3 = load i32* %si1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i32* %si1.addr, align 4
  %5 = load i32* %si2.addr, align 4
  %rem = srem i32 %4, %5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %rem, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL29safe_rshift_func_uint16_t_u_sti(i16 zeroext %left, i32 %right) #2 {
entry:
  %left.addr = alloca i16, align 2
  %right.addr = alloca i32, align 4
  store i16 %left, i16* %left.addr, align 2
  store i32 %right, i32* %right.addr, align 4
  %0 = load i32* %right.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %right.addr, align 4
  %cmp1 = icmp sge i32 %1, 32
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %2 = load i16* %left.addr, align 2
  %conv = zext i16 %2 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %3 = load i16* %left.addr, align 2
  %conv2 = zext i16 %3 to i32
  %4 = load i32* %right.addr, align 4
  %shr = ashr i32 %conv2, %4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %shr, %cond.false ]
  %conv3 = trunc i32 %cond to i16
  ret i16 %conv3
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL26safe_mul_func_uint32_t_u_ujj(i32 %ui1, i32 %ui2) #2 {
entry:
  %ui1.addr = alloca i32, align 4
  %ui2.addr = alloca i32, align 4
  store i32 %ui1, i32* %ui1.addr, align 4
  store i32 %ui2, i32* %ui2.addr, align 4
  %0 = load i32* %ui1.addr, align 4
  %1 = load i32* %ui2.addr, align 4
  %mul = mul i32 %0, %1
  ret i32 %mul
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL32safe_unary_minus_func_uint32_t_uj(i32 %ui) #2 {
entry:
  %ui.addr = alloca i32, align 4
  store i32 %ui, i32* %ui.addr, align 4
  %0 = load i32* %ui.addr, align 4
  %sub = sub i32 0, %0
  ret i32 %sub
}

; Function Attrs: nounwind uwtable
define internal i32 @_ZL31safe_unary_minus_func_int32_t_si(i32 %si) #2 {
entry:
  %si.addr = alloca i32, align 4
  store i32 %si, i32* %si.addr, align 4
  %0 = load i32* %si.addr, align 4
  %cmp = icmp eq i32 %0, -2147483648
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32* %si.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32* %si.addr, align 4
  %sub = sub nsw i32 0, %2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %1, %cond.true ], [ %sub, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL7func_39jjtii(i32 %p_40, i32 %p_41, i16 zeroext %p_42, i32 %p_43, i32 %p_44) #2 {
entry:
  %p_40.addr = alloca i32, align 4
  %p_41.addr = alloca i32, align 4
  %p_42.addr = alloca i16, align 2
  %p_43.addr = alloca i32, align 4
  %p_44.addr = alloca i32, align 4
  store i32 %p_40, i32* %p_40.addr, align 4
  store i32 %p_41, i32* %p_41.addr, align 4
  store i16 %p_42, i16* %p_42.addr, align 2
  store i32 %p_43, i32* %p_43.addr, align 4
  store i32 %p_44, i32* %p_44.addr, align 4
  %0 = load i32* %p_40.addr, align 4
  %conv = trunc i32 %0 to i16
  ret i16 %conv
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @_ZL7func_66jji(i32 %p_67, i32 %p_68, i32 %p_69) #2 {
entry:
  %p_67.addr = alloca i32, align 4
  %p_68.addr = alloca i32, align 4
  %p_69.addr = alloca i32, align 4
  %l_155 = alloca i32, align 4
  %l_167 = alloca i32, align 4
  %l_169 = alloca i32, align 4
  %l_170 = alloca i32, align 4
  store i32 %p_67, i32* %p_67.addr, align 4
  store i32 %p_68, i32* %p_68.addr, align 4
  store i32 %p_69, i32* %p_69.addr, align 4
  store i32 0, i32* %l_155, align 4
  store i32 1130071020, i32* %l_167, align 4
  store i32 0, i32* %l_169, align 4
  store i32 -1215249687, i32* %l_170, align 4
  %0 = load i32* %p_67.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i32* %l_155, align 4
  %conv = trunc i32 %1 to i16
  %call = call signext i16 @_ZL28safe_rshift_func_int16_t_s_usj(i16 signext %conv, i32 15)
  %2 = load i32* @_ZL4g_36, align 4
  %call1 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %call, i32 %2)
  %conv2 = zext i16 %call1 to i32
  %3 = load i16* @_ZL4g_46, align 2
  %4 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 0, i64 4), align 4
  %5 = load i32* %l_155, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %lor.end15, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %6 = load i32* %l_155, align 4
  %conv4 = trunc i32 %6 to i16
  %7 = load i32* %p_68.addr, align 4
  %8 = load i32* @_ZL3g_2, align 4
  %9 = load i32* %p_69.addr, align 4
  %call5 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %8, i32 %9)
  %cmp = icmp ult i32 %call5, 65535
  br i1 %cmp, label %lor.end, label %lor.rhs6

lor.rhs6:                                         ; preds = %lor.rhs
  %10 = load i32* %p_69.addr, align 4
  %tobool7 = icmp ne i32 %10, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs6, %lor.rhs
  %11 = phi i1 [ true, %lor.rhs ], [ %tobool7, %lor.rhs6 ]
  %conv8 = zext i1 %11 to i32
  %cmp9 = icmp uge i32 %7, %conv8
  %conv10 = zext i1 %cmp9 to i32
  %12 = load i32* @_ZL3g_2, align 4
  %cmp11 = icmp sge i32 %conv10, %12
  %conv12 = zext i1 %cmp11 to i32
  %call13 = call signext i16 @_ZL28safe_lshift_func_int16_t_s_usj(i16 signext %conv4, i32 %conv12)
  %tobool14 = icmp ne i16 %call13, 0
  br label %lor.end15

lor.end15:                                        ; preds = %lor.end, %land.rhs
  %13 = phi i1 [ true, %land.rhs ], [ %tobool14, %lor.end ]
  %conv16 = zext i1 %13 to i32
  %cmp17 = icmp sgt i32 %4, %conv16
  %conv18 = zext i1 %cmp17 to i16
  %call19 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv18, i16 signext -31632)
  %conv20 = sext i16 %call19 to i32
  %14 = load i32* @_ZL4g_33, align 4
  %cmp21 = icmp ule i32 %conv20, %14
  %conv22 = zext i1 %cmp21 to i32
  store i32 %conv22, i32* @_ZL5g_166, align 4
  %15 = load i32* %l_155, align 4
  %cmp23 = icmp eq i32 %conv22, %15
  %conv24 = zext i1 %cmp23 to i32
  store i32 %conv24, i32* %l_167, align 4
  %16 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 3), align 4
  %cmp25 = icmp sle i32 %conv24, %16
  %conv26 = zext i1 %cmp25 to i32
  %17 = load i32* %p_69.addr, align 4
  %call27 = call i32 @_ZL25safe_mod_func_int32_t_s_sii(i32 %conv26, i32 %17)
  %conv28 = trunc i32 %call27 to i16
  store i16 %conv28, i16* @_ZL4g_56, align 2
  %conv29 = sext i16 %conv28 to i32
  %18 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %cmp30 = icmp sgt i32 %conv29, %18
  %conv31 = zext i1 %cmp30 to i16
  %call32 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %3, i16 signext %conv31)
  %conv33 = sext i16 %call32 to i32
  %19 = load i16* @_ZL4g_60, align 2
  %conv34 = zext i16 %19 to i32
  %cmp35 = icmp slt i32 %conv33, %conv34
  %conv36 = zext i1 %cmp35 to i32
  %cmp37 = icmp eq i32 %conv2, %conv36
  %conv38 = zext i1 %cmp37 to i32
  %20 = load i32* @_ZL5g_168, align 4
  %xor = xor i32 %20, %conv38
  store i32 %xor, i32* @_ZL5g_168, align 4
  %conv39 = trunc i32 %xor to i16
  %call40 = call zeroext i16 @_ZL26safe_sub_func_uint16_t_u_utt(i16 zeroext %conv39, i16 zeroext 4165)
  %call41 = call signext i16 @_ZL31safe_unary_minus_func_int16_t_ss(i16 signext %call40)
  %conv42 = sext i16 %call41 to i32
  %xor43 = xor i32 %conv42, 4
  %cmp44 = icmp ne i32 %xor43, -1
  %conv45 = zext i1 %cmp44 to i16
  store i16 %conv45, i16* @_ZL4g_46, align 2
  %21 = load i16* @_ZL4g_60, align 2
  %call46 = call signext i16 @_ZL25safe_sub_func_int16_t_s_sss(i16 signext %conv45, i16 signext %21)
  %tobool47 = icmp ne i16 %call46, 0
  br label %land.end

land.end:                                         ; preds = %lor.end15, %entry
  %22 = phi i1 [ false, %entry ], [ %tobool47, %lor.end15 ]
  %conv48 = zext i1 %22 to i32
  %xor49 = xor i32 %conv48, 1964675227
  store i32 %xor49, i32* %l_169, align 4
  %cmp50 = icmp sgt i32 %xor49, 792736544
  %conv51 = zext i1 %cmp50 to i16
  %23 = load i32* %l_155, align 4
  %call52 = call zeroext i16 @_ZL29safe_lshift_func_uint16_t_u_sti(i16 zeroext %conv51, i32 %23)
  %conv53 = zext i16 %call52 to i32
  %or = or i32 %conv53, 55536
  %conv54 = trunc i32 %or to i16
  %24 = load i32* %l_155, align 4
  %conv55 = trunc i32 %24 to i16
  %call56 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv54, i16 signext %conv55)
  %call57 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %call56, i16 signext -9)
  %conv58 = sext i16 %call57 to i32
  %25 = load i32* %l_155, align 4
  %cmp59 = icmp eq i32 %conv58, %25
  %conv60 = zext i1 %cmp59 to i32
  %26 = load i32* %p_67.addr, align 4
  %call61 = call i32 @_ZL26safe_div_func_uint32_t_u_ujj(i32 %conv60, i32 %26)
  store i32 %call61, i32* %l_170, align 4
  %27 = load i32* %l_155, align 4
  store i32 %27, i32* @_ZL3g_2, align 4
  %28 = load i32* %l_155, align 4
  %conv62 = trunc i32 %28 to i16
  ret i16 %conv62
}

; Function Attrs: uwtable
define internal i32 @_ZL7func_80j(i32 %p_81) #0 {
entry:
  %p_81.addr = alloca i32, align 4
  %l_85 = alloca [7 x [7 x i32]], align 16
  %l_107 = alloca i32, align 4
  %l_126 = alloca i32, align 4
  %l_127 = alloca [1 x i32], align 4
  %l_135 = alloca [10 x [10 x i16]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l_90 = alloca i16, align 2
  %l_132 = alloca i16, align 2
  %l_134 = alloca i32, align 4
  %l_133 = alloca i32, align 4
  store i32 %p_81, i32* %p_81.addr, align 4
  %0 = bitcast [7 x [7 x i32]]* %l_85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([7 x [7 x i32]]* @_ZZL7func_80jE4l_85 to i8*), i64 196, i32 16, i1 false)
  store i32 1721003822, i32* %l_107, align 4
  store i32 -1678207034, i32* %l_126, align 4
  %1 = bitcast [10 x [10 x i16]]* %l_135 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([10 x [10 x i16]]* @_ZZL7func_80jE5l_135 to i8*), i64 200, i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %cmp = icmp slt i32 %2, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [1 x i32]* %l_127, i32 0, i64 %idxprom
  store i32 6, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @_ZL4g_36, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc73, %for.end
  %5 = load i32* @_ZL4g_36, align 4
  %cmp2 = icmp ule i32 %5, 49
  br i1 %cmp2, label %for.body3, label %for.end75

for.body3:                                        ; preds = %for.cond1
  store i16 -5, i16* %l_90, align 2
  %arrayidx4 = getelementptr inbounds [7 x [7 x i32]]* %l_85, i32 0, i64 5
  %arrayidx5 = getelementptr inbounds [7 x i32]* %arrayidx4, i32 0, i64 0
  %6 = load i32* %arrayidx5, align 4
  %and = and i32 %6, 1
  store i32 %and, i32* %arrayidx5, align 4
  %7 = load i32* @_ZL4g_55, align 4
  %and6 = and i32 %7, %and
  store i32 %and6, i32* @_ZL4g_55, align 4
  %arrayidx7 = getelementptr inbounds [7 x [7 x i32]]* %l_85, i32 0, i64 6
  %arrayidx8 = getelementptr inbounds [7 x i32]* %arrayidx7, i32 0, i64 6
  %8 = load i32* %arrayidx8, align 4
  %9 = load i32* %p_81.addr, align 4
  %cmp9 = icmp uge i32 %8, %9
  %conv = zext i1 %cmp9 to i16
  %10 = load i16* %l_90, align 2
  %conv10 = zext i16 %10 to i32
  %call = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %conv10, i32 -1)
  %conv11 = trunc i32 %call to i16
  %call12 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv, i16 signext %conv11)
  %conv13 = sext i16 %call12 to i32
  %11 = load i32* %p_81.addr, align 4
  %12 = load i32* @_ZL3g_2, align 4
  %conv14 = trunc i32 %12 to i16
  %call15 = call i32 @_ZL25safe_add_func_int32_t_s_sii(i32 460785817, i32 -1)
  %13 = load i32* %p_81.addr, align 4
  %14 = load i32* @_ZL4g_48, align 4
  %15 = load i32* @_ZL4g_55, align 4
  %call16 = call signext i16 @_ZL7func_93ijj(i32 %13, i32 %14, i32 %15)
  %conv17 = sext i16 %call16 to i32
  %arrayidx18 = getelementptr inbounds [7 x [7 x i32]]* %l_85, i32 0, i64 5
  %arrayidx19 = getelementptr inbounds [7 x i32]* %arrayidx18, i32 0, i64 0
  %16 = load i32* %arrayidx19, align 4
  %cmp20 = icmp sle i32 %conv17, %16
  %conv21 = zext i1 %cmp20 to i32
  %call22 = call zeroext i16 @_ZL7func_39jjtii(i32 %conv13, i32 %11, i16 zeroext %conv14, i32 %call15, i32 %conv21)
  %conv23 = zext i16 %call22 to i32
  store i32 %conv23, i32* %l_107, align 4
  %17 = load i16* %l_90, align 2
  %conv24 = zext i16 %17 to i32
  %18 = load i32* %p_81.addr, align 4
  %19 = load i32* %p_81.addr, align 4
  %20 = load i16* %l_90, align 2
  %conv25 = zext i16 %20 to i32
  %21 = load i32* @_ZL4g_33, align 4
  %22 = load i32* @_ZL3g_2, align 4
  %23 = load i32* %l_107, align 4
  %and26 = and i32 %23, %22
  store i32 %and26, i32* %l_107, align 4
  %24 = load i32* %p_81.addr, align 4
  %25 = load i32* %p_81.addr, align 4
  %conv27 = trunc i32 %25 to i16
  %26 = load i16* %l_90, align 2
  %call28 = call signext i16 @_ZL25safe_mul_func_int16_t_s_sss(i16 signext %conv27, i16 signext %26)
  %conv29 = sext i16 %call28 to i32
  %arrayidx30 = getelementptr inbounds [7 x [7 x i32]]* %l_85, i32 0, i64 6
  %arrayidx31 = getelementptr inbounds [7 x i32]* %arrayidx30, i32 0, i64 2
  %27 = load i32* %arrayidx31, align 4
  %cmp32 = icmp sle i32 %conv29, %27
  br i1 %cmp32, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.body3
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.body3
  %28 = phi i1 [ true, %for.body3 ], [ true, %lor.rhs ]
  %conv33 = zext i1 %28 to i32
  %cmp34 = icmp eq i32 %conv33, 2
  %conv35 = zext i1 %cmp34 to i32
  %call36 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %24, i32 %conv35)
  %cmp37 = icmp ne i32 %and26, %call36
  %conv38 = zext i1 %cmp37 to i16
  %29 = load i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 8, i64 2), align 4
  %conv39 = trunc i32 %29 to i16
  %call40 = call signext i16 @_ZL25safe_add_func_int16_t_s_sss(i16 signext %conv38, i16 signext %conv39)
  %conv41 = sext i16 %call40 to i32
  %and42 = and i32 %21, %conv41
  %call43 = call i32 @_ZL26safe_add_func_uint32_t_u_ujj(i32 %and42, i32 1712687236)
  %conv44 = trunc i32 %call43 to i16
  %call45 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext %conv44, i16 zeroext -9)
  %conv46 = zext i16 %call45 to i32
  %call47 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %conv25, i32 %conv46)
  %30 = load i32* @_ZL4g_33, align 4
  %call48 = call i32 @_ZL26safe_sub_func_uint32_t_u_ujj(i32 %call47, i32 %30)
  %conv49 = trunc i32 %call48 to i16
  %call50 = call zeroext i16 @_ZL26safe_add_func_uint16_t_u_utt(i16 zeroext 32033, i16 zeroext %conv49)
  %conv51 = zext i16 %call50 to i32
  %arrayidx52 = getelementptr inbounds [7 x [7 x i32]]* %l_85, i32 0, i64 0
  %arrayidx53 = getelementptr inbounds [7 x i32]* %arrayidx52, i32 0, i64 0
  %31 = load i32* %arrayidx53, align 4
  %cmp54 = icmp ne i32 %conv51, %31
  %conv55 = zext i1 %cmp54 to i32
  %cmp56 = icmp ule i32 %19, %conv55
  %conv57 = zext i1 %cmp56 to i32
  %32 = load i32* %l_126, align 4
  %xor = xor i32 %32, %conv57
  store i32 %xor, i32* %l_126, align 4
  %cmp58 = icmp eq i32 %18, %xor
  br i1 %cmp58, label %lor.end60, label %lor.rhs59

lor.rhs59:                                        ; preds = %lor.end
  br label %lor.end60

lor.end60:                                        ; preds = %lor.rhs59, %lor.end
  %33 = phi i1 [ true, %lor.end ], [ true, %lor.rhs59 ]
  %conv61 = zext i1 %33 to i32
  %34 = load i32* @_ZL4g_36, align 4
  %cmp62 = icmp ult i32 %conv61, %34
  %conv63 = zext i1 %cmp62 to i32
  %cmp64 = icmp eq i32 %conv24, %conv63
  %conv65 = zext i1 %cmp64 to i32
  %35 = load i32* %p_81.addr, align 4
  %cmp66 = icmp eq i32 %conv65, %35
  %conv67 = zext i1 %cmp66 to i32
  %cmp68 = icmp sgt i32 %conv67, -9
  %conv69 = zext i1 %cmp68 to i32
  %cmp70 = icmp ule i32 %conv69, -562837612
  %conv71 = zext i1 %cmp70 to i32
  %arrayidx72 = getelementptr inbounds [1 x i32]* %l_127, i32 0, i64 0
  %36 = load i32* %arrayidx72, align 4
  %or = or i32 %36, %conv71
  store i32 %or, i32* %arrayidx72, align 4
  %37 = load i32* %p_81.addr, align 4
  %tobool = icmp ne i32 %37, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end60
  br label %for.end75

if.end:                                           ; preds = %lor.end60
  br label %for.inc73

for.inc73:                                        ; preds = %if.end
  %38 = load i32* @_ZL4g_36, align 4
  %inc74 = add i32 %38, 1
  store i32 %inc74, i32* @_ZL4g_36, align 4
  br label %for.cond1

for.end75:                                        ; preds = %if.then, %for.cond1
  store i32 22, i32* @_ZL3g_2, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc98, %for.end75
  %39 = load i32* @_ZL3g_2, align 4
  %cmp77 = icmp eq i32 %39, 3
  br i1 %cmp77, label %for.body78, label %for.end99

for.body78:                                       ; preds = %for.cond76
  store i16 23764, i16* %l_132, align 2
  store i32 1, i32* %l_134, align 4
  store i32 13, i32* @_ZL4g_55, align 4
  br label %for.cond79

for.cond79:                                       ; preds = %for.inc87, %for.body78
  %40 = load i32* @_ZL4g_55, align 4
  %cmp80 = icmp sgt i32 %40, -17
  br i1 %cmp80, label %for.body81, label %for.end89

for.body81:                                       ; preds = %for.cond79
  store i32 3, i32* %l_133, align 4
  %41 = load i16* %l_132, align 2
  %conv82 = sext i16 %41 to i32
  %42 = load i32* %l_133, align 4
  %or83 = or i32 %42, %conv82
  store i32 %or83, i32* %l_133, align 4
  %43 = load i32* %p_81.addr, align 4
  %44 = load i32* %l_126, align 4
  store i32 %44, i32* %l_126, align 4
  %tobool84 = icmp ne i32 %44, 0
  %conv85 = zext i1 %tobool84 to i32
  %and86 = and i32 %43, %conv85
  store i32 %and86, i32* %l_134, align 4
  %45 = load i32* @_ZL4g_36, align 4
  store i32 %45, i32* getelementptr inbounds ([10 x [5 x i32]]* @_ZL4g_49, i32 0, i64 2, i64 2), align 4
  br label %for.inc87

for.inc87:                                        ; preds = %for.body81
  %46 = load i32* @_ZL4g_55, align 4
  %call88 = call i32 @_ZL25safe_sub_func_int32_t_s_sii(i32 %46, i32 6)
  store i32 %call88, i32* @_ZL4g_55, align 4
  br label %for.cond79

for.end89:                                        ; preds = %for.cond79
  %47 = load i32* %p_81.addr, align 4
  %tobool90 = icmp ne i32 %47, 0
  br i1 %tobool90, label %if.then91, label %if.end92

if.then91:                                        ; preds = %for.end89
  br label %for.end99

if.end92:                                         ; preds = %for.end89
  %arrayidx93 = getelementptr inbounds [10 x [10 x i16]]* %l_135, i32 0, i64 0
  %arrayidx94 = getelementptr inbounds [10 x i16]* %arrayidx93, i32 0, i64 6
  %48 = load i16* %arrayidx94, align 2
  %conv95 = zext i16 %48 to i32
  %and96 = and i32 %conv95, -1305595767
  %conv97 = trunc i32 %and96 to i16
  store i16 %conv97, i16* %arrayidx94, align 2
  br label %for.inc98

for.inc98:                                        ; preds = %if.end92
  %49 = load i32* @_ZL3g_2, align 4
  %dec = add nsw i32 %49, -1
  store i32 %dec, i32* @_ZL3g_2, align 4
  br label %for.cond76

for.end99:                                        ; preds = %if.then91, %for.cond76
  %50 = load i32* %p_81.addr, align 4
  store i32 %50, i32* %l_126, align 4
  %51 = load i32* %p_81.addr, align 4
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define internal signext i16 @_ZL7func_93ijj(i32 %p_94, i32 %p_95, i32 %p_96) #2 {
entry:
  %p_94.addr = alloca i32, align 4
  %p_95.addr = alloca i32, align 4
  %p_96.addr = alloca i32, align 4
  %l_97 = alloca [8 x [6 x [5 x i32]]], align 16
  %l_98 = alloca i32, align 4
  %l_99 = alloca i32, align 4
  %l_100 = alloca i32, align 4
  %l_101 = alloca i32, align 4
  %l_102 = alloca [6 x [7 x i32]], align 16
  %l_103 = alloca [8 x i32], align 16
  %l_104 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %p_94, i32* %p_94.addr, align 4
  store i32 %p_95, i32* %p_95.addr, align 4
  store i32 %p_96, i32* %p_96.addr, align 4
  %0 = bitcast [8 x [6 x [5 x i32]]]* %l_97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([8 x [6 x [5 x i32]]]* @_ZZL7func_93ijjE4l_97 to i8*), i64 960, i32 16, i1 false)
  store i32 8, i32* %l_98, align 4
  store i32 -1, i32* %l_99, align 4
  store i32 -5, i32* %l_100, align 4
  store i32 -2112155162, i32* %l_101, align 4
  %1 = bitcast [6 x [7 x i32]]* %l_102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([6 x [7 x i32]]* @_ZZL7func_93ijjE5l_102 to i8*), i64 168, i32 16, i1 false)
  %2 = bitcast [8 x i32]* %l_103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([8 x i32]* @_ZZL7func_93ijjE5l_103 to i8*), i64 32, i32 16, i1 false)
  store i32 9, i32* %l_104, align 4
  store i32 -5, i32* %p_94.addr, align 4
  %3 = load i32* %l_104, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %l_104, align 4
  %4 = load i32* %p_95.addr, align 4
  %conv = trunc i32 %4 to i16
  ret i16 %conv
}

attributes #0 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.6.1 (tags/RELEASE_361/final)"}
